%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1610.m00.i125.n015.S.c12.310635362 Vector cartoon blue cloudy sky horizontal seamless pattern.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Anton
%%CreationDate: 10/16/2016
%%BoundingBox: 0 0 525 350
%%HiResBoundingBox: 0 0 525 350
%%CropBox: 0 0 525 350
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">mjkk</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-10-16T10:09:02+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-10-16T10:09:02+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-10-16T10:09:02+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AnXHOut5F3HG1dxxtXccb&#xA;V3HG1dxxtXccbV3HG1dxxtXccbV3HG1dxxtXccbV3HG1dxxtXccbV3HG1dxxtXccbV3HG1dxxtXc&#xA;cbV3HG1dxxtXccbV3HG1RFlpl7fSGO1iMjD7RGwHzJoBkJ5YwFks4YpSOwTeLyTqrSKJGjjQ/abl&#xA;y4/RmMddCtnIGin1QWreXr7TAHl4vCzcVlU9+oqD02y3DqY5OXNry6eUOfJLeOX20O442ruONqq8&#xA;cjbJ3HG1dwNCabDqcbWnBCxAAqT0GJNKBas1jcLSqVr4b5WM0T1bTp5jopNEyMVYUYdRlglfJrlE&#xA;g0WuONodxxtXccbV3HG1VLe1nuJRFAhkkboqiuCUxEWUxiSaCbL5P1goGKxqSPsF9/wqPxzGOtg5&#xA;A0c0tvNNvLJwlzEYyfsk7g/IjY5fDLGXItM8co8wpw2txMSIYnlI6hFLU+7JSmBzLERJ5LGjZWKs&#xA;CrA0IIoQcIKCGuONq7jjau442ruONq7jjau442ruONq7jjau442ruONqyLQ/LsLxRX145AJDwwqB&#xA;UhT1aoOx8Mws+pNmMXMwaYECRZT9YhVG9JeDHfoBU9K7Zr+A3u7Cx0UBNKDXmcnwhjZSzzW8k2kr&#xA;Q09OVTIPEEED8Tl+kAE/g4+rsw+LDuObO3Wu442ruONqq8ciyV7GxmvLlLeIVdz18AOp+jIZMgiL&#xA;LKEDI0HodvaW9vbrbxIFiUU406/PxzSymZGzzdxGAAoMS1LTbO21F2t2BUnkI1FAhPUeGZsc0pRo&#xA;uOMEYytSwNqBvLduRlrUHqPDtmVhyCqcLUYjfEheOXuK7jiruOKu44qzTR7JNOsI6L/pU6h5XpuA&#xA;dwv0Zq80+OXkHZ4cfBHzKJJJNSanxyLY6VYbiFre6X1YW7HqD2IOAWDY5rICQotwslvGIrdFiiXo&#xA;oH6/E4yHEbO5WOwoMf8ANixvLbzcQJXDLIR3C04/rzM0lgEdHD1YFgpDxzLcR3HFXccVdxxV3HFX&#xA;ccVV7PTry8k9O1haZ+4UVp8z0H05CeSMRcjTOGOUjURaPfyl5gRSxs2IH8rIx+4MTlI1mI9W46PK&#xA;OiY6L5Jlu6S3rtBCDQxhSrk+Hxjb7soz68R2juW/BoDLeWwZQnl60s7VksA0birAFj8R9zmvOqlI&#xA;+p2A0sYioseOtwvuVYsPhI22p265liLjlQk1eUt8CKq/5W/9MlwoUotXlaXkWDqNmQbDHhVZruoQ&#xA;zWaRRmrO1WB7Af25fp4G7cXVS2pIOOZjhO44q7jiqrxyNppG2GrXlgjLb8RzNWJWpNMqyYYz5tuP&#xA;LKHJFv5o1J0KOkTKwoQVO4+/KhpIebb+an5IU6o5Nfq8P3N/zVk/y47yj8zLyd+k3/5Z4fuf/mrH&#xA;wB3lfzMvJSlvppECcUQA1qgofvyUcMQxlnkUOxZt2JPzywADk1Ek82uOG2NO442tMhs/LFs1pHNd&#xA;zMskoDKiU2B3Fag5hT1R4qiHNhpRVkpzO6tIzA/D2+QzGiNnKKDOo2wl9Plt3f8AZrk6QiFZWFVI&#xA;IPQjAqye5hhWrtQ9l7n6MQFY1q101zOCdgo2HgD2zNwRoOFqZWa7kDxy+3Gp3HG1p3HG1p3HG1p3&#xA;HG1pdHDJI4SNS7tsqqKk/IDEyA5pEb5PQPLNu1hoac4TFcSOxkDgq1amlQd/sgZpNVLjyc7DutKP&#xA;Dx8qKZR3zVpIKjxHXKDj7m+ObvVBeoTQKxyPhll4wVVmjPfifBtj+ORMSzEw848waXeWOoTTOKQ3&#xA;MjvFIh+EgsTTp1Fc22mEZjnuHV6icoHklRUHryJPU1/szI8Ad7j/AJo9zkqhBUkHvvh8AI/NS7m3&#xA;Z3ILGpApXLYRERQaJzMjZW8clbCnccbWnccbWmdal5Ktri7WS0cW0TV9ZKE08Cg/hmnxa8xjUty7&#xA;jLoBKVx2C7/Amlcf76fl41SlflxwfyhPuDL+Tod5SK98n6tbrI6Ks8SE0KH4io78f4ZmY9bCW3Iu&#xA;Fk0U42eYSXjmW4lO44rTuOK07jitO44rS6OGSRuMalm8AK4CQEiJPJk6Xqpawi5/dypGFKHcnjtX&#xA;bxzAMdzTsYE0LSy9vDcPUfDGv2Qf1nCBTJBLcwsSOQFPHbDaaXx3CNX03+YBpiqJsWtjc0nIIpsD&#xA;0r74ChOXgglTi6K69gQCMiJEckGIPNJNW0uOACWHZCaMnWnuPbMrFlvYuJmw1uEs45e49O44rTuO&#xA;K0j7bQNWuBWO2enYvRB9HMrXKZaiEeZbo6ecuQZl5Z0EabbF51U3kh+JhvxXsoP4nNVqtR4hofS7&#xA;bSafwxZ+pMLuaJk4A1YHt0GUwiebblkCKS65hkcK0L8Jk+yTupB6qw8Dl4Pe45QUWtypcGBoCZ12&#xA;PpMGB+VaZM4gRfRAkQUSbvUrkgCL0V/35KQSPkgyAjEMjIlZrdhLLoUqojTOChjAHJqhqFqD2rk8&#xA;GQDIOjDPjJxnqwdo2VirCjDYg7EZtwXUkNccUU7jitO44rSY6Jos2p3axgFYF3mlA2AHYHpU5RqM&#xA;4xxvq36fAckq6M8g0TSIYfRS0iKbA8lDE08S1Sc00tRMm7Luo6eAFUEFDqsUkirDIZWH8oJAHuel&#xA;MtOPvaRMo5r6Q/ZUD8cqGMNhzFdHeH/dlKeAG+A4+5Mcveg5LPR2+zYwFT3CKP1DLhPJ/OLVKOP+&#xA;aEFPoGiyg0t2hJ/ajc/qbkMtjqMg620ywYz0pItV0BrNPWicywV+Kooy16V8czMOo4tjzcTLg4dx&#xA;ySrjmRbj0790PtOFPgcrllo03QwcQtVi1IWqMsL7sakgCv3nKZy4nJx4+FBy31xJIXLmp+n9eQtt&#xA;pTeeVxRmJHh0/ViqngV2KrkdkYMpoRiqMj1IgUII/wBU4bRTUl+7bopr/Md8bWlgmU/stX2GXDM4&#xA;x03m3zH8j08aZMZfJgcBHUJrolzZW07SXKFmoPSagPE9+uV5hKUdk4TGMt2RL5jskWqu2/bhWv35&#xA;gnAXPjl7kHceZ2ClbVCCf2n2H/AjJDB3o8Q9EHDrWqKpbaVa9WWtD/saZYccWPEV0mpatcIf90xf&#xA;tOoKgf7I1wCEQtlLORV+Ssag1DdD88tQm1p5hmjAW4T1QP2xs309jlUsI6JEkyi8xaeUK0IJ7lSW&#xA;H3Vyo4TbMZBST6/qFjeRp6alpwf7wilFp0zL02OUefJw9TOMvekvHMu3Ep3Aim3Xpja0n+i+U5L2&#xA;Jbi5cwwNuiqPjYeO/QZhZ9YIGhuXN0+jMxZ2DK1WCxtI7W32EahV8fcmnc5rt5y4i7E1CPCEFcXy&#xA;xEeszKvZyDx+8dPpy2MO5pMih5ra0MoUSGCZ6kCNuBPvTofuyQkWNLTp9z2vZae9Dh4x3LShNp98&#xA;jF1l+tp/vmVmX9RCn6ckJj3LSHbX54T6T2oRl241Ip9FMl4QPVHEsbzJcH7EKD5kn+mHwQvEgr3V&#xA;b25RonYemaVVQAD3HvmRixRG7iZspOyA45fbj04oDsRXAQCkEjkt9GP+QfcMHCO5PHLvd6Mf8g+4&#xA;YOAMvEl3u9CL+QfdjwRXxZd7vQi/kH3Y8EV8WXe70Iv5B92PBFfFl3u9GP8AkX7hh4AviS72xEg6&#xA;KB8hjwhjxy72+OSYu442tO442tO442tNjku4JHywFI2bDOP7QD+vAYhkMkh1XRzTRtyRireIJH6q&#xA;YDjiWQzSXSXM8prIxcj+Ysf1nAMcQnxpKZYntT5YeAI8WTZZ6U2+4YeAIOSXe5Y5ZWCKGkbsoqT9&#xA;2GwGO580VHompyCot2H+vRP+JEZWc8B1ZjBM9GS+XrJbCyka4jjiu+Ro7Mh+GgpuCab5r9TPjlsf&#xA;S7DTQ4Im64kebmc/tfgMq4A2eJJet6VT4t/fYUGROPdkMuyHLK3xKeQbep98sDUXYUMMm9ZpC8j8&#xA;pDuSTU1+eZsY7bNEpgHdHWuuXkFFlHrJ/lbN/wAFlcsQLYJJnDr1hIPjLRHwYVH3iuVHEWXE1fz6&#xA;Tc255zIWUEow3YH5fwxgJAqaY+XFPsivjQf0zLELcaWWjVLfh7rX7v6ZMAjq1ymD0WlR8slbVTqD&#xA;HiDLgPc7iMeJBge5M9K0c3DCWcEQdh0LH+mUZc1bDm3YsN7nkmFx5fs5GUx1hA+0BvUfT0ymOokO&#xA;e7bLTxPJD3PlsAVt5DsN1fufYgZOOp72EtP3JY+m3qCrQPT2Ff1ZkDLE9Wk45dyHKEGhFD4ZO2FO&#xA;442tJxpHluS/h9eST0oSSEoKs1Nj4bZi5tUIGhuXKwaUzFnYK975PuI15WsgmP8AvtgFb6DWmQx6&#xA;0H6hTPJoSPpNoT/C+sca+gK/y80r+umW/m8fe1flMnchbnSNRthWa3dVG5YDko+ZFRlkc0Zci1zw&#xA;zjzCiLWcxeqImMQ6ycTx+/pkuMXV7sOA1dbKfHJWinccbWm1RSw5fZr8VOtO+AlIFlNodN0adKxX&#xA;LBvBioI+ggZinNMdHK/Lx70PNo7JKFjmjlU7j41U/cTlsc4I3ajgIOydyvb2diwhKxUWqqCASfp5&#xA;VOYe8pbuWAANkBD5gjRDzEkrHpy4Cn/AgZM4l4kztby1vIvgINR8cZ6jxBGVyiQyBtCXVrDaoXW8&#xA;ktk7R8uQ/wBipyUZE9LQQk6ai/q8puVwgNVSRjT6QNsv4O7Zjatca7czrwMaCM9V+Lf6QQciMQCm&#xA;Tcep6isAjt4giDoyhm6+7FsTCN7rZQXHMq3BdxOAqCQ7gO6j9X6sHCGwZC7gv8v68HCF8UuIHfJX&#xA;TCiVpZQNt8TJkMRLcUFxcNxijLkdaDp88rlPvb4Qrkj7TQbozIbhOMVfjAYV/CuUyyitmwRTePR9&#xA;PjkV1i+JdxUkivyJyo5CyoI3IJdirsVdirHdZkMtzQxen6dV5d2+nM3CKHNw8xs8kLaWU91OsMK8&#xA;nb7gPE+2WTyCIssIYzI0GdWcC2lnFCzD92oUt0BOaacuKRLuYR4IgOa8hHSrfIf1xGMqcobF0tKl&#xA;GC/zU2x4F8TyVEkjcfCQfbIkEMxIHk2VHErQEUpx7Y2tPPrq0mt52imTg4PTtT29s3cJiQsOjnAx&#xA;NFS45K2NLo4nd1RAS7EBQOpJwEit0gG9kdL5f1WKP1Gg5A9QvF2FfYVygZ8ZNW5Bw5QLQtzZXFs4&#xA;SeL02I5AEDp9GWQMZcmuZnHYqAjA7ZKgx8STfH2H3DHhC+JJcoUGpQE/SP1YDFkMpDmCMahAD3NS&#xA;f14iCnKVpWvYfcMlQYcZbofYntUV/XgMQUxyEO37bfLbERCymSqccbRSHu7lLdd92P2V33wGVM4Q&#xA;tDRamWbi6ha9DvkeJs8EIgu/jjaeANFmPXfG0iICPsdVFrD6LQLKpJJJNOv0HK5Y7N2zBV4dct4C&#xA;xhswnPdgH2+7jTInETzK8SJttekuJ1iS0Zi3ZG5N91BkJYqF2yBtE6jqF1ZqrNZyKrftOVp8qqXy&#xA;MIiXVMgRzCFg19m5epAR/LQ/rrlngNRygKUusXbMpSkYHYb1+dcsGGLUcxV49can72Kp8VP8DkDg&#xA;7izGfvClfap66BIlaOhryrQ/LbJY8Vc2M8t8kCzyvs7s3sSTlwADSSSy3SrFNOsgWFbiShfxr2X6&#xA;M1mbJ4kvJ2mHGMcfMqrQ3Mp5Pt4V2p9GREohJhKXNy2/E15oSOgJ74TO0CFdQ1xuQ1S1P8onbG4r&#xA;UraaMcuUbry60Bpv7Yg96mPUFE20/qDi2zj8crnGm3HO0HrmmLeWpdB/pEQqh7kd1/pluny8J8i1&#xA;6jDxxvqGH8c2luqpP/LunRgfXpeavET6YpRSpWldxv17ZhanKfpDm6XEPqPRNnvJOR40C9sxxjDk&#xA;HKeiVeZLS5vEWeBlZIEJePcP4kjbLtPMR2PVrzR49+5imZjQqxPU8T9BwgtM4dQl0+ozNIfTPFB0&#xA;8T9+RMmyOIdW11SYR0Khn7Mf6DDxIOIWjbGdp4SzAcgaGmSBapwoonjhtjTuONrS91fieABbty2H&#xA;4VyNsgEsutOv5nLsVb+VQTt7CoGRLbGQCHGlXxP93T3LL/XBTPjCPtbXUIo+BdAoOykcqfqwhqkY&#xA;lFNbl1HM/EOpUUH3VOFAlSk1owBINadqYsxNRCksFO1TSp2A+eBmy7QdNbTTcPM8cjuq+mYyTtuT&#xA;uQOtR0zCzT46pysY4LtMWu5a0HFgfY5X4YScpQ0+kabcyseLRSMKkrstR3oRk45pxHewlhhI9xYy&#xA;yAMQDyAJAbx98zwXXkNccNopNdK0JroCaclIP2QPtN/QZjZtRw7Dm5WHTcW55JzHa6bAypDbo0gO&#xA;xIBIP+sanMUzmdyXKEYR2A3VZrsA0QAsP2uw+WRjDvZTydyiVmkALuBXoGNPwydgcmsgnmtEL8qH&#xA;4QOrHph4gjgKoptkO3J29thkTZZDhHm2ZIR9qCgwUe9PEO5uNrXmGUmNh49MSJUoMb7kQ9xGlK1o&#xA;ejDcZWIktpmAxm/s2tblrqJUlt2YkBgGC8uzKfwzYY58Q4TzddkhwniG4WjWrvpwQAAABQVAA2pQ&#xA;HD4EUePJZLrk8a8vTU9u/wDXHwQmOQlCnzFfn7IjU+IB/iTj4IZ8RQMt00ikGONa9SqgH78sEaRa&#xA;jkkISazHxupNdyFAwUm0HkUplp87pBwEdAan1K9T8skC1yhZV/VkrXkcKeEIqBvUSp6jY4baZRoo&#xA;njkVdxxV3HFXccVdxxV3HFV8cksf2GK/LIkApBIVTe3lP70/hg4IsuMuW+vR/u0n5hf6YPDinxJL&#xA;47zUXbjHI7Meyip/AYDCI5pE59FdbXWp6K4kCMaEttQH2yBnjHczEMh702GiaYIxGY6t/MWIY/jm&#xA;N48+blfl4VSreXMduscK/D6h4LTamxIH4ZHHG92WSVCgsjMCKSSxJ2JG2SNlhHhCm4jDDgSR4HJC&#xA;2BrouVlAMrjkxNFU9K4COgZA9S015IKA0IJoEoKYRjCPELRfieUfw1+kjGu9brkujuGDfHV17qcB&#xA;h3JjM9V0l3aKvxRgfcP1YBjl3sjkj3ISO8J+ELUNX4ajt3y0waRNTvmC2chbaoA+kmg/HDDmiXJJ&#xA;CppsN8y3EpByWtyzEnfw3xttEgs+p3H8v4jG08Qd9UuP5PxH9cbXiDvqlx/J+I/rja8Qd9UuP5Px&#xA;H9cbXiCidHd3FIzyJ6Ajf8cGyeJPLDy6iqGuabGoiQ7U9/7Mpll7mYimiWFkhqsCA0p9kdMqMyyp&#xA;KLu2EV7II0CRGhAHjTsMycZsNGTm3xw2wp3HG1p3HG1p3HG1p3HG1p3HG1p3HG1pPtPsLFbJJpUE&#xA;jOKsW3+gDMLJkkZUHOxY4iNlt9MsJzX02h78gaAj5HEZZDraPChLpSIjeGAelEgiUdDStfuyBBlu&#xA;d2wSEdhsvjumO7041oCK1P0b5EwTHJ3rWiLSNI5NOq8evyockJUKQY2bKB1SNLq3ccijihRj2Zeh&#xA;2y3HYLVMgpbaa0oPo3o9OVdudPhPv7ZbLF3NYkmK3NuwqsqEeIYZXwlla1r6AjijByvZd+vvhGMo&#xA;MkA92hkpIeDdgx/UTl4jTAlEW/1iVwkTEk9N9shKgLKYgk0Ew/RM5Xe4+LwANPvrmP447nI8A96V&#xA;XsV7buUFvJK386qeHzLUpmRCcT1aJY5BZazx2hMl1IObjc+FOyjDON8kRK+3kfUZ/VZeNnEf3an9&#xA;t+lT8sgRwjzZc0wu4tPgs3pGjFVLFiPAePXKomRlzZyjACqStdPvGj9QQvx69MyfFj3uN4Uu5Q45&#xA;O2FO442tO442tKkUcB/vHK/IVyJJ6JAHVMbb6qqqiMrMOhpQ5TK26NInIM3YqlF44kuGI6D4R9GZ&#xA;EBQceZsreOFWwhPQVwWtN+jJ/IfuOPEE0iIdLuZdxxUAVJY5CWUBnHCSrLo4KAGdfVr9kAlafPIH&#xA;N5bMxg891K7ttOtkHO6Bb2pT7q1yUJyPREscR1VLKezRBwZSe8lOR/jgnGRTAgIi61a3EXEnYbgn&#xA;4fvrkIYTdtk8tikqXXFeYxiSlejU2+W+X+EGniKubiYsGLkkY8IRxFc2qJGVWUgE7LvTI+Ey41c6&#xA;i3HiF28DSmR8FPiFDSTSSH4jt4ZYIgMCbQ80UDofVUFRvU9vpyQQk8clmJ25xVhJ+Hc1H45PdU4g&#xA;eBkHoleA7L/TIFVVbY3DCIIHLdFNP44DKhZTGJJoJloulpZSzPxCswAqG5U33HXMXPk4gKcrDAgm&#xA;0XJdSEckKhew75AQHVMsh6NRXcpkAanHv228cTAUiOQ2gp9A0a6nd6sskhqeJoK+1RTJjNOIXggS&#xA;hLm5t9MkNszgolOKj7QBFegy6I4xbRIcJpLZNYiurlFmrHZqeRWlSxHTlTtlgx0NuaLRtx5htlH7&#xA;mssnYmoUfOu+VjCeqTNHw6ZDMSXdi53ZiwFSe/2crllIZRxCRWXmlRxLWJyW7ISDX6dslDMTzRkw&#xA;gckpknhikMcjcHHUEH9fTLxu0cK9CjjkhDDxBriil68lNVJB8RtgVstIdyxP0nGgl1X/AJj95xQt&#xA;44VTG+01rf40JaI9+4+eY+PLxe9yMuHh36IIxK25FT498utpa9KnRnHydh/HG024xy0IE8qg9g7Y&#xA;Nu5PEVF7Hn9qeY/7Ov68lxItT/RFt3Z6/Mf0w8ZVy6TbA1q5+ZH8BjxlXHSLY93H0j+mPGVUp9IA&#xA;WsDEsOqtTf5UGETVDGPUYlI/eKo60JoPuyVhVExTt8dC4PVh8X34VRVvfXcSUdC8Y7tUU+nAQqsd&#xA;YSm0Rr88HCqDub6afY/Cn8o/jkgFQ464VXlJInBdWX3G1R7HAqYW+qW0RDcJgy7g+qTv9wyuUCWQ&#xA;NJgfMcIo7RSAtvXYV/HK/AZcbQ8x2VN45K/Jf+asfBKOJVh8wWZPwoxP8rcR+tgMBwlInSp+n4I2&#xA;5mGjD7K1Uk/IKxweAT1ZDJvdIC4ks55XkfTZGkc1LF3FT/wRycYkCrYmQPRCTae0rgw25t17835A&#xA;/hUZYJVzNsCQqro8PEcnYt3IoB+rBxoREdrwAVZZOI6Dlg4ltcbVG+0zn/Zt/A4OJVosbUf7rB+e&#xA;/wCvHiKFVY1UUUUHgMbVvhgtaTWz0dKB7jcnpH/XMeefoHKx6fqUwWCBBRUVR7ADKDIlyBEBbLZ2&#xA;so+ONT7gUP3jCJyCJY4notjuI5wY3WnIUp2OExMdwxjMS2KTzW7RyOtDRTTlmVGVhxJRoqfHDbF3&#xA;HG1dxxtXccbV3HG1dxxtXccbV3HG1UXsbZ25FKN/MtVP4UyQkVW/o21LcmUsR/MxP6zjxlWm0uyZ&#xA;q+nT2BIH68PGVXmwtCKektB7b/fg4yqmdKsj/uunyJ/rh4yqiLG+g2gkV4+yPkuMdVcINSJoEhj/&#xA;AMoD/bx4grjowc8pZmZz9o7YPEVVi0m0Q1Klz/lH+ApgMyqtJZW0gAaJdulBT9WDiKuisraI1jjA&#xA;Pj1P3nEyJVU+GtKivhgVBajfG3okRHqHcggnbJwjaEse/vHNTKR8tv1ZZwhVNrq5Y1Mr/wDBHDQV&#xA;b6sv87fecaVVjvruP7Mp+n4v11wGIVFW2ryB6XHxIe4G4yJh3KyLR0iuJPWUh0TcEePbMXNIgU34&#xA;IWbTGe5bl6cQq3cjf7spjDqW6eQ8gpU9Mc5VLuegPQfPJc9gwqty4Xsg6KoHhQ4+GF8UqCtvyU9D&#xA;1HiMmQ1hMTSSA7V5r0+YzH5Fy+YSv6jNv9nb/KGZPiBxPDKi0ZUkEUI7ZK2BDXHG1dxxtVSC3aaQ&#xA;Iv0nwGCUqDKMCTSZJZ2kKVYBvFm3/DMczkXJGOMRupyfUH2MdP8AKUU/VkgJBgTA9EFPbhDVG5Rn&#xA;of4HLYytplGuSlxyVsXccbVYkkLyekrq0ndQQSKeOE2q90dWACF691pQfOpGAFaS6TWbeN2QxuGU&#xA;kMDTqNj3y0Yyi19vq1pM4T4kY9OQFPvBwGBC2juIytLuONq7jjau442ruGNqg20axNSEIr3DHb78&#xA;n4hRSHbQIt+MrDwqAf6ZLxStKDaBdV+GRCPeo/gcl4oRTaaBOftyqPkCf10x8UJpZNod0pHpkSDu&#xA;fs0+/EZQilWHQHIrNIF/yV3P34Dl7k02PLs7NSOQN4bGuPjAKIksk02xTTtNCgATMAZWHdj/AEzD&#xA;nPjl5OXEcMWkkZdgSBX4qbE/TkiGkSpe0wB/d8gP2gxqDgEe9kZdylkmtZFEkUaxp9lRQYSbVezt&#xA;x+JvhHj0GCk2hJNYjjb0bdjNO+wjQ7V9z0GT8K9yvGRyVI4pFjHqNyc7sR0qTXb2wEsaXccFqvhi&#xA;DyKp6E70wSlQZRjZTFI4LfZRu309MoJMnJAEVG4DSPVWUgfZUEVycNg1zFlDEEGh65Y1JbqN6Iby&#xA;3jUFj8RdF3JBGwp88thGwWJKGbzBCCQIXqOxIGS8IotCyaze3FYoY6FunDkX+in9MmMYHNFpppFi&#xA;YIvVmSly9eTEkmh3ocqySvlyZAJjlaWN6rpM0UnrRcplkYlqCpBO/bMjHkB2YEJYyMpowKnwIplq&#xA;G1kkX7LEfIkY0qKtNUuIGqSZR/KzGmRlAFQU4tNWtZo+UjLCwNOLMPwyiWMhkCjY3ikXlG6uvSqk&#xA;EfhkDsltuK/aIHzxAtVM3ig0Var41yfho4lQSRP9k/ERXjkTEhNhvjkbV3HG1dxxtXccbVSmuDbS&#xA;RO+0DEq7Hsx3Un22yQFpukZ6rFWX9ltwB0HyyvhZcSWzXtzZsfXiM0H7MydQPBh/HLREHkwulh8w&#xA;afSvxk+HHf8AXh8IrxBYt9e354WsZghP2p260/yffDwiPNbtCMNVA/eXyRjxMg/hk/T3I3QN1ID8&#xA;JuHuG7sa8R8uW5ycR5UxKYWOo2lrAothGk5/vWnDGvyKhtsrnAk7shKkxHmC0EY9SVTJT4giEivt&#xA;Vcq8Es/EXWmpLeyt6UfGJB8TnYlj0oo7Yyx8KOK1OfWnspfSm+JTUq0R3p/lLtvhGISXjIam80Wj&#xA;r9h2I2GwH41xjpyEyy2hYvMfKQh4aIfs0YV+mtBkzhYcSvca0wSsSKCejySJQf7FSxOAY0mSSCS8&#xA;N39YXk8wNefEnfp0pl1CqYMmjt7S5jDvCrMftF4+Jr3+0K5imRHVspRn0W3Yh4CbeVa8TGeNT74R&#xA;lPXdTFL5bDXolLidnCitFkZifkDlonAsaKDEmtOTxNwSOtOf8Mn6fJG7Rg1d23ScnxIf+ONx8loo&#xA;q30C7nT1Jn9Nv5WBJ/GmRlmA5JEUQvlgftXFfYLT+OQ8fyTwI+10m1t0K8RIT+06qT+rK5ZCUiKq&#xA;8FpEvIxIB02UYgkqaCDudWggU0Ar2QHc/wBMsGJjxIOTV7ZgZKkuf2KGv9MtEKYlLk1G5WMoCKHo&#xA;abivhkqQjl1WBYgwJ9QD7O9a/PI8Kptb3kbopJrUfaymWPuZiSLC1FRlLNxWgriqAl1aKKQD0pGU&#xA;9TwKkH/ZcctGO2JKX6vqjSwGBYwqMQSxZWbbfopNMsxwo2glCW11dCAwpMpQihhkPHb2Y0/Xk5RF&#xA;2gFctze2sTLEI4Vbc8WDH6Ks34Y8IK2gVKs9ZGIqalhua+OTQmMIviB9Xv1YdlMhU/8AAtlZrqEs&#xA;kNhZnYwRke6L/TMTjPe28Ia/Rtj/AMs0X/AL/THxD3rwh36Nsf8Almi/4Bf6Y+Ie9eEOGn2QNRbx&#xA;A/6i/wBMeM968IXfUbT/AHxH/wACv9MeM968Id9RtP8AfEf/AAK/0x4z3rwhsWluNhElP9UYOIpp&#xA;cLeIdEUfIDHiK0uEYAoAAPbBa07jja07jja07jja07jja07jja07jja07jja07jja07jja0oXlhD&#xA;eQGGYHjWoYbEHxGSjMg2FItj9z5U1AH/AEW5R18JFKkfSvKuXjUd7DgSu50rWrCNpriLnCD8TqwN&#xA;K99twPoyyOUFiYoCS+YqeC08WPbJ2xpZby3JdYoquzkKqdakntjaaZjYeW7iOhurokd4oaqp+bHf&#xA;8BmNLP3MxBPAgAoOg6ZRbOnccbWnccbWnccbWlvoRnYov3DDxLTX1WD/AH0n/AjHiK0tNlancwx1&#xA;/wBVf6YeM96KDvqNp/viP/gV/pjxnvXhCK45Wzp3HFadxxWnccVp3HFadxxWnccVp3HFadxxWncc&#xA;Vp3HFadxxWnccVp3HFadxxWnccVp3HFadxxWnccVp3HFadxxWlL6la+k8Xop6T/bTiOJ+Yw8RRSH&#xA;tNC0q0m9a3t1SXs1SxFfDkTT6MkchPNREI3jkE07jitO44rTuOK07jitO44rTuOK07jitO44rSt+&#xA;798ju2el37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l&#xA;37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0&#xA;u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0u/d++O6+&#xA;l37v3x3X0u/d++O6+l37v3x3X0u/d++O6+l37v3x3X0v/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:b00a4978-84b7-f54f-9ef7-a37b5cb8c5d2</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:b00a4978-84b7-f54f-9ef7-a37b5cb8c5d2</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:6edd4701-5f81-6a47-8c50-b9e345220897</stRef:instanceID>
            <stRef:documentID>xmp.did:6edd4701-5f81-6a47-8c50-b9e345220897</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b00a4978-84b7-f54f-9ef7-a37b5cb8c5d2</stEvt:instanceID>
                  <stEvt:when>2016-10-16T10:09:02+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>525.000000</stDim:w>
            <stDim:h>350.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Оттенки серого</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -350 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 350 li
525 350 li
525 0 li
cp
clp
525 350 mo
0 350 li
0 0 li
525 0 li
525 350 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[1.55277e-008 -345.065 345.065 1.55277e-008 262.5 346.093 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.941176 .992157 1 ]
/C1 [.439216 .72549 .952941 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.55277e-008 -345.065 345.065 1.55277e-008 262.5 346.093 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~nF,f5mHs9,lg*j$l07EqkND!ijlPRaj5].YiSi_Qhr!;Ih;-lAgY:H9g"G$1f@SU)e^`1!e'landF$=f
cd0n^c-=JVbKJ&NaiVWFa2c3>`Pod6_o'@._83q&^V@Ls]tM(k]=YYc\[f5[\$rfS[C*BKZa6sCZ*CO;
YHP+3Xf\\+X/i8#WMuhpVl-DhV59u`USFQXTqS-PT:_^HSXl:@S"#k8R@0G0Q^=#(Q'ISuPEV/mOcb`e
O,o<]NK&mUMi3IMM2@%ELPLV=KnY25K7ec-JUr?%It)orI=6KjH[C'bH$OXZGB\4RF`heJF)uABEH,r:
~>
<~rVZTkqtp9fqYL'bq>'j^q"XXYp\4FUp@e4Qp%A"Mo^qbHoCMPDo()>@naZ,<nF,i7n*]W3md9E/mHj3+
m-F!'lK[["l07Hskih6okND$jk2tgfjlPUbjQ,C^j5].Yio8qUiSi_Qi8EMMhqm5HhVI#Dh;$f@gtUT<
gY1B8g"G'3f\"j/f@SX+f%/F&e^`4"eC<!se'ldodaHOjdF$=fd*U+bcd0n^cHXVYc-4DUbfe2QbK@uM
b/qcIaN2HDa2c6@`l?$<`Pog7`5KU3_o'C/_SX1+_83q&^qd_"^V@Ls^:q:o]tD"j]Xtef]=PSb]",A^
~>
<~s8N#srr2orrr2orrr2orrr2orrr2lprVc]nrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Kjr;?Kjr;?Kj
r;6Bgqtp9fqtp9fqtp9fqtp9fqtp6dqYL'bqYL'bqYL'bqYL'bqYL'aq>'j^q>'j^q>'j^q>'j^q>'j^
q=sa[q"XXZq"XXZq"XXZq"XXZq"XUXp\4FVp\4FVp\4FVp\4FVp\4FUp@e4Rp@e4Rp@e4Rp@e4Rp@e4R
p@\+Op%A"Np%A"Np%A"Np%A"Np%@tLo^qeJo^qeJo^qeJo^qeJo^qeIoCMSFoCMSFoCMSFoCMSFoCMSF
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
514.921 187.149 mo
514.921 186.341 506.775 185.659 495.607 185.439 cv
495.83 184.953 495.955 184.421 495.955 183.863 cv
495.955 181.893 494.419 180.248 492.364 179.834 cv
492.055 175.764 486.462 172.412 479.104 171.638 cv
483.026 163.945 483.018 156.136 478.968 153.898 cv
476.15 152.341 472.091 153.878 468.39 157.452 cv
464.455 152.417 458.176 150.008 452.365 151.89 cv
446.183 153.893 442.42 160.142 442.644 167.027 cv
439.957 166.207 437.499 166.446 435.994 167.951 cv
433.756 170.189 434.301 174.528 437.005 178.608 cv
436.974 178.607 436.943 178.605 436.912 178.605 cv
432.082 178.605 428.167 180.919 428.167 183.773 cv
428.167 184.183 428.256 184.579 428.408 184.961 cv
427.599 184.86 426.73 184.802 425.819 184.802 cv
421.619 184.802 418.214 185.979 418.214 187.431 cv
418.214 188.882 421.619 190.06 425.819 190.06 cv
426.587 190.06 427.326 190.019 428.024 189.946 cv
434.089 190.469 444 190.811 455.207 190.811 cv
472.648 190.811 486.961 189.985 488.49 188.932 cv
503.141 188.91 514.921 188.121 514.921 187.149 cv
cp
.623529 .717647 .839216 rgb
f
480.453 266.37 mo
480.013 266.359 479.58 266.36 479.153 266.368 cv
479.291 265.257 476.357 264.297 472.402 264.195 cv
471.741 264.178 471.095 264.188 470.47 264.218 cv
469.061 263.516 466.761 262.971 463.958 262.714 cv
464.171 262.515 464.318 262.307 464.389 262.092 cv
464.863 260.659 461.838 259.366 457.305 258.885 cv
457.836 258.64 458.188 258.359 458.289 258.053 cv
458.619 257.056 456.224 256.168 452.836 255.978 cv
453.291 255.642 453.606 255.285 453.73 254.91 cv
454.462 252.698 448.728 250.742 440.924 250.541 cv
439.771 250.511 438.642 250.526 437.545 250.572 cv
434.658 248.757 428.507 247.424 421.006 247.231 cv
416.437 247.113 412.083 247.437 408.465 248.078 cv
407.942 248.046 407.41 248.02 406.864 248.006 cv
402.391 247.891 398.237 248.42 395.524 249.321 cv
394.305 249.06 392.826 248.887 391.19 248.845 cv
386.514 248.725 382.367 249.701 381.929 251.027 cv
381.921 251.05 381.924 251.072 381.919 251.095 cv
375.886 250.965 370.568 252.23 370.001 253.944 cv
369.605 255.144 371.641 256.246 374.959 256.862 cv
370.568 257.452 367.345 258.66 366.859 260.13 cv
366.635 260.809 367.024 261.463 367.892 262.051 cv
364.884 262.201 362.198 262.643 360.248 263.28 cv
358.915 262.616 356.501 262.141 353.611 262.067 cv
348.909 261.946 344.739 262.928 344.298 264.261 cv
343.857 265.594 347.312 266.773 352.015 266.894 cv
353.963 266.944 355.815 266.803 357.353 266.528 cv
358.563 268.053 363.114 269.251 368.909 269.401 cv
370.668 269.446 372.377 269.389 373.967 269.25 cv
376.552 271.023 382.432 272.338 389.648 272.524 cv
396.08 272.69 402.057 271.919 405.903 270.609 cv
407.769 270.76 409.707 270.866 411.71 270.918 cv
414.072 270.978 416.395 270.961 418.654 270.878 cv
418.755 270.92 418.868 270.959 418.976 270.999 cv
417.904 271.29 417.179 271.687 417.029 272.138 cv
416.7 273.133 419.279 274.013 422.789 274.103 cv
426.3 274.194 429.412 273.46 429.741 272.465 cv
429.791 272.315 429.767 272.169 429.691 272.027 cv
433.692 271.72 436.801 270.74 437.21 269.503 cv
437.246 269.394 437.256 269.287 437.249 269.18 cv
437.628 269.198 438.011 269.213 438.399 269.223 cv
440.084 269.266 441.734 269.236 443.307 269.14 cv
443.611 270.324 446.884 271.306 451.194 271.417 cv
453.249 271.47 455.201 271.315 456.801 271.016 cv
458.573 272.01 462.047 272.732 466.254 272.84 cv
471.048 272.964 475.434 272.257 477.657 271.139 cv
478.047 271.165 478.445 271.187 478.856 271.197 cv
483.559 271.318 487.729 270.336 488.17 269.003 cv
488.61 267.67 485.156 266.491 480.453 266.37 cv
cp
.682353 .788235 .921569 rgb
f
145.829 291.99 mo
145.829 291.534 151.296 291.12 160.172 290.815 cv
160.041 290.716 159.959 290.616 159.959 290.515 cv
159.959 289.32 169.23 288.312 181.951 287.985 cv
181.882 287.888 181.84 287.79 181.84 287.69 cv
181.84 286.236 189.335 285.019 199.413 284.692 cv
195.274 284.148 192.893 283.518 192.893 282.845 cv
192.893 282.077 195.988 281.363 201.281 280.772 cv
199.353 280.283 198.241 279.734 198.241 279.151 cv
198.241 277.579 206.14 276.244 217.176 275.738 cv
218.911 274.269 223.499 273.216 228.903 273.216 cv
229.777 273.216 230.63 273.244 231.453 273.296 cv
234.39 272.794 238.178 272.49 242.319 272.49 cv
251.647 272.49 259.21 274.028 259.21 275.925 cv
259.21 276.513 258.48 277.066 257.2 277.55 cv
261.074 278.047 264.235 278.78 266.279 279.663 cv
280.61 280.306 290.229 281.49 290.229 282.845 cv
290.229 283.622 287.065 284.342 281.672 284.937 cv
294.024 286.199 301.994 288.183 301.994 290.415 cv
301.994 291.191 301.019 291.935 299.248 292.631 cv
310.581 293.054 318.039 293.772 318.039 294.587 cv
318.039 295.883 299.154 296.935 275.818 296.941 cv
282.167 297.717 285.95 298.688 285.95 299.742 cv
285.95 301.766 272.026 303.483 252.685 304.1 cv
252.736 304.161 252.792 304.222 252.792 304.284 cv
252.792 304.991 249.356 305.628 243.871 306.08 cv
249.02 306.393 252.435 306.935 252.435 307.554 cv
252.435 308.524 244.055 309.31 233.717 309.31 cv
230.278 309.31 227.066 309.222 224.296 309.07 cv
222.999 309.79 220.613 310.279 217.851 310.279 cv
213.716 310.279 210.363 309.195 210.363 307.857 cv
210.363 307.361 210.828 306.901 211.617 306.517 cv
202.022 306.115 195.389 305.268 195.389 304.284 cv
195.389 303.747 197.378 303.251 200.726 302.845 cv
192.761 302.027 187.901 300.938 187.901 299.742 cv
187.901 299.208 188.881 298.695 190.662 298.218 cv
175.549 297.54 165.439 296.307 165.439 294.897 cv
165.439 294.372 166.847 293.872 169.385 293.415 cv
155.218 293.114 145.829 292.588 145.829 291.99 cv
cp
f
80.1757 101.533 mo
85.942 101.533 90.6164 100.459 90.6164 99.1356 cv
90.6164 97.8117 85.942 96.7385 80.1757 96.7385 cv
74.4095 96.7385 69.735 97.8117 69.735 99.1356 cv
69.735 100.459 74.4095 101.533 80.1757 101.533 cv
cp
f
298.969 94.5897 mo
298.969 93.0854 283.804 91.8154 263.013 91.4071 cv
263.43 90.5024 263.663 89.5121 263.663 88.4723 cv
263.663 84.8052 260.802 81.743 256.977 80.9733 cv
256.402 73.3957 245.99 67.1557 232.293 65.7159 cv
239.593 51.3949 239.58 36.858 232.04 32.6914 cv
226.794 29.7926 219.237 32.6535 212.348 39.3072 cv
205.022 29.9335 193.333 25.4494 182.517 28.9533 cv
171.009 32.6815 164.003 44.3146 164.421 57.131 cv
159.418 55.6049 154.843 56.0506 152.041 58.8521 cv
147.875 63.0183 148.889 71.0946 153.923 78.6896 cv
153.865 78.6892 153.808 78.6844 153.75 78.6844 cv
144.758 78.6844 137.47 82.9921 137.47 88.3059 cv
137.47 89.0681 137.635 89.806 137.919 90.5171 cv
136.413 90.3284 134.795 90.2201 133.1 90.2201 cv
125.281 90.2201 118.943 92.4112 118.943 95.1141 cv
118.943 97.8169 125.281 100.008 133.1 100.008 cv
134.528 100.008 135.905 99.9333 137.205 99.7973 cv
148.494 100.771 166.944 101.406 187.807 101.406 cv
220.274 101.406 246.919 99.8693 249.764 97.9086 cv
277.04 97.8687 298.969 96.3987 298.969 94.5897 cv
cp
.788235 .901961 1 rgb
f
33.6229 158.707 mo
33.4484 158.881 33.355 159.057 33.355 159.235 cv
33.355 161.881 53.0257 164.076 78.8254 164.497 cv
75.1783 165.402 73.0383 166.478 73.0383 167.637 cv
73.0383 170.253 83.8452 172.461 98.6752 173.179 cv
96.6086 173.978 95.3951 174.916 95.3951 175.925 cv
95.3951 178.809 105.154 181.147 117.193 181.147 cv
119.053 181.147 120.849 181.086 122.573 180.981 cv
123.921 183.547 129.127 185.462 135.358 185.462 cv
142.612 185.462 148.492 182.869 148.492 179.671 cv
148.492 178.115 147.092 176.705 144.825 175.664 cv
150.029 175.069 153.523 173.986 153.523 172.746 cv
153.523 171.357 149.151 170.164 142.89 169.634 cv
144.319 169.011 145.139 168.34 145.139 167.637 cv
145.139 166.499 143.066 165.441 139.537 164.546 cv
151.341 162.834 159.112 159.925 159.112 156.624 cv
159.112 154.361 155.446 152.285 149.351 150.65 cv
154.304 148.971 157.325 146.783 157.325 144.382 cv
157.325 141.253 152.21 138.484 144.339 136.74 cv
147.818 135.91 149.951 134.817 149.951 133.615 cv
149.951 131.022 140.115 128.921 127.983 128.921 cv
115.85 128.921 106.015 131.022 106.015 133.615 cv
106.015 134.503 107.191 135.331 109.198 136.039 cv
99.4889 137.643 92.8833 140.679 92.6349 144.18 cv
80.9714 144.889 73.0383 146.28 73.0383 147.882 cv
73.0383 148.871 76.0826 149.778 81.1438 150.496 cv
78.9031 151.072 77.0022 151.709 75.4364 152.39 cv
74.2742 152.18 73.0612 151.987 71.7931 151.818 cv
60.7921 150.355 50.3011 151.121 48.3608 153.529 cv
48.1966 153.732 48.1225 153.942 48.0878 154.155 cv
47.1485 154.14 46.1969 154.129 45.2222 154.129 cv
33.6466 154.129 24.2627 155.247 24.2627 156.627 cv
24.2627 157.495 27.9827 158.259 33.6229 158.707 cv
cp
.682353 .788235 .921569 rgb
f
448.816 229.19 mo
448.816 227.542 439.155 226 422.354 224.679 cv
421.804 221.631 413.602 219.337 403.579 219.508 cv
400.303 219.564 397.231 219.878 394.56 220.38 cv
395.805 218.926 396.375 217.465 396.102 216.099 cv
395.301 212.098 387.546 210.125 377.547 210.927 cv
378.584 207.399 377.907 203.847 375.441 201.76 cv
372.346 199.139 367.442 199.678 363.605 202.753 cv
361.893 201.059 359.825 199.515 357.471 198.151 cv
358.862 195.743 359.642 193.074 359.642 190.262 cv
359.642 183.214 354.779 177.054 347.53 173.704 cv
344.044 160.7 336.499 149.362 326.332 141.126 cv
327.992 139.096 328.633 136.611 327.796 134.39 cv
326.392 130.663 321.379 129.102 316.6 130.903 cv
315.287 131.398 314.135 132.099 313.174 132.928 cv
305.141 129.206 296.199 127.115 286.764 127.115 cv
283.12 127.115 279.555 127.442 276.081 128.037 cv
269.204 122.06 260.134 120.771 254.316 125.47 cv
250.398 128.635 248.834 133.816 249.563 139.299 cv
240.327 146.082 233.014 155.323 228.584 166.062 cv
214.132 166.327 201.696 174.841 195.803 187.104 cv
192.438 184.53 188.594 183.561 185.229 184.873 cv
181.74 186.234 179.521 189.744 178.872 194.136 cv
178.25 194.119 177.624 194.109 176.993 194.109 cv
162.5 194.109 150.123 198.652 145.154 205.061 cv
134.353 198.685 122.869 198.195 119.204 204.091 cv
117.501 206.832 117.785 210.48 119.626 214.288 cv
119.54 214.286 119.456 214.281 119.369 214.279 cv
109.87 214.157 102.129 217.187 102.079 221.047 cv
102.069 221.853 102.412 222.628 103.02 223.356 cv
97.4765 221.139 89.7466 220.313 84.7474 221.538 cv
82.1565 222.172 80.7708 223.248 80.5622 224.5 cv
79.0698 223.486 77.5771 222.661 76.1749 222.117 cv
72.0863 220.532 69.9606 221.766 70.4564 224.869 cv
67.2922 224.316 64.1714 224.185 61.6735 224.599 cv
59.4545 224.966 58.0668 225.712 57.5006 226.675 cv
57.0519 226.456 56.6076 226.254 56.1736 226.086 cv
52.1526 224.527 50.0238 225.69 50.4263 228.681 cv
43.2087 228.53 36.6657 228.54 31.6452 228.744 cv
16.9239 229.344 20.8555 231.388 40.4267 233.31 cv
59.9979 235.231 87.7974 236.303 102.519 235.703 cv
107.711 235.491 110.572 235.099 111.256 234.597 cv
119.467 235.092 128.781 235.546 139.025 235.949 cv
141.278 238.462 144.49 240.609 148.341 241.927 cv
152.143 243.229 155.946 243.507 159.238 242.931 cv
163.023 245.753 168.218 248.135 174.18 249.522 cv
183.356 251.658 191.95 250.885 196.941 247.962 cv
197.92 248.455 198.954 248.895 200.04 249.267 cv
206.618 251.519 213.204 250.727 217.11 247.689 cv
225.748 249.063 235.268 250.071 245.388 250.632 cv
248.062 254.075 255.314 256.804 263.988 257.244 cv
272.407 257.671 279.724 255.819 282.898 252.826 cv
284.178 252.903 285.464 252.955 286.764 252.955 cv
295.904 252.955 304.58 250.99 312.417 247.485 cv
314.119 247.205 315.783 246.908 317.411 246.599 cv
320.312 249.168 325.998 250.391 332.245 249.428 cv
338.072 248.53 342.867 245.968 345.104 242.932 cv
347.429 243.09 349.865 243.166 352.374 243.147 cv
366.579 243.041 378.396 239.959 381.031 235.969 cv
422.454 234.35 448.816 231.914 448.816 229.19 cv
cp
.870588 .956863 1 rgb
f
444.299 227.203 mo
437.28 228.812 428.959 229.107 420.082 229.745 cv
340 235.5 336.434 199.564 332.269 190.389 cv
322.193 196.438 309.772 200.018 296.327 200.018 cv
288.243 200.018 280.534 198.715 273.476 196.37 cv
264.464 206.144 250.922 212.365 235.773 212.365 cv
228.015 212.365 220.682 210.729 214.158 207.825 cv
207.466 216.802 195.865 222.745 182.665 222.745 cv
173.024 222.745 164.235 219.575 157.587 214.369 cv
152.99 216.787 147.625 218.179 141.891 218.179 cv
139.632 218.179 137.433 217.958 135.313 217.549 cv
130.253 222.886 121.995 226.366 112.659 226.366 cv
108.157 226.366 103.908 225.552 100.143 224.117 cv
89.8442 228.551 73.2385 231.435 54.4813 231.435 cv
44.2071 231.435 34.5811 230.567 26.2749 229.057 cv
18.5305 229.907 23.8721 231.625 40.4734 233.255 cv
60.0446 235.176 87.8441 236.248 102.565 235.648 cv
107.758 235.436 110.619 235.044 111.302 234.542 cv
119.514 235.037 128.828 235.491 139.072 235.894 cv
141.325 238.407 144.537 240.554 148.388 241.872 cv
152.19 243.174 155.993 243.452 159.285 242.876 cv
163.07 245.698 168.265 248.08 174.227 249.467 cv
183.403 251.603 191.996 250.83 196.988 247.907 cv
197.967 248.4 199 248.841 200.087 249.212 cv
206.665 251.464 213.25 250.672 217.157 247.634 cv
225.794 249.008 235.315 250.016 245.435 250.577 cv
248.109 254.02 255.361 256.749 264.035 257.189 cv
272.453 257.616 279.771 255.764 282.945 252.771 cv
284.225 252.848 285.511 252.9 286.81 252.9 cv
295.95 252.9 304.626 250.935 312.463 247.43 cv
314.166 247.15 315.829 246.853 317.458 246.544 cv
320.359 249.113 326.044 250.336 332.292 249.373 cv
338.119 248.475 342.914 245.913 345.151 242.877 cv
347.476 243.035 349.911 243.111 352.42 243.092 cv
366.626 242.986 378.442 239.904 381.078 235.914 cv
422.501 234.295 448.863 231.859 448.863 229.135 cv
448.863 228.471 447.27 227.825 444.299 227.203 cv
cp
.788235 .901961 1 rgb
f
226.897 209.973 mo
217.192 205.875 210.147 198.608 207.253 190.804 cv
207.067 200.819 213.717 210.859 224.585 215.448 cv
235.453 220.036 247.287 217.8 254.334 210.683 cv
246.723 214.051 236.601 214.07 226.897 209.973 cv
cp
.682353 .788235 .921569 rgb
f
302.943 213.43 mo
288.422 215.677 274.437 212.891 263.187 206.501 cv
273.039 216.02 288.036 220.983 303.834 218.539 cv
319.845 216.061 332.785 206.585 339.214 194.295 cv
330.4 204.052 317.724 211.142 302.943 213.43 cv
cp
f
343.705 238.119 mo
341.769 244.317 332.956 247.078 324.022 244.287 cv
319.469 242.865 315.772 240.273 313.488 237.255 cv
315.603 238.638 318.023 239.8 320.685 240.631 cv
330.701 243.76 340.571 241.2 344.041 234.949 cv
344.122 236.018 344.029 237.084 343.705 238.119 cv
cp
266.603 252.633 mo
255.176 252.633 245.637 247.034 243.302 239.56 cv
248.641 243.949 257.631 246.831 267.824 246.831 cv
276.061 246.831 283.512 244.948 288.887 241.91 cv
285.468 248.174 276.793 252.633 266.603 252.633 cv
cp
178.482 247.56 mo
171.021 246.762 164.744 243.214 161.246 238.456 cv
165.61 241.528 171.518 243.743 178.173 244.456 cv
186.169 245.311 193.569 243.821 198.786 240.779 cv
194.532 245.65 186.868 248.457 178.482 247.56 cv
cp
422.4 224.624 mo
451.705 229.221 408.866 234.639 399.077 232.478 cv
391.239 230.748 392.358 223.011 394.607 220.325 cv
395.851 218.871 396.422 217.41 396.148 216.044 cv
389.915 228.406 368.029 227.287 372.101 221.382 cv
381.161 209.88 377.954 203.792 375.488 201.705 cv
378.341 206.125 377.043 217.601 356.527 226.167 cv
336.779 234.412 335.724 226.71 338.407 223.927 cv
354.148 207.6 359.421 199.28 359.689 190.207 cv
359.751 188.102 359.246 186.078 358.444 184.182 cv
362.024 199.904 341.116 215.275 322.934 215.275 cv
318.911 215.275 315.046 214.602 311.436 213.379 cv
301.986 224.962 287.603 232.362 271.488 232.362 cv
257.128 232.362 244.146 226.484 234.8 217.009 cv
230.257 230.003 217.898 239.327 203.354 239.327 cv
192.232 239.327 182.39 233.871 176.339 225.495 cv
171.901 229.738 165.833 232.362 159.131 232.362 cv
151.057 232.362 143.914 228.549 139.427 222.685 cv
134.069 227.262 124.983 230.273 114.675 230.273 cv
107.714 230.273 101.314 228.896 96.2389 226.594 cv
91.7879 230.033 74.7155 232.595 54.3183 232.595 cv
41.8755 232.595 30.672 231.64 22.8106 230.116 cv
23.1469 231.005 29.2174 232.15 40.4735 233.255 cv
60.0446 235.176 87.844 236.248 102.565 235.648 cv
107.758 235.436 110.619 235.044 111.302 234.542 cv
119.514 235.037 128.828 235.491 139.072 235.894 cv
141.325 238.407 144.537 240.554 148.388 241.872 cv
152.19 243.174 155.993 243.452 159.285 242.876 cv
163.07 245.698 168.265 248.08 174.227 249.467 cv
183.403 251.603 191.996 250.83 196.988 247.907 cv
197.967 248.4 199 248.84 200.087 249.212 cv
206.665 251.464 213.25 250.672 217.157 247.634 cv
225.794 249.008 235.315 250.016 245.435 250.577 cv
248.109 254.02 255.361 256.749 264.035 257.189 cv
272.453 257.616 279.771 255.764 282.945 252.771 cv
284.225 252.848 285.511 252.9 286.81 252.9 cv
295.95 252.9 304.626 250.935 312.463 247.43 cv
314.166 247.15 315.829 246.853 317.458 246.544 cv
320.359 249.113 326.044 250.336 332.292 249.373 cv
338.119 248.475 342.914 245.913 345.151 242.877 cv
347.476 243.035 349.911 243.111 352.42 243.092 cv
366.626 242.986 378.442 239.904 381.078 235.914 cv
422.501 234.295 448.863 231.86 448.863 229.135 cv
448.863 227.487 439.201 225.945 422.4 224.624 cv
cp
f
422.4 224.624 mo
421.851 221.576 413.649 219.282 403.625 219.453 cv
400.35 219.509 397.278 219.823 394.607 220.325 cv
404.965 219.833 416.613 221.226 422.4 224.624 cv
cp
1 1 1 rgb
f
410.238 222.998 mo
405.482 222.998 401.626 224.355 401.626 226.028 cv
401.626 227.702 405.482 229.058 410.238 229.058 cv
414.994 229.058 418.849 227.702 418.849 226.028 cv
418.849 224.355 414.994 222.998 410.238 222.998 cv
cp
192.556 202.904 mo
190.531 202.904 188.888 203.761 188.888 204.818 cv
188.888 205.875 190.531 206.732 192.556 206.732 cv
194.582 206.732 196.224 205.875 196.224 204.818 cv
196.224 203.761 194.582 202.904 192.556 202.904 cv
cp
160.95 205.852 mo
158.242 205.852 156.047 206.393 156.047 207.059 cv
156.047 207.726 158.242 208.266 160.95 208.266 cv
163.658 208.266 165.853 207.726 165.853 207.059 cv
165.853 206.393 163.658 205.852 160.95 205.852 cv
cp
317.424 182.492 mo
311.259 182.492 306.261 184.205 306.261 186.319 cv
306.261 188.433 311.259 190.147 317.424 190.147 cv
323.589 190.147 328.587 188.433 328.587 186.319 cv
328.587 184.205 323.589 182.492 317.424 182.492 cv
cp
372.002 202.447 mo
371.328 201.425 368.392 202.175 365.445 204.12 cv
362.498 206.066 360.656 208.471 361.33 209.492 cv
362.004 210.513 364.94 209.764 367.887 207.818 cv
370.834 205.873 372.676 203.468 372.002 202.447 cv
cp
357.196 181.784 mo
355.074 178.396 351.718 175.563 347.577 173.649 cv
344.09 160.645 336.546 149.307 326.379 141.071 cv
328.038 139.041 328.68 136.556 327.843 134.335 cv
326.439 130.608 321.426 129.047 316.646 130.848 cv
315.333 131.343 314.182 132.044 313.221 132.873 cv
305.188 129.151 296.246 127.06 286.81 127.06 cv
283.167 127.06 279.601 127.387 276.128 127.982 cv
269.251 122.005 260.181 120.716 254.363 125.415 cv
250.444 128.58 248.881 133.761 249.61 139.244 cv
240.374 146.027 233.061 155.268 228.631 166.007 cv
214.179 166.272 201.743 174.786 195.849 187.049 cv
192.485 184.475 188.64 183.507 185.276 184.818 cv
181.786 186.179 179.567 189.689 178.919 194.081 cv
178.297 194.064 177.671 194.054 177.04 194.054 cv
162.547 194.054 150.17 198.597 145.2 205.006 cv
134.4 198.63 122.915 198.14 119.251 204.036 cv
117.547 206.777 117.832 210.425 119.673 214.233 cv
119.587 214.232 119.503 214.226 119.416 214.225 cv
111.253 214.119 104.403 216.345 102.602 219.422 cv
105.59 217.643 109.139 216.598 112.958 216.598 cv
117.413 216.598 121.502 218.016 124.756 220.373 cv
124.765 213.613 127.181 208.158 131.732 206.207 cv
135.906 204.417 140.981 205.954 145.577 209.813 cv
150.981 205.267 157.782 202.551 165.178 202.551 cv
170.977 202.551 176.409 204.225 181.092 207.135 cv
182.59 199.894 186.278 194.763 190.601 194.763 cv
194.393 194.763 197.699 198.71 199.465 204.566 cv
203.84 186.193 217.135 172.57 233.14 171.393 cv
227.914 176.288 223.965 182.167 221.646 188.512 cv
229.104 177.684 240.739 168.991 255.093 164.784 cv
269.193 160.651 283.423 161.577 295.414 166.436 cv
284.398 158.292 268.88 155.34 253.539 159.836 cv
247.002 161.752 241.177 164.835 236.253 168.72 cv
242.56 152.467 260.2 140.761 280.995 140.761 cv
303.57 140.761 322.428 154.556 327.099 172.989 cv
321.196 169.907 314.462 167.916 307.214 167.391 cv
291.054 166.223 276.322 172.562 267.305 183.101 cv
278.079 175.565 292.02 171.491 306.938 172.57 cv
321.594 173.63 334.601 179.475 344.136 188.221 cv
340.863 183.192 336.432 178.794 331.147 175.342 cv
333.181 174.954 335.312 174.726 337.526 174.726 cv
345.664 174.726 352.845 177.52 357.196 181.784 cv
cp
95.7195 221.369 mo
92.0868 221.668 88.9159 223.571 86.8965 226.362 cv
84.3145 225.92 81.589 225.679 78.7666 225.679 cv
71.5856 225.679 65.0128 227.212 59.9224 229.752 cv
58.2421 227.586 55.7682 225.996 52.891 225.371 cv
53.7848 225.322 54.8874 225.514 56.2203 226.031 cv
56.6543 226.199 57.0986 226.401 57.5473 226.62 cv
58.1135 225.657 59.5012 224.911 61.7202 224.544 cv
64.2182 224.13 67.3389 224.261 70.5032 224.814 cv
70.0074 221.711 72.133 220.477 76.2216 222.062 cv
77.6238 222.606 79.1165 223.431 80.6089 224.445 cv
80.8175 223.193 82.2032 222.118 84.7941 221.483 cv
87.804 220.745 91.8031 220.763 95.7195 221.369 cv
cp
f
266.205 184.714 mo
274.861 182.714 283.499 187.653 286.295 195.89 cv
286.222 195.321 286.121 194.75 285.989 194.179 cv
283.858 184.953 274.65 179.201 265.424 181.332 cv
256.197 183.464 250.446 192.671 252.577 201.898 cv
252.709 202.469 252.869 203.026 253.053 203.569 cv
251.953 194.941 257.549 186.714 266.205 184.714 cv
cp
f
188.756 211.023 mo
186.903 208 183.579 205.977 179.775 205.977 cv
173.954 205.977 169.236 210.696 169.236 216.516 cv
169.236 216.877 169.254 217.232 169.289 217.583 cv
169.824 212.264 174.314 208.111 179.775 208.111 cv
182.538 208.111 185.051 209.177 186.931 210.918 cv
187.537 210.931 188.146 210.975 188.756 211.023 cv
cp
f
138.095 211.744 mo
140.845 211.744 143.106 213.835 143.375 216.514 cv
143.393 216.337 143.402 216.158 143.402 215.977 cv
143.402 213.046 141.026 210.67 138.095 210.67 cv
135.164 210.67 132.788 213.046 132.788 215.977 cv
132.788 216.158 132.798 216.337 132.815 216.514 cv
133.085 213.835 135.346 211.744 138.095 211.744 cv
cp
f
226.556 190.247 mo
230.048 190.247 232.919 192.902 233.261 196.304 cv
233.283 196.079 233.295 195.852 233.295 195.622 cv
233.295 191.9 230.278 188.883 226.556 188.883 cv
222.835 188.883 219.818 191.9 219.818 195.622 cv
219.818 195.852 219.83 196.079 219.852 196.304 cv
220.194 192.902 223.065 190.247 226.556 190.247 cv
cp
f
208.721 208.535 mo
205.714 203.552 199.236 201.949 194.253 204.956 cv
191.875 206.391 190.273 208.615 189.572 211.09 cv
190.197 211.028 190.824 210.963 191.454 210.944 cv
192.318 209.28 193.632 207.823 195.355 206.783 cv
200.03 203.962 206.02 205.198 209.226 209.477 cv
209.075 209.158 208.907 208.844 208.721 208.535 cv
cp
f
286.634 148.539 mo
293.394 148.539 298.952 153.68 299.614 160.265 cv
299.657 159.831 299.68 159.39 299.68 158.944 cv
299.68 151.739 293.839 145.898 286.634 145.898 cv
279.429 145.898 273.588 151.739 273.588 158.944 cv
273.588 159.39 273.611 159.831 273.655 160.265 cv
274.317 153.68 279.875 148.539 286.634 148.539 cv
cp
f
267.839 182.123 mo
268.507 182.186 269.171 182.275 269.828 182.399 cv
267.684 178.13 263.277 175.192 258.173 175.192 cv
250.968 175.192 245.127 181.033 245.127 188.238 cv
245.127 188.684 245.15 189.125 245.194 189.559 cv
245.856 182.974 251.414 177.833 258.173 177.833 cv
262.007 177.833 265.452 179.49 267.839 182.123 cv
cp
f
188.247 212.341 mo
192.342 212.341 196.111 213.012 199.164 214.132 cv
196.698 211.885 192.733 210.42 188.247 210.42 cv
183.761 210.42 179.796 211.885 177.33 214.132 cv
180.383 213.012 184.152 212.341 188.247 212.341 cv
cp
f
188.49 215.832 mo
191.149 215.832 193.595 216.503 195.578 217.623 cv
193.976 215.376 191.402 213.911 188.49 213.911 cv
185.578 213.911 183.004 215.376 181.402 217.623 cv
183.385 216.503 185.831 215.832 188.49 215.832 cv
cp
f
270.902 196.769 mo
268.234 198.851 265.254 200.094 262.387 200.522 cv
265.754 201.523 269.484 200.977 272.406 198.697 cv
275.329 196.416 276.765 192.931 276.612 189.422 cv
275.5 192.098 273.57 194.687 270.902 196.769 cv
cp
.788235 .901961 1 rgb
f
300.224 160.619 mo
304.981 160.619 309.359 161.819 312.907 163.824 cv
310.041 159.803 305.435 157.182 300.224 157.182 cv
295.012 157.182 290.406 159.803 287.54 163.824 cv
291.088 161.82 295.466 160.619 300.224 160.619 cv
cp
1 1 1 rgb
f
299.713 182.521 mo
304.47 182.521 308.849 183.721 312.396 185.726 cv
309.53 181.704 304.924 179.083 299.713 179.083 cv
294.501 179.083 289.895 181.704 287.03 185.726 cv
290.577 183.721 294.955 182.521 299.713 182.521 cv
cp
f
226.298 189.275 mo
231.055 189.275 235.433 190.475 238.981 192.48 cv
236.115 188.459 231.509 185.838 226.298 185.838 cv
221.086 185.838 216.48 188.459 213.614 192.48 cv
217.162 190.475 221.54 189.275 226.298 189.275 cv
cp
f
337.334 190.603 mo
333.925 190.603 330.787 189.742 328.245 188.306 cv
330.299 191.187 333.599 193.066 337.334 193.066 cv
341.068 193.066 344.368 191.187 346.422 188.306 cv
343.88 189.742 340.743 190.603 337.334 190.603 cv
cp
.788235 .901961 1 rgb
f
387.068 212.988 mo
390.477 212.988 393.615 213.848 396.157 215.285 cv
394.103 212.403 390.803 210.525 387.068 210.525 cv
383.334 210.525 380.034 212.403 377.98 215.285 cv
380.522 213.848 383.659 212.988 387.068 212.988 cv
cp
1 1 1 rgb
f
369.53 201.488 mo
372.403 201.488 375.048 202.213 377.19 203.424 cv
375.46 200.995 372.678 199.412 369.53 199.412 cv
366.383 199.412 363.601 200.995 361.87 203.424 cv
364.012 202.213 366.657 201.488 369.53 201.488 cv
cp
f
145.538 209.282 mo
143.436 209.282 141.516 210.054 140.005 211.324 cv
140.28 211.524 140.547 211.734 140.806 211.956 cv
142.256 211.474 143.854 211.203 145.538 211.203 cv
148.197 211.203 150.644 211.874 152.626 212.994 cv
151.025 210.747 148.451 209.282 145.538 209.282 cv
cp
f
120.336 220.105 mo
122.995 220.105 125.441 220.776 127.424 221.896 cv
125.822 219.649 123.248 218.184 120.336 218.184 cv
117.424 218.184 114.85 219.649 113.248 221.896 cv
115.231 220.776 117.678 220.105 120.336 220.105 cv
cp
f
83.1418 226.981 mo
85.1413 226.431 87.1202 226.43 88.8427 226.863 cv
87.1737 225.503 84.935 224.934 82.7447 225.536 cv
80.5544 226.138 78.9213 227.772 78.1814 229.793 cv
79.4407 228.541 81.1423 227.53 83.1418 226.981 cv
cp
f
59.5715 230.053 mo
61.2004 230.053 62.6995 230.464 63.914 231.151 cv
62.9328 229.774 61.3558 228.876 59.5715 228.876 cv
57.7872 228.876 56.2102 229.774 55.229 231.151 cv
56.4435 230.464 57.9426 230.053 59.5715 230.053 cv
cp
f
115.321 223.303 mo
116.95 223.303 118.449 223.714 119.664 224.401 cv
118.683 223.024 117.106 222.126 115.321 222.126 cv
113.537 222.126 111.96 223.024 110.979 224.401 cv
112.194 223.714 113.693 223.303 115.321 223.303 cv
cp
f
151.688 213.366 mo
153.317 213.366 154.816 213.777 156.031 214.463 cv
155.05 213.086 153.473 212.189 151.688 212.189 cv
149.904 212.189 148.327 213.087 147.346 214.463 cv
148.56 213.777 150.06 213.366 151.688 213.366 cv
cp
f
263.013 91.4071 mo
263.43 90.5024 263.663 89.5121 263.663 88.4723 cv
263.663 84.8052 260.802 81.743 256.977 80.9733 cv
256.976 80.9619 256.974 80.9506 256.973 80.9391 cv
253.36 82.5157 248.548 83.4867 243.245 83.4867 cv
232.051 83.4867 222.977 79.1962 222.977 73.9037 cv
222.977 70.4558 226.841 67.4423 232.62 65.7541 cv
232.511 65.7419 232.403 65.7274 232.293 65.7158 cv
235.209 59.9948 236.955 54.2413 237.523 49.1263 cv
232.663 59.5312 222.111 66.744 209.869 66.744 cv
201.7 66.744 194.286 63.5269 188.809 58.2982 cv
185.104 62.9764 179.499 66.0833 173.157 66.4587 cv
170.366 73.7805 163.525 79.0988 155.363 79.6685 cv
154.143 83.3928 146.954 86.4016 137.579 87.2255 cv
137.511 87.5806 137.47 87.9401 137.47 88.3058 cv
137.47 89.0681 137.635 89.806 137.919 90.5171 cv
136.413 90.3284 134.795 90.2201 133.1 90.2201 cv
125.281 90.2201 118.943 92.4112 118.943 95.114 cv
118.943 97.8168 125.281 100.008 133.1 100.008 cv
134.528 100.008 135.905 99.9333 137.205 99.7973 cv
148.494 100.771 166.944 101.406 187.807 101.406 cv
220.274 101.406 246.919 99.8693 249.764 97.9086 cv
277.04 97.8687 298.969 96.3986 298.969 94.5897 cv
298.969 93.0854 283.804 91.8154 263.013 91.4071 cv
cp
.682353 .788235 .921569 rgb
f
263.013 91.4071 mo
263.43 90.5024 263.663 89.5121 263.663 88.4723 cv
263.663 87.5163 263.464 86.6033 263.109 85.7594 cv
258.197 89.8619 251.875 92.3333 244.974 92.3333 cv
235.342 92.3333 226.838 87.5195 221.724 80.1706 cv
219.119 81.5128 216.172 82.2841 213.04 82.2841 cv
208.274 82.2841 203.929 80.5164 200.594 77.6172 cv
198.708 79.3011 196.227 80.3333 193.5 80.3333 cv
189.83 80.3333 186.595 78.4792 184.675 75.6577 cv
180.403 82.279 172.966 86.6666 164.5 86.6666 cv
161.223 86.6666 158.1 86.0076 155.254 84.8182 cv
149.211 91.5714 139.111 96 127.667 96 cv
124.648 96 121.725 95.687 118.943 95.1097 cv
118.943 95.1111 118.943 95.1126 118.943 95.114 cv
118.943 97.8168 125.281 100.008 133.1 100.008 cv
134.528 100.008 135.905 99.9333 137.205 99.7973 cv
148.494 100.771 166.944 101.406 187.807 101.406 cv
220.274 101.406 246.919 99.8693 249.764 97.9086 cv
277.04 97.8687 298.969 96.3986 298.969 94.5897 cv
298.969 93.0854 283.804 91.8154 263.013 91.4071 cv
cp
.623529 .717647 .839216 rgb
f
155.697 63.2949 mo
158.266 60.4933 162.462 60.0477 167.05 61.5739 cv
166.667 48.7574 173.091 37.1243 183.645 33.3961 cv
193.563 29.8922 204.282 34.3763 211 43.75 cv
217.318 37.0963 223.485 36.4386 229.058 37.1342 cv
235.506 37.939 237.675 43.7861 237.675 43.7861 cv
237.334 38.6111 235.463 34.5828 232.04 32.6914 cv
226.794 29.7925 219.237 32.6535 212.348 39.3071 cv
205.022 29.9335 193.333 25.4493 182.517 28.9532 cv
171.009 32.6815 164.003 44.3146 164.421 57.131 cv
159.418 55.6049 154.843 56.0505 152.041 58.8521 cv
148.338 62.5551 148.736 69.347 152.403 76.1445 cv
151.873 70.926 153.251 65.9626 155.697 63.2949 cv
cp
.870588 .956863 1 rgb
f
395.19 310.954 mo
395.19 307.686 390.896 304.706 383.841 302.445 cv
383.374 297.926 380.34 294.098 376.084 292.158 cv
375.981 288.389 373.013 285.364 369.358 285.364 cv
369.051 285.364 368.75 285.393 368.454 285.434 cv
363.325 279.417 357.066 276.426 351.69 278.214 cv
347.527 279.598 344.671 283.608 343.352 289.003 cv
335.824 288.378 329.57 290.697 327.698 295.482 cv
327.141 296.904 327.039 298.431 327.292 299.994 cv
314.309 302.234 305.627 306.304 305.627 310.954 cv
305.627 316.876 319.712 321.856 338.831 323.314 cv
340.476 326.551 343.941 328.788 347.964 328.788 cv
350.625 328.788 353.04 327.803 354.851 326.205 cv
359.453 330.495 364.649 332.417 369.209 330.901 cv
373.089 329.611 375.837 326.041 377.261 321.193 cv
388.147 318.859 395.19 315.142 395.19 310.954 cv
cp
.788235 .901961 1 rgb
f
329.375 302 mo
331.708 294.631 337.097 291.499 344.625 292.125 cv
348.148 284.872 361.75 283.5 364.75 292.375 cv
367.75 288.375 374.396 292.73 374.5 296.5 cv
379.125 297 381.908 299.857 382.375 304.375 cv
382.375 304.375 391.875 304.625 395.19 310.954 cv
395.19 307.686 390.896 304.706 383.841 302.445 cv
383.374 297.926 380.34 294.098 376.084 292.158 cv
375.981 288.389 373.013 285.364 369.358 285.364 cv
369.051 285.364 368.75 285.393 368.454 285.434 cv
363.325 279.417 357.066 276.426 351.69 278.214 cv
347.527 279.598 344.671 283.608 343.352 289.003 cv
335.824 288.378 329.57 290.696 327.698 295.482 cv
327.141 296.904 327.039 298.431 327.292 299.994 cv
316.205 301.907 308.255 305.154 306.169 308.957 cv
305.812 309.607 312 302.125 329.375 302 cv
cp
.870588 .956863 1 rgb
f
376.711 303.304 mo
371.25 312.125 358.125 307.125 361.875 297.25 cv
353.5 306.375 348.125 299.25 345.375 293.875 cv
348.625 308.375 334.375 311.5 327.193 304.016 cv
323.472 308.868 317.103 312.072 309.865 312.072 cv
308.443 312.072 307.055 311.947 305.713 311.712 cv
306.857 317.297 320.534 321.919 338.831 323.314 cv
340.476 326.551 343.941 328.788 347.964 328.788 cv
350.625 328.788 353.04 327.803 354.851 326.205 cv
359.453 330.495 364.649 332.417 369.209 330.901 cv
373.089 329.611 375.837 326.041 377.261 321.193 cv
385.831 319.356 392.001 316.659 394.246 313.552 cv
393.709 313.602 378.247 317.756 376.711 303.304 cv
cp
.682353 .788235 .921569 rgb
f
363 311.875 mo
351.875 328.75 334.875 318.75 333.375 313.5 cv
329.092 318.863 309.125 318.375 305.889 312.319 cv
307.862 317.63 321.201 321.97 338.831 323.314 cv
340.476 326.551 343.941 328.788 347.964 328.788 cv
350.625 328.788 353.04 327.803 354.851 326.205 cv
359.453 330.495 364.649 332.417 369.209 330.901 cv
373.089 329.611 375.837 326.041 377.261 321.193 cv
385.31 319.467 391.249 316.984 393.802 314.114 cv
387.5 319 368.439 319.677 363 311.875 cv
cp
.623529 .717647 .839216 rgb
f
464.436 48.6633 mo
468.16 44.7312 470.447 39.4367 470.447 33.6078 cv
470.447 29.8844 469.512 26.3792 467.869 23.3065 cv
469.122 21.6323 469.875 19.7031 469.875 17.7748 cv
469.875 13.3919 466.014 10.6261 461.123 11.3489 cv
461.251 10.6133 461.231 9.92593 461.003 9.37862 cv
460.321 7.74165 458.168 7.93118 456.194 9.80199 cv
455.383 10.5711 454.74 11.505 454.298 12.4515 cv
452.409 11.9283 450.421 11.6426 448.364 11.6426 cv
442.163 11.6426 436.563 14.1878 432.552 18.2809 cv
430.867 17.4194 429.043 17.0577 427.61 17.4266 cv
425.356 18.0063 424.838 20.189 426.244 22.5146 cv
419.39 22.5899 413.778 27.55 413.121 33.8923 cv
408.024 32.788 403.434 32.6871 400.952 33.8668 cv
397.969 35.2851 398.835 38.1658 402.588 41.183 cv
389.018 41.4762 378.807 42.7477 378.807 44.272 cv
378.807 45.3514 383.931 46.3037 391.739 46.8719 cv
391.856 47.1121 392.167 47.3613 392.699 47.6172 cv
395.452 48.9402 403.235 50.0909 412.399 50.6806 cv
412.517 51.1023 412.842 51.511 413.362 51.8999 cv
411.619 53.0234 410.664 54.1853 410.91 55.129 cv
411.411 57.0485 416.675 57.3371 422.667 55.7737 cv
423.485 55.5604 424.271 55.3219 425.023 55.0671 cv
428.044 55.413 431.442 55.6081 435.038 55.6081 cv
438.274 55.6081 441.349 55.4497 444.135 55.1661 cv
445.504 55.4303 446.917 55.573 448.364 55.573 cv
450.57 55.573 452.699 55.247 454.709 54.6481 cv
455.2 54.8875 455.768 55.0804 456.41 55.2097 cv
459.67 55.8668 463.53 54.6839 465.03 52.5676 cv
466.033 51.1527 465.723 49.6813 464.436 48.6633 cv
cp
.788235 .901961 1 rgb
f
464.436 48.6633 mo
465.215 47.8401 465.916 46.9449 466.562 46.0099 cv
460.498 44.4671 455.305 40.7686 451.81 35.792 cv
448.718 37.9193 444.977 39.1703 440.941 39.1703 cv
439.267 39.1703 437.652 38.9341 436.105 38.5319 cv
431.553 41.4437 425.582 43.2135 419.039 43.2135 cv
414.899 43.2135 410.989 42.5023 407.521 41.2451 cv
402.232 43.4364 395.055 44.7859 387.142 44.7859 cv
384.247 44.7859 381.452 44.6026 378.809 44.2664 cv
378.809 44.2683 378.807 44.2701 378.807 44.2719 cv
378.807 45.3513 383.931 46.3037 391.739 46.8719 cv
391.856 47.1121 392.167 47.3613 392.699 47.6172 cv
395.452 48.9402 403.235 50.0909 412.399 50.6806 cv
412.517 51.1023 412.842 51.511 413.362 51.8999 cv
411.619 53.0233 410.664 54.1853 410.91 55.1289 cv
411.411 57.0484 416.675 57.3371 422.667 55.7737 cv
423.485 55.5603 424.271 55.3219 425.023 55.067 cv
428.044 55.413 431.442 55.6081 435.038 55.6081 cv
438.274 55.6081 441.349 55.4497 444.135 55.166 cv
445.504 55.4303 446.917 55.573 448.364 55.573 cv
450.57 55.573 452.699 55.247 454.709 54.648 cv
455.2 54.8875 455.768 55.0803 456.41 55.2097 cv
459.67 55.8668 463.53 54.6839 465.03 52.5676 cv
466.033 51.1527 465.723 49.6812 464.436 48.6633 cv
cp
.682353 .788235 .921569 rgb
f
461.46 53.2552 mo
455.448 53.2552 450.316 49.8575 448.223 45.058 cv
445.772 48.1155 441.282 50.1712 436.134 50.1712 cv
434.384 50.1712 432.715 49.9235 431.17 49.4907 cv
429.199 51.1391 426.662 52.1337 423.892 52.1337 cv
419.569 52.1337 415.812 49.7175 413.894 46.1627 cv
409.809 47.6284 404.878 48.489 399.561 48.489 cv
397.749 48.489 395.982 48.3879 394.277 48.1987 cv
397.829 49.2719 404.609 50.1793 412.399 50.6806 cv
412.517 51.1023 412.842 51.511 413.362 51.8999 cv
411.619 53.0233 410.664 54.1853 410.91 55.1289 cv
411.411 57.0484 416.675 57.3371 422.667 55.7737 cv
423.485 55.5603 424.271 55.3219 425.023 55.067 cv
428.044 55.413 431.442 55.6081 435.038 55.6081 cv
438.274 55.6081 441.349 55.4497 444.135 55.166 cv
445.504 55.4303 446.917 55.573 448.364 55.573 cv
450.57 55.573 452.699 55.247 454.709 54.648 cv
455.2 54.8875 455.768 55.0803 456.41 55.2097 cv
459.491 55.8307 463.082 54.7969 464.737 52.8964 cv
463.683 53.1228 462.59 53.2552 461.46 53.2552 cv
cp
.623529 .717647 .839216 rgb
f
470.447 33.6078 mo
470.447 29.8844 469.512 26.3792 467.869 23.3065 cv
469.122 21.6324 469.875 19.7031 469.875 17.7747 cv
469.875 13.3919 466.014 10.6261 461.123 11.3489 cv
461.251 10.6133 461.231 9.92593 461.003 9.37863 cv
460.321 7.7416 458.168 7.93118 456.194 9.80197 cv
455.383 10.5711 454.74 11.505 454.298 12.4514 cv
452.409 11.9283 450.421 11.6426 448.364 11.6426 cv
442.163 11.6426 436.563 14.1878 432.552 18.2808 cv
430.867 17.4193 429.043 17.0577 427.61 17.4266 cv
425.356 18.0063 424.838 20.1891 426.244 22.5146 cv
419.39 22.5899 413.778 27.55 413.121 33.8923 cv
408.024 32.788 403.434 32.6872 400.952 33.8668 cv
403.051 34.2518 409.418 33.2565 414.361 37.1569 cv
415.989 29.1513 425.297 22.5613 437.861 28.1569 cv
439.111 11.1569 467.486 17.7819 470.447 33.6078 cv
cp
.870588 .956863 1 rgb
f
420.788 79.541 mo
421.483 77.8155 421.882 75.9568 421.882 74.0082 cv
421.882 67.3595 417.456 61.6695 411.176 59.29 cv
412.351 49.7795 409.1 41.4104 402.47 38.8638 cv
395.66 36.2487 387.383 40.5735 381.884 48.8478 cv
367.748 43.7819 354.732 44.9849 350.711 52.529 cv
349.041 55.6635 349.177 59.4835 350.732 63.5113 cv
350.467 63.5002 350.207 63.4744 349.939 63.4744 cv
341.228 63.4744 334.045 69.4306 332.869 77.1631 cv
315.432 79.7091 303.994 83.9705 303.994 88.8003 cv
303.994 96.5984 333.796 102.92 370.558 102.92 cv
407.32 102.92 437.122 96.5984 437.122 88.8003 cv
437.122 85.2566 430.954 82.0203 420.788 79.541 cv
cp
f
366.129 100.32 mo
358.109 101.852 350.672 98.9921 348.292 93.8194 cv
351.892 97.173 358.494 98.7113 365.564 97.3613 cv
372.634 96.0113 378.204 92.1487 380.316 87.7045 cv
380.009 93.3901 374.149 98.7887 366.129 100.32 cv
cp
423.675 93.955 mo
408.357 93.955 394.872 87.8868 386.791 78.6589 cv
388.277 78.8766 389.812 79.0009 391.391 79.0009 cv
401.281 79.0009 409.656 74.5053 412.607 68.2801 cv
408.308 72.6679 400.739 75.5912 392.093 75.5912 cv
381.453 75.5912 372.434 71.1702 369.159 65.0277 cv
370.054 70.9186 375.62 75.8337 383.218 77.9226 cv
378.122 84.3602 369.965 88.5762 360.697 88.5762 cv
355.801 88.5762 351.202 87.4046 347.197 85.3562 cv
340.237 90.6313 330.302 93.955 319.234 93.955 cv
314.585 93.955 310.151 93.3433 306.032 92.2764 cv
313.334 98.3933 339.451 102.92 370.558 102.92 cv
400.541 102.92 425.887 98.7143 434.218 92.9328 cv
430.831 93.5766 427.313 93.955 423.675 93.955 cv
cp
.682353 .788235 .921569 rgb
f
433.117 83.9793 mo
430.298 82.3368 426.094 80.8351 420.788 79.541 cv
421.483 77.8155 421.882 75.9568 421.882 74.0082 cv
421.882 67.3595 417.456 61.6695 411.176 59.29 cv
412.351 49.7795 409.1 41.4104 402.47 38.8638 cv
395.66 36.2487 387.383 40.5735 381.884 48.8478 cv
367.748 43.7819 354.732 44.9849 350.711 52.529 cv
349.041 55.6635 349.177 59.4835 350.732 63.5113 cv
350.467 63.5002 350.207 63.4744 349.939 63.4744 cv
341.228 63.4744 334.045 69.4306 332.869 77.1631 cv
323.423 78.5423 315.761 80.4278 310.7 82.6314 cv
314.31 81.4732 318.377 80.806 322.697 80.806 cv
329.703 80.806 336.058 82.5355 340.818 85.3421 cv
344.192 80.7064 349.978 76.859 357.214 74.3845 cv
353.27 66.9705 352.961 59.5678 357.042 56.1 cv
361.279 52.4994 368.941 54.2445 375.825 59.8126 cv
378.87 58.8784 382.144 58.3424 385.575 58.3424 cv
392.731 58.3424 399.247 60.5784 404.237 64.2385 cv
411.925 62.7523 418.752 64.8602 419.94 69.3152 cv
420.841 72.6914 418.256 76.5106 413.731 79.2694 cv
413.857 80.1542 413.94 81.0501 413.946 81.9621 cv
415.233 81.8747 416.533 81.8089 417.866 81.8089 cv
423.453 81.8089 428.659 82.6107 433.117 83.9793 cv
cp
1 1 1 rgb
f
395.202 64.56 mo
391.491 64.56 388.483 65.5028 388.483 66.6659 cv
388.483 67.8291 391.491 68.7719 395.202 68.7719 cv
398.913 68.7719 401.921 67.8291 401.921 66.6659 cv
401.921 65.5028 398.913 64.56 395.202 64.56 cv
cp
f
323.599 82.8117 mo
320.553 82.8117 318.083 83.5301 318.083 84.4163 cv
318.083 85.3025 320.553 86.0208 323.599 86.0208 cv
326.645 86.0208 329.115 85.3025 329.115 84.4163 cv
329.115 83.5301 326.645 82.8117 323.599 82.8117 cv
cp
f
419.571 84.4163 mo
417.356 84.4163 415.56 85.2694 415.56 86.3217 cv
415.56 87.374 417.356 88.2271 419.571 88.2271 cv
421.787 88.2271 423.583 87.374 423.583 86.3217 cv
423.583 85.2694 421.787 84.4163 419.571 84.4163 cv
cp
f
69.6001 171.388 mo
69.6001 170.561 63.4732 169.853 54.7646 169.554 cv
55.2616 169.212 55.5341 168.843 55.5341 168.459 cv
55.5341 167.705 54.4902 167.011 52.7439 166.46 cv
52.8275 166.225 52.8587 165.989 52.817 165.758 cv
52.5928 164.513 50.5169 163.815 47.9572 164.021 cv
48.4109 162.427 48.28 161.09 47.4847 160.591 cv
46.854 160.194 45.9301 160.403 44.9563 161.054 cv
44.9055 160.864 44.8577 160.675 44.7926 160.487 cv
43.2647 156.073 38.3269 153.776 33.7636 155.356 cv
31.2222 156.235 29.336 158.133 28.4247 160.404 cv
27.5579 159.898 26.659 159.732 25.8461 160.014 cv
23.7487 160.74 23.0219 164.14 24.2227 167.609 cv
24.2729 167.754 24.3292 167.894 24.3844 168.034 cv
21.9167 167.028 19.6264 167.077 19.0417 168.236 cv
18.6322 169.048 19.1568 170.21 20.2894 171.309 cv
15.3674 171.504 11.7905 172.092 11.7905 172.787 cv
11.7905 173.64 17.1883 174.332 23.847 174.332 cv
25.1183 174.332 26.3431 174.307 27.4937 174.26 cv
29.8851 175.517 33.8824 176.342 38.4124 176.342 cv
42.2034 176.342 45.62 175.764 48.0363 174.839 cv
48.6142 174.969 49.2358 175.061 49.8894 175.1 cv
52.7225 175.27 55.1187 174.435 55.5903 173.191 cv
63.857 172.877 69.6001 172.188 69.6001 171.388 cv
cp
.623529 .717647 .839216 rgb
f
223.636 147.774 mo
222.72 147.39 219.7 147.041 215.77 146.812 cv
216.342 146.29 216.576 145.61 216.39 144.789 cv
216.128 143.635 215.077 142.375 213.507 141.175 cv
218.197 139.789 221.075 137.924 221.075 135.872 cv
221.075 131.876 210.185 128.589 196.2 128.171 cv
196.195 128.027 196.18 127.883 196.157 127.738 cv
195.77 125.386 193.075 123.872 190.136 124.355 cv
189.72 124.424 189.323 124.532 188.946 124.669 cv
188.879 124.396 188.794 124.129 188.668 123.875 cv
187.146 120.81 181.77 120.383 176.662 122.92 cv
175.938 123.279 175.265 123.682 174.637 124.112 cv
172.516 120.85 169.581 118.83 166.336 118.83 cv
162.463 118.83 159.031 121.709 156.9 126.143 cv
154.418 126.592 152.583 128.338 152.367 130.298 cv
148.318 130.82 144.93 133.246 143.294 136.569 cv
135.129 134.982 128.209 136.033 127.505 139.09 cv
127.26 140.157 127.806 141.334 128.956 142.506 cv
115.741 143.303 106.088 145.81 106.088 148.782 cv
106.088 149.672 106.957 150.52 108.524 151.293 cv
106.108 151.302 103.787 151.348 101.619 151.426 cv
100.407 150.361 98.1923 149.335 95.5522 148.727 cv
91.3074 147.75 87.5746 148.226 87.2147 149.79 cv
87.0223 150.626 87.8397 151.603 89.285 152.482 cv
87.531 152.803 86.5345 153.171 86.5345 153.562 cv
86.5345 154.817 96.777 155.833 109.412 155.833 cv
115.892 155.833 121.738 155.565 125.901 155.136 cv
127.178 156.704 130.224 157.808 133.783 157.808 cv
137.23 157.808 140.192 156.77 141.535 155.28 cv
146.401 155.168 150.932 154.83 154.882 154.319 cv
155.621 156.281 158.067 157.473 160.717 157.037 cv
162.534 156.738 164.016 155.745 164.793 154.475 cv
165.298 154.577 165.813 154.635 166.336 154.635 cv
169.322 154.635 172.045 152.922 174.113 150.108 cv
177.846 152.026 182.14 153.737 186.614 154.991 cv
199.155 158.507 208.335 157.113 207.118 151.878 cv
206.888 150.889 206.303 149.835 205.423 148.75 cv
207.569 148.841 209.888 148.896 212.228 148.904 cv
220.086 148.933 225.193 148.427 223.636 147.774 cv
cp
.870588 .956863 1 rgb
f
251.762 295.141 mo
251.762 294.641 246.723 294.219 239.815 294.084 cv
239.953 293.783 240.03 293.454 240.03 293.109 cv
240.03 291.89 239.08 290.872 237.809 290.617 cv
237.618 288.099 234.158 286.025 229.607 285.547 cv
232.033 280.788 232.028 275.958 229.523 274.574 cv
227.78 273.61 225.269 274.561 222.979 276.772 cv
220.545 273.657 216.661 272.167 213.067 273.331 cv
209.243 274.57 206.915 278.436 207.054 282.694 cv
205.392 282.187 203.872 282.335 202.941 283.266 cv
201.556 284.651 201.893 287.334 203.566 289.858 cv
203.547 289.858 203.528 289.856 203.508 289.856 cv
200.521 289.856 198.099 291.288 198.099 293.053 cv
198.099 293.306 198.154 293.552 198.248 293.788 cv
197.748 293.725 197.21 293.689 196.647 293.689 cv
194.049 293.689 191.943 294.417 191.943 295.315 cv
191.943 296.214 194.049 296.942 196.647 296.942 cv
197.121 296.942 197.579 296.917 198.011 296.872 cv
201.762 297.195 207.893 297.406 214.825 297.406 cv
225.613 297.406 234.467 296.896 235.412 296.244 cv
244.475 296.231 251.762 295.742 251.762 295.141 cv
cp
f
520.564 190.098 mo
520.564 189.802 519.147 189.518 516.545 189.253 cv
517.611 188.554 518.21 187.743 518.089 186.97 cv
517.947 186.064 516.851 185.408 515.251 185.115 cv
515.508 184.001 515.651 182.844 515.651 181.653 cv
515.651 173.178 508.781 166.308 500.306 166.308 cv
493.543 166.308 487.807 170.684 485.763 176.757 cv
483.13 176.454 481.102 176.949 480.374 178.317 cv
479.804 179.391 480.13 180.829 481.126 182.37 cv
476.71 182.916 473.793 184.091 473.675 185.654 cv
473.623 186.344 474.134 187.279 475.075 187.946 cv
472.33 186.717 471.165 186.823 469.657 187.64 cv
469.699 187.537 469.727 187.434 469.728 187.33 cv
469.735 185.889 465.765 184.587 459.582 183.728 cv
460.171 182.994 460.46 182.2 460.361 181.407 cv
460.16 179.791 458.396 178.57 455.902 178.05 cv
456.992 176.617 457.424 175.275 457.024 174.157 cv
456.13 171.657 451.33 170.917 444.973 171.901 cv
445.648 168.536 445.17 165.814 443.461 164.909 cv
442.262 164.275 440.662 164.648 438.985 165.77 cv
437.398 155.584 428.589 147.79 417.958 147.79 cv
407.038 147.79 398.044 156.016 396.822 166.609 cv
396.655 166.64 396.491 166.682 396.334 166.745 cv
394.736 167.388 393.957 169.566 394.031 172.449 cv
391.578 172.373 389.617 173.06 388.663 174.57 cv
387.716 176.069 387.921 178.114 389.021 180.278 cv
382.648 181.812 378.226 184.488 378.545 186.927 cv
378.654 187.763 379.31 188.482 380.386 189.061 cv
376.431 189.378 374.231 189.729 374.231 190.098 cv
374.231 191.523 406.989 192.678 447.398 192.678 cv
466.346 192.678 483.611 192.424 496.606 192.007 cv
497.738 192.001 498.825 191.963 499.856 191.896 cv
512.67 191.431 520.564 190.797 520.564 190.098 cv
cp
.682353 .788235 .921569 rgb
f
93.0621 53.4171 mo
93.0621 53.2725 92.3695 53.1336 91.0983 53.0043 cv
91.6192 52.6627 91.9117 52.2664 91.8526 51.8888 cv
91.7832 51.4461 91.2475 51.1256 90.4662 50.9824 cv
90.5918 50.4384 90.6614 49.873 90.6614 49.2909 cv
90.6614 45.1501 87.3046 41.7933 83.1638 41.7933 cv
79.8597 41.7933 77.0569 43.9315 76.0583 46.8989 cv
74.7716 46.7506 73.7809 46.9927 73.4255 47.6612 cv
73.1468 48.1856 73.3062 48.8882 73.7927 49.6412 cv
71.6351 49.9082 70.21 50.4824 70.1521 51.2461 cv
70.1266 51.5832 70.3765 52.0398 70.8362 52.366 cv
69.4949 51.7653 68.9257 51.8169 68.1891 52.2161 cv
68.2094 52.1661 68.2235 52.1157 68.2237 52.0647 cv
68.2272 51.3607 66.2875 50.7244 63.2664 50.3047 cv
63.5544 49.946 63.6953 49.5584 63.647 49.171 cv
63.5487 48.3811 62.6871 47.7845 61.4686 47.5307 cv
62.0011 46.8303 62.2119 46.1748 62.0166 45.6285 cv
61.58 44.4069 59.2344 44.0454 56.1285 44.5263 cv
56.4584 42.8823 56.2247 41.552 55.3897 41.1102 cv
54.8038 40.8002 54.0223 40.9824 53.2029 41.5307 cv
52.4274 36.5541 48.1234 32.7456 42.9293 32.7456 cv
37.5937 32.7456 33.1991 36.765 32.6021 41.9406 cv
32.5208 41.9559 32.4408 41.9763 32.3637 42.0072 cv
31.5829 42.321 31.2023 43.3853 31.2388 44.7938 cv
30.0401 44.7569 29.0819 45.0923 28.6158 45.8304 cv
28.1533 46.5628 28.2533 47.5618 28.7907 48.6191 cv
25.677 49.3687 23.5166 50.6764 23.6722 51.868 cv
23.7256 52.2763 24.0458 52.6277 24.5717 52.9105 cv
22.6394 53.0656 21.5646 53.2369 21.5646 53.4171 cv
21.5646 54.1132 37.5699 54.6776 57.3133 54.6776 cv
66.5711 54.6776 75.007 54.5535 81.3562 54.3499 cv
81.9092 54.3471 82.4404 54.3286 82.9441 54.2956 cv
89.2048 54.0686 93.0621 53.7588 93.0621 53.4171 cv
cp
.870588 .956863 1 rgb
f
509.476 209.363 mo
512.115 206.577 513.735 202.826 513.735 198.696 cv
513.735 196.058 513.073 193.574 511.908 191.397 cv
512.796 190.211 513.33 188.844 513.33 187.478 cv
513.33 184.373 510.594 182.413 507.129 182.925 cv
507.22 182.404 507.206 181.917 507.044 181.529 cv
506.56 180.369 505.035 180.504 503.637 181.829 cv
503.062 182.374 502.607 183.036 502.293 183.706 cv
500.955 183.336 499.546 183.133 498.089 183.133 cv
493.696 183.133 489.728 184.937 486.886 187.837 cv
485.692 187.226 484.4 186.97 483.384 187.231 cv
481.788 187.642 481.421 189.189 482.416 190.836 cv
477.56 190.89 473.585 194.404 473.119 198.897 cv
469.507 198.115 466.255 198.044 464.497 198.879 cv
462.384 199.884 462.997 201.925 465.656 204.063 cv
456.042 204.271 448.807 205.172 448.807 206.252 cv
448.807 207.016 452.437 207.691 457.969 208.094 cv
458.052 208.264 458.273 208.44 458.65 208.622 cv
460.6 209.559 466.115 210.374 472.608 210.792 cv
472.691 211.091 472.921 211.38 473.289 211.656 cv
472.055 212.452 471.378 213.275 471.552 213.944 cv
471.907 215.304 475.637 215.508 479.883 214.401 cv
480.462 214.249 481.019 214.08 481.551 213.9 cv
483.692 214.145 486.1 214.283 488.648 214.283 cv
490.94 214.283 493.119 214.171 495.092 213.97 cv
496.063 214.157 497.064 214.258 498.089 214.258 cv
499.652 214.258 501.16 214.027 502.585 213.603 cv
502.933 213.773 503.335 213.909 503.789 214.001 cv
506.099 214.467 508.834 213.628 509.897 212.129 cv
510.608 211.127 510.388 210.084 509.476 209.363 cv
cp
f
106.429 50.4745 mo
106.429 49.9747 101.39 49.5527 94.4813 49.417 cv
94.6197 49.1164 94.697 48.7873 94.697 48.4418 cv
94.697 47.2233 93.7464 46.2058 92.4754 45.9501 cv
92.2846 43.4322 88.8248 41.3587 84.2735 40.8803 cv
86.6992 36.1217 86.6947 31.2914 84.1894 29.9069 cv
82.4464 28.9437 79.9352 29.8943 77.646 32.1052 cv
75.2119 28.9905 71.3279 27.5005 67.7339 28.6648 cv
63.9098 29.9036 61.5821 33.7691 61.7209 38.0277 cv
60.0584 37.5206 58.5382 37.6687 57.6073 38.5996 cv
56.2229 39.9839 56.56 42.6676 58.2326 45.1912 cv
58.2132 45.1911 58.1945 45.1895 58.175 45.1895 cv
55.1874 45.1895 52.7654 46.6209 52.7654 48.3865 cv
52.7654 48.6398 52.8205 48.885 52.9147 49.1213 cv
52.4142 49.0586 51.8766 49.0226 51.3134 49.0226 cv
48.7154 49.0226 46.6092 49.7507 46.6092 50.6488 cv
46.6092 51.5469 48.7154 52.2749 51.3134 52.2749 cv
51.788 52.2749 52.2456 52.2501 52.6775 52.2049 cv
56.4286 52.5285 62.5593 52.7395 69.4916 52.7395 cv
80.2798 52.7395 89.1335 52.2288 90.0789 51.5774 cv
99.142 51.5641 106.429 51.0756 106.429 50.4745 cv
cp
.682353 .788235 .921569 rgb
f
343.336 234.091 mo
347.285 231.408 349.474 227.976 348.726 224.861 cv
347.604 220.191 340.281 217.882 331.915 219.339 cv
329.958 214.679 325.351 211.405 319.979 211.405 cv
318.989 211.405 318.026 211.52 317.1 211.731 cv
314.114 207.809 309.398 205.276 304.088 205.276 cv
295.061 205.276 287.743 212.594 287.743 221.621 cv
287.743 223.212 287.975 224.749 288.399 226.203 cv
281.265 224.706 275.543 225.161 274.836 227.526 cv
274.279 229.39 276.977 231.974 281.468 234.289 cv
268.973 234.83 260.955 235.666 260.955 236.604 cv
260.955 237.953 277.538 239.091 300.181 239.443 cv
300.707 239.466 301.213 239.473 301.695 239.465 cv
305.947 239.524 310.399 239.555 314.985 239.555 cv
344.825 239.555 369.015 238.234 369.015 236.604 cv
369.015 235.542 358.745 234.611 343.336 234.091 cv
cp
.870588 .956863 1 rgb
f
303.093 224.683 mo
300.883 224.683 299.093 225.215 299.093 225.871 cv
299.093 226.527 300.883 227.058 303.093 227.058 cv
305.302 227.058 307.093 226.527 307.093 225.871 cv
307.093 225.215 305.302 224.683 303.093 224.683 cv
cp
328.093 232.683 mo
324.572 232.683 321.718 233.187 321.718 233.808 cv
321.718 234.429 324.572 234.933 328.093 234.933 cv
331.613 234.933 334.468 234.429 334.468 233.808 cv
334.468 233.187 331.613 232.683 328.093 232.683 cv
cp
369.015 236.604 mo
369.015 236.604 366.209 234.517 334.906 236.055 cv
350.022 232.577 338.585 218.33 323 229.5 cv
331.963 220.336 320.391 215.253 314.974 218.798 cv
302.8 214.25 291.964 223.413 294.64 231.908 cv
293.102 229.768 275.51 222.209 281.468 234.289 cv
276.977 231.974 274.279 229.39 274.836 227.526 cv
275.543 225.161 281.265 224.706 288.399 226.203 cv
287.975 224.749 287.743 223.212 287.743 221.621 cv
287.743 212.594 295.061 205.276 304.088 205.276 cv
309.398 205.276 314.114 207.809 317.1 211.731 cv
318.026 211.52 318.989 211.405 319.979 211.405 cv
325.351 211.405 329.958 214.679 331.915 219.339 cv
340.281 217.882 347.604 220.191 348.726 224.861 cv
349.474 227.976 347.285 231.408 343.336 234.091 cv
358.745 234.611 369.015 235.542 369.015 236.604 cv
cp
1 1 1 rgb
f
160.953 180.364 mo
163.642 178.538 165.132 176.201 164.623 174.08 cv
163.859 170.901 158.873 169.329 153.178 170.321 cv
151.845 167.148 148.709 164.92 145.052 164.92 cv
144.378 164.92 143.722 164.998 143.091 165.141 cv
141.059 162.471 137.848 160.747 134.233 160.747 cv
128.087 160.747 123.105 165.729 123.105 171.874 cv
123.105 172.958 123.263 174.004 123.552 174.994 cv
118.695 173.975 114.799 174.285 114.318 175.895 cv
113.938 177.164 115.776 178.923 118.833 180.499 cv
110.326 180.867 104.868 181.436 104.868 182.075 cv
104.868 182.994 116.158 183.769 131.573 184.008 cv
131.931 184.023 132.276 184.029 132.604 184.023 cv
135.499 184.063 138.53 184.084 141.652 184.084 cv
161.967 184.084 178.436 183.185 178.436 182.075 cv
178.436 181.352 171.444 180.718 160.953 180.364 cv
cp
.870588 .956863 1 rgb
f
133.555 173.959 mo
132.051 173.959 130.832 174.321 130.832 174.768 cv
130.832 175.214 132.051 175.576 133.555 175.576 cv
135.059 175.576 136.278 175.214 136.278 174.768 cv
136.278 174.321 135.059 173.959 133.555 173.959 cv
cp
150.575 179.406 mo
148.178 179.406 146.235 179.749 146.235 180.172 cv
146.235 180.595 148.178 180.938 150.575 180.938 cv
152.972 180.938 154.916 180.595 154.916 180.172 cv
154.916 179.749 152.972 179.406 150.575 179.406 cv
cp
178.436 182.075 mo
178.436 182.075 176.525 180.654 155.214 181.701 cv
165.505 179.333 157.719 169.634 147.108 177.239 cv
153.21 171 145.332 167.539 141.644 169.953 cv
133.356 166.856 125.979 173.095 127.801 178.878 cv
126.753 177.421 114.777 172.275 118.833 180.499 cv
115.776 178.923 113.938 177.164 114.318 175.895 cv
114.799 174.285 118.695 173.975 123.552 174.994 cv
123.263 174.004 123.105 172.958 123.105 171.874 cv
123.105 165.729 128.087 160.747 134.233 160.747 cv
137.848 160.747 141.059 162.471 143.091 165.141 cv
143.722 164.998 144.378 164.92 145.052 164.92 cv
148.709 164.92 151.845 167.148 153.178 170.321 cv
158.873 169.329 163.859 170.901 164.623 174.08 cv
165.132 176.201 163.642 178.538 160.953 180.364 cv
171.444 180.718 178.436 181.352 178.436 182.075 cv
cp
1 1 1 rgb
f
423.296 167.879 mo
423.296 167.321 417.67 166.85 409.956 166.698 cv
410.111 166.363 410.197 165.995 410.197 165.609 cv
410.197 164.249 409.135 163.113 407.716 162.827 cv
407.503 160.016 403.64 157.7 398.558 157.166 cv
401.267 151.853 401.262 146.459 398.464 144.913 cv
396.518 143.838 393.714 144.899 391.158 147.368 cv
388.44 143.89 384.103 142.227 380.09 143.527 cv
375.82 144.91 373.221 149.226 373.376 153.981 cv
371.52 153.415 369.822 153.58 368.783 154.62 cv
367.237 156.165 367.614 159.162 369.481 161.98 cv
369.46 161.98 369.439 161.978 369.417 161.978 cv
366.081 161.978 363.377 163.576 363.377 165.548 cv
363.377 165.83 363.438 166.104 363.543 166.368 cv
362.984 166.298 362.384 166.258 361.755 166.258 cv
358.854 166.258 356.503 167.071 356.503 168.074 cv
356.503 169.076 358.854 169.889 361.755 169.889 cv
362.285 169.889 362.796 169.862 363.278 169.811 cv
367.467 170.173 374.312 170.408 382.053 170.408 cv
394.099 170.408 403.985 169.838 405.04 169.11 cv
415.16 169.096 423.296 168.55 423.296 167.879 cv
cp
.870588 .956863 1 rgb
f
409.956 166.698 mo
410.111 166.363 410.197 165.995 410.197 165.609 cv
410.197 164.249 409.135 163.113 407.716 162.827 cv
407.503 160.016 403.64 157.7 398.558 157.166 cv
401.267 151.853 401.262 146.459 398.464 144.913 cv
396.518 143.838 393.714 144.899 391.158 147.368 cv
388.44 143.89 384.103 142.227 380.09 143.527 cv
375.82 144.91 373.221 149.226 373.376 153.981 cv
371.52 153.415 369.822 153.58 368.783 154.62 cv
367.237 156.165 367.614 159.162 369.481 161.98 cv
369.46 161.98 369.439 161.978 369.417 161.978 cv
366.081 161.978 363.377 163.576 363.377 165.548 cv
363.377 165.83 363.438 166.104 363.543 166.368 cv
362.984 166.298 362.384 166.258 361.755 166.258 cv
358.854 166.258 356.503 167.071 356.503 168.074 cv
358.068 166.396 364.958 167.857 364.958 167.857 cv
362.811 163.17 370.906 164.309 374.891 165.51 cv
371.412 160.83 376.725 156.783 379.507 158.554 cv
377.104 154.19 386.591 149.383 389.5 154 cv
391.938 148.87 397.848 154.696 394.18 158.933 cv
407.714 160.451 404.679 164.815 404.679 164.815 cv
405.69 164.435 410.181 163.297 409.956 166.698 cv
cp
1 1 1 rgb
f
99.0268 120.191 mo
97.3576 119.491 91.8553 118.855 84.6942 118.439 cv
85.7362 117.486 86.1613 116.247 85.8225 114.751 cv
85.3461 112.648 83.4308 110.352 80.5695 108.166 cv
89.1157 105.64 94.3608 102.242 94.3608 98.5028 cv
94.3608 91.2224 74.5159 85.2312 49.0332 84.471 cv
49.0231 84.2086 48.9974 83.945 48.954 83.6811 cv
48.2495 79.3964 43.338 76.6366 37.9839 77.517 cv
37.2247 77.6418 36.502 77.8396 35.8147 78.0883 cv
35.6933 77.5922 35.5386 77.1054 35.3087 76.6426 cv
32.5344 71.0574 22.739 70.2781 13.4303 74.9022 cv
12.1125 75.5568 10.8858 76.2906 9.74036 77.0735 cv
7.09265 73.0005 3.74664 69.9914 0 68.5002 cv
0 131.633 li
3.30927 130.315 6.30756 127.817 8.78668 124.443 cv
15.5881 127.938 23.4128 131.056 31.5652 133.341 cv
54.4171 139.748 71.1445 137.208 68.927 127.668 cv
68.5084 125.867 67.4427 123.945 65.8383 121.97 cv
69.7487 122.134 73.9747 122.235 78.2398 122.251 cv
92.5574 122.303 101.864 121.381 99.0268 120.191 cv
cp
.870588 .956863 1 rgb
f
89.4487 92.4496 mo
82.035 88.1208 66.9302 85.0049 49.0332 84.471 cv
49.0231 84.2086 48.9974 83.945 48.954 83.6811 cv
48.2495 79.3964 43.338 76.6366 37.9839 77.517 cv
37.2247 77.6418 36.502 77.8396 35.8147 78.0883 cv
35.6933 77.5922 35.5386 77.1054 35.3087 76.6426 cv
32.5344 71.0574 22.739 70.2781 13.4303 74.9022 cv
12.1125 75.5568 10.8858 76.2906 9.74036 77.0735 cv
7.09265 73.0005 3.74664 69.9914 0 68.5002 cv
0 79.4945 li
8.09662 80.0703 14.9579 84.3108 18.2327 90.2651 cv
22.1317 88.3312 27.0807 87.1716 32.4708 87.1716 cv
37.8591 87.1716 42.7955 88.3386 46.6938 90.2715 cv
43.32 90.5466 40.5233 92.435 39.4789 95.0075 cv
41.3187 93.3043 44.2346 92.198 47.5285 92.198 cv
50.8225 92.198 53.7385 93.3043 55.5782 95.0075 cv
54.6636 92.7549 52.4012 91.0311 49.5901 90.4473 cv
54.4495 89.6244 59.6692 89.1713 65.1116 89.1713 cv
74.022 89.1713 82.3524 90.3693 89.4487 92.4496 cv
cp
8.73016 86.5604 mo
6.63293 84.4925 3.54852 83.0198 0 82.5023 cv
0 79.5797 li
4.09894 80.4276 7.40448 83.0825 8.73016 86.5604 cv
cp
1 1 1 rgb
f
70.5621 119.605 mo
65.3756 119.109 61.0529 117.284 59.226 115.082 cv
61.9689 116.538 65.64 117.619 69.7492 118.012 cv
75.4849 118.56 80.6465 117.639 83.7272 115.804 cv
82.5948 118.553 77.0428 120.225 70.5621 119.605 cv
cp
99.0268 120.191 mo
97.3576 119.491 91.8553 118.855 84.6942 118.439 cv
85.7362 117.486 86.1613 116.247 85.8225 114.751 cv
85.3461 112.648 83.4308 110.352 80.5695 108.166 cv
86.1708 106.51 90.3407 104.479 92.5586 102.224 cv
83.7401 104.895 73.1007 106.456 61.6444 106.456 cv
53.3693 106.456 45.5338 105.633 38.4952 104.171 cv
44.6751 102.82 49.7677 100.444 52.9211 97.4659 cv
46.96 100.189 37.4291 101.953 26.6876 101.953 cv
17.3969 101.953 9.01697 100.632 3.06415 98.5132 cv
8.13165 98.1833 12.3801 95.7843 14.2059 92.4811 cv
11.6069 94.4852 7.0542 95.8151 1.86786 95.8151 cv
1.23474 95.8151 .611877 95.7939 0 95.7555 cv
0 98.4517 li
.56958 98.5101 1.14832 98.5479 1.73871 98.5521 cv
7.03326 102.672 16.2218 105.404 26.6876 105.404 cv
29.4052 105.404 32.0337 105.215 34.5343 104.87 cv
35.5517 105.213 36.5779 105.573 37.6117 105.954 cv
54.6871 112.243 67.0916 121.245 65.3177 126.062 cv
63.5439 130.878 48.2634 129.684 31.188 123.395 cv
22.0359 120.024 14.2293 115.874 9.22479 112.006 cv
6.62256 114.794 3.49255 117.079 0 118.72 cv
0 128.118 li
3.36267 126.629 5.80334 124.099 6.52954 121.12 cv
6.55438 121.364 6.57916 121.607 6.57916 121.855 cv
6.57916 125.447 3.92224 128.572 0 130.202 cv
0 131.633 li
3.30927 130.315 6.30756 127.817 8.78668 124.443 cv
15.5881 127.938 23.4128 131.056 31.5652 133.341 cv
54.4171 139.748 71.1445 137.208 68.927 127.668 cv
68.5084 125.867 67.4427 123.945 65.8383 121.97 cv
69.7487 122.134 73.9747 122.235 78.2398 122.251 cv
92.5574 122.303 101.864 121.381 99.0268 120.191 cv
cp
.682353 .788235 .921569 rgb
f
162.535 307.038 mo
164.496 305.752 165.597 304.26 165.375 302.839 cv
165.114 301.172 163.097 299.965 160.155 299.426 cv
160.628 297.378 160.89 295.249 160.89 293.058 cv
160.89 277.468 148.252 264.831 132.663 264.831 cv
120.224 264.831 109.671 272.88 105.912 284.052 cv
101.068 283.494 97.3376 284.405 95.9999 286.922 cv
94.9503 288.896 95.5508 291.542 97.3821 294.377 cv
89.259 295.382 83.8938 297.543 83.676 300.419 cv
83.5799 301.688 84.5208 303.407 86.2516 304.635 cv
81.2016 302.373 79.0588 302.568 76.2855 304.071 cv
76.3619 303.882 76.415 303.693 76.416 303.501 cv
76.4291 300.85 69.1264 298.455 57.7526 296.875 cv
58.8368 295.524 59.367 294.065 59.1855 292.606 cv
58.8153 289.632 55.5715 287.386 50.9839 286.431 cv
52.9887 283.794 53.7824 281.326 53.0473 279.269 cv
51.4034 274.67 42.5726 273.309 30.8793 275.12 cv
32.1216 268.93 31.2415 263.922 28.0978 262.259 cv
25.892 261.091 22.95 261.777 19.8649 263.842 cv
17.9636 251.64 10.4257 241.308 6.10352e-005 235.582 cv
6.10352e-005 313.172 li
11.2632 313.28 23.1091 313.338 35.3401 313.338 cv
70.1942 313.338 101.954 312.87 125.857 312.104 cv
127.94 312.093 129.939 312.024 131.836 311.9 cv
155.406 311.045 169.928 309.878 169.928 308.592 cv
169.928 308.048 167.321 307.525 162.535 307.038 cv
cp
.870588 .956863 1 rgb
f
140.381 272.593 mo
147.028 272.593 153.052 275.251 157.457 279.558 cv
152.67 270.784 143.362 264.831 132.663 264.831 cv
120.224 264.831 109.671 272.88 105.912 284.052 cv
101.068 283.494 97.3377 284.405 95.9999 286.922 cv
94.9503 288.896 95.5508 291.542 97.3821 294.377 cv
91.4576 295.11 87.0117 296.46 84.9483 298.252 cv
87.4684 297.497 90.2642 297.064 93.2219 297.064 cv
96.7764 297.064 100.096 297.688 102.976 298.755 cv
100.851 299.12 99.0037 300.292 97.7709 301.956 cv
99.5681 300.802 101.861 300.109 104.362 300.109 cv
106.862 300.109 109.156 300.802 110.953 301.956 cv
109.553 300.067 107.365 298.81 104.873 298.655 cv
104.931 294.613 106.492 291.287 109.37 290.07 cv
111.328 289.241 113.565 289.523 115.722 290.658 cv
112.564 291.762 109.842 293.797 107.886 296.437 cv
111.502 294.117 116.116 292.722 121.146 292.722 cv
126.177 292.722 130.79 294.117 134.406 296.437 cv
131.398 292.377 126.587 289.734 121.146 289.734 cv
119.682 289.734 118.266 289.931 116.916 290.29 cv
119.844 280.077 129.227 272.593 140.381 272.593 cv
cp
1 1 1 rgb
f
19.7996 282.207 mo
19.7996 272.888 16.3597 264.377 10.6907 257.857 cv
10.739 257.947 10.7957 258.033 10.8424 258.124 cv
7.98389 255.596 4.24561 253.697 0 252.66 cv
0 235.582 li
10.4257 241.308 17.9636 251.64 19.8649 263.842 cv
22.95 261.777 25.892 261.091 28.0978 262.259 cv
31.2415 263.922 32.1216 268.93 30.8793 275.12 cv
42.5726 273.309 51.4034 274.67 53.0473 279.269 cv
48.7383 273.421 25.1078 278.386 19.7996 282.207 cv
cp
f
57.7526 296.875 mo
51.7018 296.551 42.996 297.833 38.8089 300.669 cv
44.114 298.492 63.7865 297.437 74.3852 301.108 cv
71.469 299.433 66.0698 297.319 57.7526 296.875 cv
cp
f
39.6246 279.849 mo
39.6246 280.751 41.6503 281.482 44.149 281.482 cv
46.6478 281.482 48.6735 280.751 48.6735 279.849 cv
48.6735 278.946 46.6478 278.215 44.149 278.215 cv
41.6503 278.215 39.6246 278.946 39.6246 279.849 cv
cp
f
0 281.338 mo
1.43646 280.091 2.73096 278.75 3.84442 277.324 cv
3.03815 280.036 1.71875 282.583 0 284.89 cv
0 281.338 li
cp
.682353 .788235 .921569 rgb
f
139.537 310.195 mo
133.099 311 127.198 309.346 123.766 306.23 cv
127.894 307.816 133.363 308.431 139.224 307.697 cv
145.085 306.964 150.235 305.02 153.844 302.466 cv
151.286 306.331 145.974 309.389 139.537 310.195 cv
cp
162.535 307.038 mo
164.496 305.752 165.597 304.26 165.375 302.839 cv
165.114 301.172 163.097 299.965 160.155 299.426 cv
160.628 297.378 160.89 295.249 160.89 293.058 cv
160.89 288.006 159.556 283.268 157.232 279.166 cv
157.303 279.919 157.343 280.68 157.343 281.451 cv
157.343 294.806 146.516 305.632 133.162 305.632 cv
128.521 305.632 124.187 304.322 120.505 302.056 cv
116.653 304.714 110.299 306.456 103.096 306.456 cv
94.448 306.456 87.0197 303.947 83.6891 300.35 cv
83.6866 300.373 83.6778 300.395 83.676 300.419 cv
83.5864 301.602 84.2563 304.17 89.5515 306.507 cv
91.121 307.2 91.9118 311.535 81.6161 311.933 cv
65.0239 312.576 74.9922 306.736 76.2855 304.071 cv
76.9664 302.667 75.3019 301.733 75.3019 301.733 cv
74.912 305.366 63.6614 308.28 49.8297 308.28 cv
35.7515 308.28 32.5431 303.061 33.6065 302.231 cv
35.9678 300.387 55.2307 288.838 53.1332 279.601 cv
51.7991 290.32 28.308 298.675 3.92761 298.675 cv
2.60358 298.675 1.29736 298.642 0 298.594 cv
0 306.354 li
1.03699 306.375 2.08154 306.38 3.13849 306.356 cv
13.9506 306.108 23.6907 303.525 30.7396 299.542 cv
25.362 306.108 15.1196 310.691 3.24396 310.963 cv
2.14783 310.988 1.06903 310.964 0 310.916 cv
0 313.172 li
11.2631 313.28 23.1091 313.338 35.3401 313.338 cv
70.1942 313.338 101.954 312.87 125.857 312.104 cv
127.94 312.093 129.939 312.024 131.836 311.9 cv
155.406 311.045 169.928 309.878 169.928 308.592 cv
169.928 308.048 167.321 307.525 162.535 307.038 cv
cp
f
41.1328 303.728 mo
41.1328 304.63 43.6648 305.361 46.7883 305.361 cv
49.9117 305.361 52.4438 304.63 52.4438 303.728 cv
52.4438 302.825 49.9117 302.094 46.7883 302.094 cv
43.6648 302.094 41.1328 302.825 41.1328 303.728 cv
cp
f
525 235.582 mo
519.417 232.516 513.007 230.767 506.187 230.767 cv
486.099 230.767 469.554 245.9 467.306 265.385 cv
467 265.443 466.699 265.519 466.409 265.636 cv
463.469 266.817 462.036 270.824 462.174 276.127 cv
457.661 275.988 454.053 277.251 452.299 280.03 cv
450.557 282.787 450.934 286.548 452.957 290.528 cv
441.234 293.351 433.101 298.274 433.687 302.76 cv
433.888 304.297 435.093 305.62 437.073 306.685 cv
429.798 307.269 425.752 307.914 425.752 308.592 cv
425.752 310.782 467.814 312.625 525 313.172 cv
525 235.582 li
cp
.870588 .956863 1 rgb
f
525 235.582 mo
519.417 232.516 513.007 230.767 506.187 230.767 cv
486.099 230.767 469.554 245.9 467.306 265.385 cv
467 265.443 466.699 265.519 466.409 265.636 cv
463.469 266.817 462.036 270.824 462.174 276.127 cv
457.743 275.99 454.196 277.214 452.407 279.888 cv
454.261 278.755 456.432 278.09 458.764 278.09 cv
464.58 278.09 469.438 282.157 470.674 287.599 cv
470.755 287.59 470.835 287.584 470.915 287.573 cv
470.661 285.82 470.514 284.031 470.514 282.207 cv
470.514 261.694 487.144 245.064 507.657 245.064 cv
512.209 245.064 516.569 245.887 520.599 247.386 cv
518.468 247.001 516.231 246.887 513.938 247.098 cv
505.2 247.904 498.087 253.115 495.151 259.969 cv
488.858 259.977 483.449 263.431 481.302 268.369 cv
484.549 265.112 489.759 263.078 495.578 263.248 cv
501.396 263.418 506.478 265.753 509.53 269.194 cv
507.669 264.124 502.448 260.353 496.142 259.996 cv
500.44 255.67 506.921 252.603 514.382 251.915 cv
518.111 251.571 521.708 251.856 525 252.66 cv
525 235.582 li
cp
460.437 280.98 mo
458.841 280.98 457.546 281.655 457.546 282.488 cv
457.546 283.321 458.841 283.996 460.437 283.996 cv
462.033 283.996 463.328 283.321 463.328 282.488 cv
463.328 281.655 462.033 280.98 460.437 280.98 cv
cp
500.277 269.794 mo
500.277 270.835 497.97 271.68 495.124 271.68 cv
492.279 271.68 489.971 270.835 489.971 269.794 cv
489.971 268.753 492.279 267.909 495.124 267.909 cv
497.97 267.909 500.277 268.753 500.277 269.794 cv
cp
1 1 1 rgb
f
473.131 297.695 mo
473.131 296.515 475.381 295.558 478.158 295.558 cv
480.934 295.558 483.185 296.515 483.185 297.695 cv
483.185 298.875 480.934 299.832 478.158 299.832 cv
475.381 299.832 473.131 298.875 473.131 297.695 cv
cp
475.548 310.384 mo
468.484 309.313 462.723 305.796 460.017 301.467 cv
463.918 304.382 469.532 306.668 475.964 307.643 cv
482.395 308.617 488.434 308.096 493.024 306.467 cv
489.157 309.8 482.613 311.454 475.548 310.384 cv
cp
446.794 309.75 mo
442.494 309.61 439.024 309.017 439.043 308.426 cv
439.063 307.835 442.565 307.469 446.866 307.609 cv
451.166 307.749 454.636 308.342 454.617 308.933 cv
454.597 309.524 451.095 309.89 446.794 309.75 cv
cp
525 310.916 mo
514.486 310.446 505.403 306.543 500.255 300.813 cv
506.772 304.111 515.429 306.165 525 306.354 cv
525 298.594 li
518.219 298.342 511.822 297.455 506.064 296.059 cv
514.031 294.764 520.763 290.577 525 284.89 cv
525 281.338 li
519.548 286.07 511.929 289.374 503.272 290.172 cv
492.334 291.181 482.282 287.968 475.781 282.218 cv
479.444 289.377 486.845 294.539 495.645 296.027 cv
490.837 299.546 484.915 301.631 478.5 301.631 cv
466.07 301.631 455.466 293.832 451.3 282.863 cv
450.975 285.117 451.599 287.691 452.91 290.428 cv
454.893 294.57 456.442 298.037 454.877 300.746 cv
451.581 306.451 434.049 308.15 433.727 301.69 cv
433.667 302.048 433.641 302.406 433.687 302.76 cv
433.888 304.297 435.093 305.62 437.073 306.685 cv
429.798 307.269 425.752 307.914 425.752 308.592 cv
425.752 310.782 467.814 312.625 525 313.172 cv
525 310.916 li
cp
.682353 .788235 .921569 rgb
f
525 68.5002 mo
523.28 67.8156 521.476 67.4499 519.615 67.4499 cv
512.557 67.4499 506.303 72.696 502.421 80.774 cv
497.899 81.5938 494.555 84.7739 494.161 88.3469 cv
486.783 89.2966 480.61 93.7186 477.628 99.773 cv
462.75 96.8821 450.14 98.7972 448.858 104.368 cv
448.411 106.311 449.405 108.456 451.501 110.592 cv
427.422 112.043 409.832 116.612 409.832 122.028 cv
409.832 123.649 411.415 125.194 414.27 126.604 cv
409.867 126.62 405.638 126.704 401.688 126.846 cv
399.48 124.905 395.444 123.034 390.633 121.927 cv
382.898 120.148 376.096 121.015 375.441 123.865 cv
375.09 125.388 376.58 127.169 379.213 128.769 cv
376.017 129.355 374.201 130.025 374.201 130.738 cv
374.201 133.024 392.865 134.877 415.888 134.877 cv
427.696 134.877 438.35 134.388 445.935 133.605 cv
448.262 136.462 453.812 138.475 460.297 138.475 cv
466.578 138.475 471.975 136.584 474.423 133.869 cv
483.29 133.664 491.547 133.048 498.743 132.117 cv
500.09 135.693 504.548 137.864 509.376 137.07 cv
512.687 136.526 515.387 134.715 516.803 132.401 cv
517.724 132.587 518.661 132.692 519.615 132.692 cv
521.476 132.692 523.279 132.319 525 131.633 cv
525 68.5002 li
cp
.870588 .956863 1 rgb
f
525 82.5023 mo
524.102 82.3712 523.181 82.2855 522.23 82.2855 cv
517.524 82.2855 513.359 83.9689 510.73 86.5604 cv
511.912 83.4603 514.661 80.9987 518.146 79.8983 cv
510.142 81.4546 503.788 86.6642 501.693 93.3524 cv
496.712 95.8839 492.574 99.8198 489.781 104.638 cv
493.704 104.829 496.973 106.747 498.177 109.358 cv
496.111 107.674 492.837 106.58 489.139 106.58 cv
485.44 106.58 482.166 107.674 480.101 109.358 cv
481.065 107.266 483.357 105.619 486.247 104.948 cv
483.368 103.808 479.915 102.877 476.144 102.306 cv
465.336 100.671 456.082 102.601 455.474 106.617 cv
455.169 108.635 457.108 110.796 460.483 112.654 cv
455.523 112.161 450.187 111.974 444.634 112.153 cv
433.619 112.506 423.547 114.232 415.642 116.825 cv
422.723 113.834 435.717 111.543 451.501 110.592 cv
449.405 108.456 448.411 106.311 448.858 104.368 cv
450.14 98.7972 462.75 96.8821 477.628 99.773 cv
480.61 93.7186 486.783 89.2966 494.161 88.3469 cv
494.555 84.7739 497.899 81.5938 502.421 80.774 cv
506.303 72.696 512.557 67.4499 519.615 67.4499 cv
521.476 67.4499 523.28 67.8156 525 68.5002 cv
525 79.4945 li
524.804 79.4806 524.611 79.4582 524.414 79.4486 cv
524.614 79.4808 524.803 79.539 525 79.5797 cv
525 82.5023 li
cp
1 1 1 rgb
f
460.308 137.542 mo
454.49 137.542 449.37 135.668 446.375 132.828 cv
449.93 134.755 454.858 135.95 460.308 135.95 cv
465.759 135.95 470.687 134.755 474.242 132.828 cv
471.247 135.668 466.127 137.542 460.308 137.542 cv
cp
525 130.202 mo
523.164 130.965 521.054 131.403 518.805 131.403 cv
517.626 131.403 516.488 131.277 515.405 131.053 cv
513.73 133.572 510.933 135.229 507.754 135.229 cv
504.287 135.229 501.268 133.26 499.67 130.348 cv
501.725 132.385 504.507 133.644 507.578 133.644 cv
510.339 133.644 512.858 132.616 514.833 130.929 cv
511.199 130.038 508.286 127.961 506.906 125.311 cv
509.407 127.874 513.444 129.546 518.013 129.546 cv
520.566 129.546 522.953 129.024 525 128.118 cv
525 118.72 li
521.132 120.537 516.817 121.561 512.26 121.561 cv
508.916 121.561 505.702 121.009 502.698 120 cv
499.024 121.656 494.953 122.585 490.662 122.585 cv
487.621 122.585 484.694 122.111 481.938 121.25 cv
487.316 119.778 491.625 116.714 493.767 112.838 cv
489.759 115.929 482.738 117.98 474.739 117.98 cv
466.741 117.98 459.72 115.929 455.712 112.838 cv
458.747 118.329 466.12 122.207 474.739 122.207 cv
476.211 122.207 477.642 122.085 479.026 121.871 cv
475.034 127.994 468.131 132.046 460.276 132.046 cv
453.39 132.046 447.249 128.921 443.146 124.028 cv
440.629 124.485 437.968 124.735 435.211 124.735 cv
430.875 124.735 426.77 124.128 423.108 123.044 cv
424.561 124.42 425.269 125.811 424.999 127.08 cv
424.186 130.891 414.913 132.142 404.286 129.876 cv
403.838 129.78 403.403 129.674 402.965 129.569 cv
400.329 130.27 397.562 130.649 394.705 130.649 cv
387.462 130.649 380.782 128.244 375.414 124.192 cv
375.326 125.641 376.765 127.281 379.213 128.769 cv
376.017 129.355 374.201 130.025 374.201 130.738 cv
374.201 133.024 392.865 134.877 415.888 134.877 cv
427.696 134.877 438.35 134.388 445.935 133.605 cv
448.262 136.462 453.812 138.475 460.297 138.475 cv
466.578 138.475 471.975 136.584 474.423 133.869 cv
483.29 133.664 491.547 133.048 498.743 132.117 cv
500.09 135.693 504.548 137.864 509.376 137.07 cv
512.687 136.526 515.387 134.715 516.803 132.401 cv
517.724 132.587 518.661 132.692 519.615 132.692 cv
521.476 132.692 523.279 132.319 525 131.633 cv
525 130.202 li
cp
525 98.4517 mo
525 95.7555 li
520.6 95.479 516.812 94.2405 514.53 92.4811 cv
516.274 95.6369 520.232 97.9626 525 98.4517 cv
cp
508.909 118.952 mo
511.462 118.952 513.533 118.206 513.533 117.287 cv
513.533 116.368 511.462 115.622 508.909 115.622 cv
506.355 115.622 504.284 116.368 504.284 117.287 cv
504.284 118.206 506.355 118.952 508.909 118.952 cv
cp
423.315 120.263 mo
423.315 119.686 425.724 119.218 428.696 119.218 cv
431.667 119.218 434.076 119.686 434.076 120.263 cv
434.076 120.841 431.667 121.309 428.696 121.309 cv
425.724 121.309 423.315 120.841 423.315 120.263 cv
cp
.682353 .788235 .921569 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (Anton) ()
%%Title: (1610.m00.i125.n015.S.c12.310635362 Vector cartoon blue cloudy sky horizontal seamless pattern.eps)
%%CreationDate: 10/16/2016 10:09 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9?5de<Q`Y&"#hZB1.J7VXM,!D2cQ80B'@p4X>fJ:k=Ua\:!8kI83K=1<#!(bB9^A"2NK5YS`=h,Ra-Q/mXQ9VYfF=6c]O
%`ntROMX;?5NbKDl:N'M0cT`0\SlYR&p<Y4UEhdXP<fP<\9&3ZQn*IG#V6Je$2QDa;Hd0Y2/Cog:i[K:R1u=#<C?$rcS_eON$C,@.
%BXDNnNo?g.#22Rpg$:PUVb?QOiUUZo7\GC<e"LX*XM!Ql<[PNt62@q`nWO[<-g>rLUa,)1L]2E\8SP/R?2U(7s7l\m8T/rjfn6M3
%C_]$s7\(;u1G!i(dYC:E4=PHS*OQua5Dn<@*Z18Ra`uJAUs2tdZjDXtVLGMZ/ADFG?7Qfjmgm&*%e#*[)ie*7D_Hl'KGrdr)7]=D
%ckfe#('%m-2[SajL:(X$fEq?rKqPcI?Z^u"\'[H%)g0k8i2-R:%U"UPk8Bl/InKX4a7^$-r)!e#=u2b)`H'VZVjqXI%P%LPdr]:5
%gGLj5^KV.OYNqG`O\AI`W'f3SPf"uEfY>'q/b5%E0]_,;`*oon)Kpp0)q?Rd@*S2ckd))]g.q0N#X5Wf+toEorNPgH2nIuQI`hA3
%a09uSZ=P-ePOS.=@@9Dhpjj*LRIEAW+p@at)(gF80O(oE`&[2sZbC6U:+Q"F'q^N=':.e@X]D:RB4EA!?i=Gm;L[s[Ljo!9M%#qM
%=H>/@`)1\:-4jd(pAdkLlfDrXL@]*=cV-m!+=X9J:A(O`5PR%'U>+2-0];.`K.a+P1%Clc]MP6r7sic=ICRgBFIV%XPK'5E/>gUM
%j3W#aQ9(!@ST*8,H2N[$G[N(OZA&'aHfc^1Tc_TY5H^tn,aUF2V<nV;DQ"'cWB[W`(HV?G-+L"q84dmsek6`.bm.`:7l5"8LAI.;
%jZi"e'E"?\HBNYR;#L\afqqUC_7l_uhj\B^&P"'3s*?T:V]Y.?C9Ds_7p'UbZ$u>r.+ZS]gL@4OA1r;[@_LDLpk+(,Q.pC8d953"
%E+4SKV4eA$J)DM7SDIu9VNl?T5A2uEifHR_-E1\,RIN^.VME%@!O7[u/QM/-)4>5A0=UsEJLmcQAA[832]CSKJQaPFc45<SNZ6M@
%]>j`RoNpOak:JZAIeSL2*j`=g2&3f9;))O#@]?L"2(h(sN5!C'X?qmHP)b:-->fWhZ%Vc:KWY*o\fu6sgHID')ia-t-ap8V)M"f\
%)).cdF!Wfm2>^pJHkKs4e;!r]0^&uFV7X4Dk*88STMQTg$0SqP]?_7ne]MU,fK?4!IOtUFVJd]MCWA!)U\>ho,V.<`=!Dk1IM403
%&kgA$Q<(r_1!R[e98,)OMS_>N3)69Q1eG(AQ]Z;$M@*0K(RD^2)qCt/aHnF<^Kb4TY8hWQ=0Y[b1Nk7gX^\=DN\NY(lB=i2*-(#3
%>Npg`/[GZ'i^CdlP=/Oa-cU_+$`2ZH*toH"'DJup*g(deG99merqsYh1A//(\^`0q/**8()2k]aojWpY``!=%Cmuai$&/h*ABKE$
%naXpi2J>usfp6-YQ=p"o?tHF@Q*^%u'UB<I(63?f-[ZM^[)e')aGIPXfVWMJR^Pf)4Mo.J"$:@4m@9`V$\/07R#^86LF>D@c]Lu\
%Un*I.V,tsa3sF5X/W*qPI-eGIk=X?Mdr*1M\iD_<(-L'@c$7)Mnp)is,>WVL]`KkSA\9S-EaITQ85i\i8D8T9UanSWV(Vq=Q5Q*U
%3I9du_)LUiq80%(qMt#R)P?!rhtI4;9s9MJolKcJs7s]FVMFt_rj1fYcu23+dVjHbr*u4Vl09@OIcErHDtP?[>r+1`oZGN290YH5
%SYK8XJ+=p`QmOIgQ=\Lt=`esL6(FYFEVVGJ1j#>'Q)6?3djr<`MmK8/[0fq8>G<pn.8ppK-S=P`ES`Zp3qFCUCjrA^3s.-?s#@7q
%N&1FNs,L$s@X@t#s*iXh>ra.Y_dnoEb^:S+cfalPHmYK2#C/Neo3U:u4*`n@neRcq+d^O:EnO\EQd,cQ?S^g+gmjS7F+R0&bSIM[
%CbD4%B!UYP7AX-O.uCH8OqBc+ka]jj+d:751>,>JPKj:K59hsj`m$I\4!Wr?c#b,":Zp0ZF=*PR#K4_>mA8XGPIApa9ghaG5p=;S
%\KDi%JohP,INS_GE!%Jl!teXdknj7[0n,EV+AK`2qiX@b,pAr^SiFcT"VRIJM,K'rMY9TX,tZ0_&iOb@Lqh/i71-R,+]P*d(MI"V
%>.?h](MJDP7k_@0d*&;QTGMk!A.!pCTVA/*-ja&i2?3T,.12MqWf!sP/8/fb#)L!d0PCkE.lr=2TJ`YWH@t4M3Dob$5D\a#]ELmD
%Ar6LH!Ls0cJ^8mR5+_u'!iLV@^ko!GTi9ok_9%eMT[UaQi.Q&=F@n]B`;e#AGi_E/Z6N_`*6jigHDO-GJrq_dieqE5,@B<KQTO3g
%%)-CEVg$G_`Un,.Kqh>"Xc8`h?.)?R@AYU-,bq%G;(78[&t-Iu'X#?!)HR%OEcnO!OKuY18B;eLis@JXXA8%\jb?<G9&];E)J2QG
%)UK2$2"X6,26V-?<m'M"2E\:mA(*c1WBNFhZW3r'4%T4Mp>-a(o[g_2SJR9+aR=28&e]<*f$?&mXW*1Jf;`uiE.pEK<opjG#q;ZW
%VLdu4X#N5=FB5B,>@F'm#\/"HI"pL5pso1sZjV;l89A-^@&tErV"N3Q5sL7WXr_^$<_gt%Q]-Q<_S^$ldD4kC7d$sI\T=&:)a/(:
%a>>l)(ooNQa6\HsNRPrTn/E3-.4is&7hdPD;%T\]D9"cE`a`4%-U8;s-A>Y:B)J%sLS*%T_I\ZD8)`pnRrS=q2AOp0[Z7uMY[.[W
%;aObIQ5I<W-\@EsO%6lfHWfVJItUDC8:9p&E5EcX8#mB5]@A0M//gK&WCrZIG]\t(mBFqE^NYMpPGjV;nWQ;BhDj^u3i1"NE"'Q@
%O$i:l#p0Y9:8ht]_n`hjKCNP54<17U@N3)Y*2Zi..eUtaaaaE3W(HO56)30aKj-%iRfoKS#Ybf$9/d\TU<sBR`D31n!1!Q1$-PuM
%;/8)DS<ckl0#)*:ljf*6^hPJa1"PNMh%ZS>O6gI$Z?,/jh)r!4"r2F3.T5&"IF5"#Db=i45dog[h5"Pm"KAMKBK$Ihk+UTnZl;>@
%*nnk+]0@':dm16S18OXX.G3;*Gu4/1K;,&OAg_>D(.Yt%cI?-hQL<[iRNS@X>#14Tj`Rk3o]'.aXmmWe#>Yb)9u\R2aY?=:CfZHc
%C/)Zf\UlmD&n'323]Z5$%SnSIbH8R1-f5>jSQn+1Q&CWm'Pc[XD#DAKQ!Z3Pj3MR]r1l$RbQPG@':i3MOsa7Je<@sRWRS%mEE?P2
%'8d6jf^Tg0\hFT:V;J.95O7s5ra!Q]H/nGV[n5q!1iQ?;[[Yf>Oom6MX!QOYR/j)_d"u<9&r>+YGa^%,dGlR-9!S4onRhoF>%,$A
%CaDd*W0%`&@>a_M/WhrY_J!:'ai'EbiK"?'_4;th'-BEki'1LaSeZ0/k^QjNe9K8JL,0].^H*k??29D\@^k0r'^M11Z'oPNE:$'H
%e>N9Y1>&slrU7u*9a%.fPj3VK]hD6#978][M9K\_!XTKokEk:nieN(N'8prFi/g?PSPN(+,rpb(Wji-j37E9cFqPe]RIMDthBlQ)
%pJ/D=/@I%!ZWc!Qij$_/ND(Hbs0G18((1`+4PT0-i?Z`k2f,%>+Qaq"\7uiO)Y1Oq4Kfq.l5F\p42U,;j;tqWCWQ)co"9^)9ap2B
%jNC>4$>RZK%\S\1bk6Xl_9CDg;)KsQa;<1g`q-e3]PahE5-GpO6BZ.k2uWuCaLlD<RELo3@B5ogFPC64;(%'%:VpTXY*bTsP<d$.
%>:1+S*K[[)iY2e2T+kTrq(!c2,?Mk_gb`E8KPq`!JDTc!'8n-!C:pA*2DBI"Fl0Q1,V@k3a=&@SBV$C5jYGs9Z?_2kQO!$ebgd.n
%PI^9AfbC@+P]O6]g'Yao3go>RSOBW$g0"APBiN!qH7LPM2d42sV1m';rbS/jS*/+\L![/r5P#L5d).@3Pq[P#)`oe'j<qaBpn(0\
%S*1Gh]o`t'e)W!KLtG;m*44hb\If<.G-n##PAG.`?kId=)4C$G23LEF0:A>[Q5ma=hbEZnY(^9`P,Uoi(@u"rRbcntfF:Co7<1*0
%qa[MXWQl/1o>Jg7nM3nQr%BF(FIGWE???s;o.T^Rb<5;M:V=mb0D!-*5=rL]cD.m0I6LSn5W[9.dnFD9DVAs<f8=7>5!H`$:TTq@
%KZ!7V#daKFMBi]MR.^bc,^J%[r.,U3J]"iZYTe?;g@SUgS+c4B)uI""C8J7<XB\rHRN'9r<bTs"*9U+=RL\A&';"?.bqNqu%:jLm
%41C355,7pPS8QnVS??k7o-ZNBTAVQ2r.o^+^>Lj\3qG"L<VT;?F/W>>5@2K2O.=(.W*GBIF<'t(.Qi4'&aE^cO35u`X-/hFQ2e&u
%1_DLE=?#0m@$;aRZbI#/_3_(Fn3\jH::>$=fS_J!E0@BdbWkeFJJKX]d=^Pq-c]+VE(FH"aqM-Q2l*:`EH9J;4-51t=AIN#0Jf_%
%+a8!lf?:5aR;TET;Je85W_%R)\6:GSY8[huBGO7+cHe@(Q,p`9RI$Ld2/Z<>Q`q9SB&k?`5-lG&"Yee,9$olNeh^,t8BP;gDG4tR
%s4ND*%bbR7EoX@ic-gI8h)@$;VV`r]]DU8`U,r`qp?q&<,Q4Llk0>(5pWIC$ZrmM"#2UnB-SPV.G-f[$^7XM2\PH.F\($C^geIp#
%B;V<0F,e3Hc/d>sjpp]n3ik9Y[@<&chkj,IcCL]_E/NdAd4aCur!r;@FS,J@np(FhMJ_Q>g&2H!UT)""DLMidFPJ-#^OppFXPut?
%Bta%\aj#h*F;`-p*TV;%35:)nIL#](2U9/WrQj3;=j/#gZR4,]69*)>^##=@drmL]7k)a/H2Q6!bTo]K[#1\TZ211l8J2l@lc/Ka
%Du*U-J5<`G:XT>An((gn.K2m1<;61G8Ki6/D&mi$@6M^K@E_DL?-5i;ANVTR_a5mOhBh6HgjqFAIT!]+)[Dp+VfZ'aFPmWYN'"+?
%'/AO_kR!`AYtR16R_2[skn6*l@jZ<-AXN<Ol<OoU*o!+YZA\%I`2P\!>BG#bMN4g,NpNd*f'ZPD2Vi--Aj>A:VKdO(s,OT\b0\?s
%,@fg^4="D_J\*u9:W`B[=f.%KoCBY<5O9YlItf%#nP>0X#&5I9E7^snJo4hG*D-Xr3!9LG:DqB"'7lE@EX0c=]$o9k\uF9gEHDiK
%9fQod2"M4M9sR%B[<F!,X&*M)0`NkE-ep-l-TU"NaA*'e5uE@KIZlVe3&#Zqg8*)tQhG&iNSGd+91d#XDE=8(c.Qp]ChDLNAX8`t
%EsRO\\Bk/Y<NNZ*P'dAL'_;10D`F-\XN1#3[&J72De.ipESY.gl$;Q(eELqq>In"/7l^O5?fs#,^Sf'A2soNmI<j9@ckl=V;L^E^
%UVD9`?d=kNjh9mh^Uo&f^SP<8Q$)\Qhd:O^^FAD2R9LGj<.3ng^/m5h:+[:=FLC!5CQ0DB'L!E(bC'114("P!8N^]EC.U,<@?\Ss
%-8<;r,UU#U3@n?BZW^&N_-AOX/"OhZHoUW&[GK9PAQHt48Yr$BOcDh\Yh7&D.Ds0G:("BS<[rQ7dHWA%NU^X?3.=b-\sHQuGc,&G
%,:cR\Yj.3o'%&1o]!ZF`QmAjl0R-K/<@daHR,DtYV.-j>gIRK^L^fmh;T7p.`LdIhNdTMTZ'E]%<?i/<*ks'3;QNr7M-0*<-":Kb
%7]i0RJAsu`os@6F^U&5A4%4mLl?#.dE)KQk9>0j?<FShZT57<%0D9QoHnDk1#'dTQ`c(c7k#$a-7W*MPqHp`5D3=sEm8hHAbl).A
%9+Y4_FI>ceK"9+MAaXT,K.';iadQkB6CR66AFHgZg\hY>=99,BMWIGh8[:Gs3%8M8VEJ1m>e)%!1?/lDDPP`ECK)7N$&VDtc1fC=
%T/YAL#tQc%HumOkf6l&Nq(0Qk(saaG@Bsh:kma-spEr>kY=^h&f08G=P<q`A-*g"C:^q7sDN.n4Xe\'W6#lOJFH2M@7:!f!:$,S)
%,0<D'l*HdcDbVu4OutYbn!S;6k)Z.'"h,Z.pH-[S%2UgMQi'R&l;SB9VZ!2e2rs:#qp/ukH*TWO&"/l9X7_F$X7bD[1p85'1?`oE
%B<lHc<oYN\geIaimMhnL+U.J@ZQ9OdkeHZ[peLrhr+CVdUQl7IBb,dN6s0B@)#/=N(jh7br*-5b9p,HN%o9l-\T,r\R(/"N?&E$u
%+"/lD6I$DXo.T2&mH8Fk_p/5lp'dn!)6eiSXfO_d7aD$>j#Dr_n9$M"2tO:Bdrlr,DrU\S]9r<pbo[UAmEV0Xg,(UD7O,`dSb#mA
%M7]MR<fO)cn+0S>H)nr'ET$$;$[.`OZet@SG-_ht9\[\e`l-Eo*6LBERtXthZKLt">`-dZn(mcrNMD!n'/q;gHfHG\`G+eR8VG%,
%^A0%jSZ;:?`l)AXGt)9n?"*a;A2KJ-0[FE+D9P(W1-a)ubVL0dFu&ZJ`]U"N.iAffAn<e3Tek#.9OgPE+"<'0D-6):C\P.TSu8.a
%-0;=Z%c1amIqM!t0n7D:BA=`[j52?'=,eLqDt7V%gh,tIZ#E7K-g6uF=4io3n&>.4hhs?`++!q"$5`'u,]B,BVB2Tud51f7KmC<i
%O8%f,hG&t'')4Q[G],W>\CpE/%K&!E"Pq,iLi:]R?\1Y6#CQ,nD]\Dm"29&r2\5\<,GZ:P\9Vj2nBGLZkGedP,KRd;Nhb?qnb8#f
%H@@%uS+7\?A_t1<V%U/ace*I/gm"u'hu-82PBkI$%16."0\J+.U;QHj7'HF27rpOGBtg#dY=URnh]V$G,VLiQ?N2$QqBjubEW^F7
%EIu8JG3!uOc^Xc:!^=M/]lF4uBSe]ag1<E5SUKX8J]C?Pi*"H7AeLGZ?4"9M&id:(3%K_r`ljbVDB<L>rCWmmJ!X%GVOIL1m#<]i
%`sLC5B$<p]A>['ZZ_*nLOZb5GlXBH/XG3Q^q3Hr*9FAOVJl:(jn[j%fKWRtOdV`*DV6C`d41iJo9U_JTOetcJfq!sja#'NWET+#W
%n9-q2r&0BF(CcmLNB$Sh.R?gHG&1+ZA7ifUcJf4*GHXmWe#hMjI$O+N54C'7O%m=;-ckSsNn"*g><ul+4lrISLAsi,2a+->X2u9u
%WfoNk"KLLXeYje1K83/.Ns'j`BdE69)O&(4'sa`#*g:'D>j54:,k4n36RRRf!m;6I/R&&U,;C7S_=81K^WW/2Ge#ZQ'+rcn8YK""
%e<@+DWRS%mY@saL32"p^8YK.deAGaIV[8ZHe^A=[ahtMq6RNWS-=FCEn2-8WUrQ1:Q"'Eiim.bkOS@3Q[M&F.C?.c-Mdj@t9-bh,
%^M='5i.7s[2r\PK2^"22h5!f1,fn2%qI8<<1/7St7%?.%Z>LsZ*m\(A9'KrqU<F]H2OhB.8_@u_9[A[lU*O\0B;?=i&Q;DR0?T8.
%Su%q+Min42Gq[=Q(ZiD?D<AM[;\n\XBgB4s]dS^oimc_]S(*@Z"IWE_W9:iB(Hh#_kXA(]@oG&R2lRT>#r8h2otRe)1Q+CRM9bZ1
%dP].QSF%uT9%;fW5De'?il:=)`,FJN,^44&Snc?mPd=Zg!-*IZSGZZ"&2f@]/P-Fk<hB9])o#'d,5?hnb>lrK5J?`YO.D[h\ppXA
%&q&7+9ilEC82++eF%&#hFJS+9dbC(5PcpF#$BJUJ5Y!IGof\b?6PHT'BQs`@\a`Jpr8U6;+(#\[cdJr@60Dl<CstC-Y;cH\o3XJY
%`K-Xe,sOuQ1HnCVVDf"aTHALKd0G\'mp5d`J#2n-0Lt"`TD1^KeuXV>WD)=uIROD?]\XA(fr&1+.88X,$o@!:gCYL?EIH/VI<m+?
%;gN[ufi#=4h?_<t!e0/jJak@PBe2F?]:\la)85o:YeLUi1j4k>T1u*Y-[iLc';h&<[)'F"OTVKm5E5_SN"KS_AbV)4YgWmnEdPjB
%-Er.J*UMUKT"pXT/+@CIDZ]0J;K!<"'p^&B,8>,<,,V`s^CalpQO!s-hu-%c8^`Orr*uoeMWftjU_sW>K9S>t.iSBTc9fc.Umg,g
%m.%,Xa?H=sV4[MSoDF_^RX4849`N%WkAi^/fVu5>s+'Vm167mf+%dko"oe#LBC33+`DljjXt>C$Q`ZoXb;DmtPXol7%M<X<BJfiV
%0(J+TocZTE1l_;*E\1(>H[>\+29ddXjYD1eE-.pF>rZ$#=)T2Z.(7jqA*k`T`WouoTAFJ>K7D0/WK&M,<;l>5+W=!!4U=,@meYo`
%`J6*B"gX!QSYC,S7d3#T)\_^9U7o>b.K2IRY&p'INforUV0JN'AJ<fhEk2oKr9Gke[3*N@!ldt?P69-/\(tcJVEk+Y<YetV(ZE]W
%L6A9&cDggQ\N(LV\&WuF5;u6"gF%JF!IrFG->us9V447"D:^UFpVUJ5$B10s9bVFhp-h]>a3CHjF<#1T^9`[jd/V[oa^_d=R,a6E
%CmKl9n8hc0Z=ReKEK+fH;`g?ZS4M=D)NCfe3Grr[Z.K@Y3\O^&"?3LTAhICH2*M-n8!R!70,XRtHLdrOLX5\b>D5PI<kM+u%Zp:X
%;@TfL4ieK1iDUm"k(o''&F:*8VdY@N.AV(>gUT^c?G,JKV%>2!/ChIYMq(EIR==UaSJHqsUCiut`b?r>[hCmiL\EMWITg\1A&XJ/
%h,_*VqD"C?a+mFoL?%Z)UY2Wr.fW)-oSJR!$N.nbBimG,bM1_:?E4+'Rg@1Ff1Z@NMg#O+?P7EJL8CZVob/Jg+$LFLN^)-AA+t:/
%%ULhHIb7a]j1h'@)78$pYpHMnp_Jdeg0"75YGp/E/aO1p`Qi$H\_#M.n?4clVl]30M1dWBHI*jKWaT"!i:J?S\LSZYlQ)k3"/FN6
%*&ibWZ;H3M)o<`tU5-nD_6':Do3Bmj0-=pHa4Js2CoiGPla2QBG-fi<ZR]^]Q*Sf?r$NKDJVt12g1XRjgHFH#goR=D-qApRb321H
%M^[:1QHO\+/+$Lj[a0^lKm'fM)'2;.Be2K9hDWg<:;b^;[Q@ouO%!u3HJ>`ak[]\EHD>T=k]R6t7^m[9fLic,Vst?26a"^?*$#m@
%@P_g4p%Z@Od;;qk%e1J#*TnZjZ[KGE33$"lMtJ12p;+NV`XpiK7lP8_#`ZakmuEM`=$"=\9$FoVqcP(Yi+9CH,Q^C;A[IEpOGM;D
%@;*1R([ZtEZZ2<_IbYCUQ#82Ialf%!nm6YHGZ(^#VGX;/9\,'=N't^BeM40ik?kl@VcZ1N(/I;-YL2^-F"^Ct<G`]lX8?>3>Aa-/
%2^n.l84gf)IdlC87Pk$PN8b(r[mmf0Bc;a9,HVLJ1<I',0F-cdHFURs7!?Rph%$ar#QJlumQ\iPC<^5.fI`CYD`g5ID5CQVr7)iQ
%n9)G8G?c>I5-GB6gG#HBc(@J&=?;4&eh8ET2/'U.WclJbI(-^HH5<66Z!G7m+*<Q>)V&jFl(#^"_!M.dj!b4'`u41E+beV01gG?'
%r.0\3jGio]Ct-:KLLctbl[g<TEg8Xqou::f2IZ_@`3n1eUW]0C>pfU)A_oY`b`*=t[B=Noi[:Rt]$.lr-'MR[L:R;@iu6'WWU[N:
%ZW\foaRh.-KP*-bjjl>%nTd^e:+tMa-drcrOC[^3f#U"8\Sh&=?$=I8(H^7(T_hM<FT1NYp4X0p'XQb\4@V+t5BIaYFb<;Y("I3,
%\^MtG4Ua-_-&3:8WhY<LNm<1aY]J@aB!E&Yg.rYuko9:jZ'tTZ2draSls:^7`.sFN3hPV=)\epf0A1+,<.9L_dA\J0?#;-"CNb/=
%_eQSB;KiXXF-q<4U>F@Dd;jZrd*"i0nt_MeE\B&n[tI453A>9_L;tcZ[TDg\)Fs.DG\T;6kZQB0l.S(rl1ROZ]meYq6cf#A`BCU'
%J>&h2IlA=K%\0H2Y7pYC,oQ)^'=h?-m9,-"kK=rUX,6PqaNO1%T%Y5+D)3a%Z0kg1jW#FubQ$B)PDj)QDd]d_o?t$VMBdDC;WYnn
%p`gcpfp6?BoXn:`4Re/DUYTWAc?nfH7E\8jWVDZacI:O%DRCCFN8t1l.Xa?%@Mq%QLHPN.rPZN_dQpu`>3sU.KNm*_cF*K.d>=dX
%==Bpoo\I=HpkV;E]3slchK+EeO[IuJ%jN`^;6euW(e!<A7EMpTd/h4Al8]uHnu1Io:7DlDnkoS'8q0e;F\4KIk*19c*4Vf`!R8at
%I]/Gr+[_Bahfn0;bp_:\7"![S"<p.2d40q5&P$?4^1_Tm5EAXsTl!2[7'CJcmc#;(=8V7#eIkGKC7s=UcZAVrm7oOhCmJj)eS6X,
%Equ6q2MYu#_\8?RP@D#TTm=\]XZGYA,Mg.0fj`Ir=I`[p<%E^RW%DDQhSN:VoI&u^RYd>kj6f!0._'T]!9M8&?6rl7AAEp).OmkZ
%jHFG+T57T/g[?,KIN8$aC[6KCO/0Nrb>8:c0^dQ!k[1"f7ecA^nOL+uY9)_^X0G_#W:kl6N7?5#BHG44_rE@GkZd)7cF[@BXcN%B
%/kj>HYp"U5GWHW'A)3htjha,8?Egt\@'P,bl-tU8X7fY4V.tE)2u6W1iLm]@S>Xl8PA]Y.\TS]/(tqnta&TG7<t0&4;reORYo68P
%)L4Z\poMm>:HpQiE`fZqY&m,YBJ(obRQ=(s-u':$bY*`]j%4U(N?.e(%&WDiZWd3NKj%B,9(ho.4:_SY/?6[$*7L%VFXkpmCus3R
%?%kQ8[!&#JlS.G^EPpLd,-L!%*_%^7WH=;^<8&oV6E,EHhM'@Qg#;bFFn);4/[ZKuM&MF8L79r9:m2StV1-i02\+[K\U;AIA16\X
%g`GjF*ql7g*NaDI]dL3_G4kg_hWINGEN)gS,:@3^(K\en66*/VEO"'.ME1OsPDUA96fUZ1:$+D_!'2EB-(d28h7ZI:f8?^%p<^5]
%N:(UG_;K<^`_!k-.T^,kHIQr56-[tPj'lb:G[.k-gqM4ABr?tAn,r>#Hh<\?/3Xrn+mfuVA+#5b;M!<4H?`W[oQt4'SW7MoIE\@a
%<T8NlgAGW<9*<p]`H'T<YG)e%KcTsJFi'kKZB=_f%I4h8ioC#UVHU+\6A?IkY@uunJDa`hiTZ%&0,^_UF=`duFo3(Ik&efQD=T^T
%]R&*tZZMI!UCi=(3$]Fs1Sa,JO'SmC]u'*0&T&QVs+P.$-`GCa_A`&hTe?/SC\7R/-ftt51Zeu7qoeU]XZOObC6`#j"LaGJSTO1o
%X12"9dNN.^,=h3]`tn"6``5,uWf;3<H(r+dU:n=,0t-[VcO)dQ7AR$.XA4cQf!ooclKDmmFF9p6Q'9KLWIVP,3U7Q995ocCQ>/Y1
%YJcF\=(Pj\*$\^#ja<,Pb&LHr+K.k>3sN]ceE$e]GM?Q/;<!PV5WXm_\qHW:Nik3JWKqOlJ]hPYW:ioYd-:<r"5Zh$j=#EP+\oF+
%Am"rCd\J:dIT;V`E@nJ+X`au'>%<<(46kuga6bOsIPe$r23,/feVb*pMK]-O)uY_V;5nW6$/nO\).dXW>8ZVl.kBJ/3AP\?+?>`/
%eAUmi'[Ok.kcE'Vm189k/rY4Xo7mPQq+:1`@>B9S'MkFm(tB&!qF9Sl1;gZ/J[$k`;e8O("nI!Ff:WmKO!C![1EjH]i:-ph*-V_.
%e=_I?dk_K_/AA(;caN:BrXPuU@I#3*o52-a6_2".*[l^#`HkZGEt#+eJMn*_eIGDJ\("F5?#k([Lu/!9(K6YH=map++lee5q\][]
%i+n-N=QZT)R>W09fWJ8e*9#;]W?g9f#jb#p0OVJY.i^u`5-^ZOeV>Ks(7V>_V\3>'lpaq@2X6:M=fYCElgn1`h;3L@e>"B&QpA%j
%TqG6Nke:V9Z.GpTHF]-":@pF7moL[J-%S`ScFo*Q_r[Xdk%218>K(3\kO)V2X+QOsftPUoLj%-\02-oL@B3;\Kf>.P'Fm/L./i;'
%nU&?9o1o/S<H2KZ(%$9DAMZ;cC`5oN_"=3;b:pP\hR=Eeo[D-VV]M-M8*Ef4SZ1ZV=0ONm7_7A7-BWbm]>t]q2)h]lqgp19*=:Z;
%V_5t+.1NsFZS1@PoXEA7mq^$eMFL`Y2W=41%lEZ5@W@pj6on&g+,o+7ZCqs+RYnafW$c<"%`>P.EMCh$NMre4iC&<.$I1B$?n/0)
%R*i(A[O:omp+K9^2;c1M7gBrt.JON;`ZpL-?oQ@8bPG1bW-N]A^"!u.[4`aoFJk1)HmiolnZhb\-JF\s)hU#2hRpNhLlSJoPo8<[
%NS(Ds6FBN%-MZ41T?+=r?SCDoi<,)2;uB>bOK[[?pqcUT<0!9YR%3j[)KRlILmH8YWCtH:Uk<\r]@<i;a$iu1C1r+$89UsJ,2XrS
%$Ek@O+@G]X4FU38s%9q`_^gqh4gRck`HFHLI$N8^HG7f8E.mO_0q+W.TD8E!K7TWV;8]RiQX=Ik&%]gB2&@2(c9@E?$';s2qHh#0
%9)YdNa8#(U;7XiZPo9!2]p`PLpP4QJ'f)O(SJXtcj<Ce\,^o?'YOJbcjqE&Y$^X'c[!+:BIl1EmM2aGh0\]Cq^)FN1o9'L%pTRoa
%LhITd41_ZWJ00$Drj]n1r'qId$a^J331ltkKj14ua,M1mn\WbO<o^^BfdZn/HX<Y7L_F8g'4]"^G<@:<f@ho'HRV$%3Ljo\?KNa)
%G*ri>E`2.uAZg5>EOC;(i!c?L1bqYT$T(o!N'<olS<*(UZ<lFV8pJ:,6haJqQ/q@l.ug&kV8Cs+H:j_Y%ga5(I@_--18A;u6![`V
%Vd`NReZ?Ee.^VDR#2;Kp,/sjhiC2$'`T'YlCT,&$<O(@c9/<7e^8-9C**g2e#E,]U:!%W8W2h%m`D1Z&eu]tEMj<QE%urAjh%#h\
%%u6Sm/pI,UU`@BlFmJ45Bn2A=CbO%R0oL3Or"8@?X.9TgE-`ok]VqZ4oE,a6.Wd51/"k.\_-V&,361otEGW9e+2tRO1,/T2i'YCk
%hFrO(^C(`!O0dR.Ue7m^!CWpSmJ=AEVkjl7[C;nhf:`UVZWOupi]>jSHVj/g19G.<d8&-qg$NY6c-^FPr#"JukK1no+."nB5.\L8
%I(0$t^@uXoZe='4SZSI6D`oW+>$ek6XV=_$]ADkOH10&4k3K.i]?ZVJSPT!(2d>+$/EFdQ^L0(I*Reif^?&+Vc+BJ2?W%Cn2jTs#
%c1Z4`9$;%Rn(_YHURlT`Vb^[eCi25k6+6@JE@I5Hh*8TWekZ$(/LY[oKf/[7X-<GS3TGKh=\dQe4)Nu8cIpWUmnU?RF7-ceI&l+R
%9?ZBkb\+s@B=f[H'D^e@a%ts;D!K:,X2`2^IGWa=07;V]CSto?\`JN_@<&>q6H_'r$=?B?F!mU;b"QraqJP[GF4SI)aUcr&7D@X%
%Q)pPFRi>/k^JtrpVVBcWVdCA7mb[]nG'WscB#Xdn2gqoNVlhrJY#t,?1;UH=V,G%g^08aP3CiBSklpt@;Wbshf;6aYrRZa>fR<Pi
%c*KKEl_RML*:G@Mq3.@*[BsMJ(1jOepZl#EbHl5d]("e[8o*Zi2na9OmlM)*Ydsc"bbesaof&L%e+M/fg<ubPoi5/loV`tqCAYqE
%[n>E+deT?^S$J9*ep]uNPP7H?ei(]eQ0`7J%b]Qa[(*C]Au]mTVJpdpZ`okRhRN/8^Dsb.;KZmSUNbn+bVm0dD7h<I>SG/%54cFJ
%lO/BoA+/@s*6Uk@XnSh*;E`<q5O_]1K>&f'R+CF^]=HJO`kB6kV%5./j5GVD4:;[nA^'2hgCF7goXM-!heg$N5?HmObPA>V2Xt*i
%'*l9.QQAB:08nVLdmn_Y[uWGubMQWRiR@/\R-&a`EMI)Y<9@>%$_R<#YSJ>J@oVYGbe9:`*AP+HJin%c&)OcnqCqY\.<i)or-Q.[
%]RMm#*P['2nMGI^3.6$PlD41BQ?L`4_?LCDjlcA^kb@X'r4B..\ihMljrNC20B`;er+`8)1ci#<NSMWA^<@k!H&E3!*oC+MX%isW
%dk^_DC["R5H2"DEfkR(kG1Lio52fH2h+Gkc'7@=&P\C8-L8d1hHCXU>WRTm9.U$G4ktuZ0OK2P&o9m3[^UD@DRcq##gt5jrm+b>X
%53m;D;KM%YA#,/\s'=q+@#**Chc#g40WDY\6!.7%f6iZCoCbE0O3NZ>\ZjUf2T*3ulb/i;MY+upZ^!_#AhhVKXF)TbA=oc?gYZO=
%CB8RXrk\?_oCU3ZRGC4'jI'pic]?8'Cq9822<fp<fZI1,7rS9gH_$]t+#6V&mlVNB">*"<#[c`&c5/fNldZ3(NGY8g]kq$0n*mh"
%]j'o@2/aQA_:#pd@YcAsg[3!P[aM='X?'EHmYM0m[\*9`=qB6QeOZS3++VIVQQA<en17c9oFpIGRm(-1H+;Bb.bE)R?_?F\.utGR
%C4_ZH:VHDZDW>j1c/EiNOS<+qULc?Lbl"@[7@O&6`X>YRkH2FmKC9$?deWWad0_EQeY5sjpHIHk+^Op-IX8c_Hl*t"Wq_fXiI+5a
%T05lET>*UhdkWY;*Xt*_4I#SHAp:s2=p$,4iP"#<qYlf^PH\CB*'LfS`e]]XY(n9+md\Z%&IW!^q1.R`?2fr0l;f.EHrt\_KREHY
%7/YlsV8nWZRm0Uh/8s+GQ---_OLp2iLUlToT<8kdo'QVZPd*5s=BFMnG;g<neRrJ$kOl)5W9[6mG8niiS)[MZp[nDJI_@)2Ie;:,
%GO',bn",p*ET)ar=8!-CK=g#]r$h[:lDIk`Zja`QrdugY$iMTXj"JB1ROu2bCjEbVma7Y-J7%UF>:Fe%4(8`8?I:<2ZIW'"-V]r@
%c</8J=Y.7@=^J"?);<j5+i*D+Aac0nL,Z'>Fg1K4Q24m6n`;+[IEW(.[`:KLVE3WMHCo*E&6]8?Sj9DBM<J>b.2!2/%^F4Y&:)7<
%Lng%*$af/BC4.Y#`o'Rmn?Pid*[*If#j`!aj4TeXme?>7QT`JSNn2@d:l*I*BjS$Y5*jLg=5\Mt'tqdKBUOP.:Lb&6#O(jEEW>fY
%"oR@qp\I6$()XpW;WMfF48c);-#AO<m%_i>&F@7)61-hM1AF51eDile.,)5#EjN66\t!udF7?\q"Wonl9p"c&9$:VWHT\[Mf"gC)
%[JJO7i,lC*5*nJ$McPK?o1_oKE$FRLH7XCp)<hN"T?N`-$A1`q_Dq9l<hVNqqD!HHHd]hQ]L!2R@VA2'0N=)@0.4SIq!S=&N?0ll
%p=.A$blVVfUU[<OCl\fXR9>@)JCBR^ckOK3pR$\/@<FIiS,A[6qU!G@2Z74`*7X#)a1NG@)spn&L6jX*@S<QH'Tiq'I',H=a$J`3
%3'YKREI@g='T)!Qg/q_#a2di3H&&2Qs,=>#KBL[0P<'lQo$(dYN+K(5>u0p]S3A;:pj$r%U88CX4Km3bf(mn6ee)nT]BI3RW:$^?
%NP\QUnDWN@\T_g<s5r.daOIBJmCPId4CZ%JE*sJ(b$g8"Z,fL=MT(`Z5k3CrN-Cn!e-@'c7=VZQDbI6_fI<W`o=N=.DAbiVM$"[2
%n][6nQ/rZ,p\`-W-b`::-qs*]%pl.E3nq(?da%.;i29RYVQ^ph1nuI4s$8kW<%Dd74T(e"REb*kSA<hYD('.RZT*bVbTW/8V:YSa
%&U\o5T6o.8piY(+C%plTmI^"ZY<M0`]j<\UC;10]g-sif1?;Sc9(aC!e>PnCSk[O`:E&J*2CW!_%\MoZ?F:;E.si@p9Cq&I.Q4NM
%m>jWN)`pjunQVaG/Rh\5SB;5P9><%=^:c\P<k`j[lR0)o;t@jK>""Rp?Ql"]^YHU/=8IrIp:1^6T.eL`:Z<L#->=n#DrMm'Rq/3h
%'F/moH[1Rj\^QfK:Xf`Tm)NJTT6toKHa`Q1]39LXBMG*8d0W*IT2Yp/dl@_"WmHga#:R(UP`L>q[I57&Z(i.C1MCSP.KlJW/k//$
%*\39>Mo+?"lC3701)R%0N\i^+T4\J,nl"H4dGl@Yoj45#c6)*NFILj&G),7/FmHlA;,L?#lIT+JPLiI/[E0>Oo1B]W\qW'NPQq#j
%EUTF$J9YB70j4;Bq;Il2^>Af<(4r"$/?lC,GP.^a90:HTYP'j\S+j<,3\Sm/^Q<p;io!NSpRiLSd-(5E4VJ6PhEB^OGFfm8qm$*=
%\jUp*^QUhXFDGaXn^c)b`*]-8FG?dXRIf5\MF7)4qSKk!,ght&\Ti4S5DU/fQbkH.b-e5U;tC&Is)<7\juQ0$0PYk*/!l8A\=%ZN
%o]/a:HaLY`gg#@.r\d3XB=A*8K(VeZCmDc_ffX#+c.BFVr]*)Em"u@5GG79GEn9[L8I)Fi^X=lJE2sA%mJKi13o4+kI6SIinHl[N
%Hi9bPpFUgg](d>$?mEEe2%-$7D;*CdQ(G-":;-k]6K@,^]kmA]ou&gR'a")>P&0lpiYXBc?M\!rfEi)b@a)u,Ua3u="%b]T=Eq&O
%>qb9o%q=enqp,d+:3f9K!kD'sT8:b('9hM$cI#c_dV%B@C;7Ee\b>%;H-^(CHFF:TXA3XG$a)>$2_)AgGO(_18ak]OelL,604.#q
%[bfqCmZCPJD]cMDrZY9fq:H_W7:%sAQX0Ijd<`Qu?[Cq,`:At;mK5CnGOKqROmZP&qn9:ao(;^!F7!7A+Z>fF#qG0N*4#t/=FT^%
%jiM#P>`UZWo-LkEU,2_OSdV#@GM'b$md.15!%`0:%sMsd[ijR-G7Mai4h7%H1@(QR-\o6rr,Q;VRs$a>+7l>Bl@U658gd\9(X>Ua
%#.J/jou3EmiQ`d'1#Qtb]<M6n`Qct+cqWurYC9fYI.:"ri86_W]0+4q4^'//fm-+PbGWsGU\1tDiDmkWmkm/gdp!sKpEufAru$iu
%S+_o4V^^rrRq3&(PP,OUIU=NT2M)0$+'?QFgS-nuce`-O030jYRX)b_oA]\#pNZ)eqp"eG?sQ/q&*7fZJ(8dgooQS%q=sj6&1'7W
%<cVgAiI2phHKXP1>g^\nrB%_BQG6KZf3Z1kC(A\7joR2UZ/njIh+&*LghqH<E:`r<K;`AL['Q#f]C!kN_EuXsik=*h^<"$6ddnG9
%>AR82+*625rOn0]<cfsarg,^UaHDpo$B*6%li^*K'ft&1m\RN;V23s!HgB#HVGD61G<S*/XdR=pT2^)\@CDB(!QP#Hn_iiP&X[qj
%J%YWO3EU)p)tOU/h*!/+h78;3RZLeNPlL<V;rU417D`tco#I/RMefptp;cgaiOrFtr:4C12t)dPZ"`(I;9GYhc(":%9,QdTSO,75
%RG>j-m<=9>ntFg]HE-oJkNVnQ=pFl%Jb(`t,;_4=W$1N-djUT<,%@MV/+r#AT%it[VD.;Wq<#]Wk1`S;DVc<e8!l<Ohg(N-hVWe\
%o[,&Lr[;#/2?W/Xs)2;>`RLeZomHW?`?tCM>QDI^#41A+jD,Q&N9r\@5(!Y4'<G@9XVW[,&)Qbtda-fTjVX+%4b$>SQ#"5,^tohu
%l+]>Fm;$4.OrIcSgmH1V8his40"kqGA"=AtX6,Ea<Yg:XYH<dN\lukn=kt78iVMWhMsT`,h"0\JX3,u,Y7=S?H0]"GYa4.\*?FD!
%75>"$X59U<qJjMZBY%H..TR?<BVXkL"!Z+TI43ZGmeQSDm#W'$/9gjF(H0O`&KQ8t\8^cmZ:/d$CKqGWOs'WP$0)]6n(D[Ho5O5N
%$:*^Hr"9b*2A\h2bk8j4FtF`)I<on2OPAMQ-nI1qdPGgZdnMpq_<D?(G)[2'pK]F)9r@$gSSXaDSo/GIU`PIs#".fq+m8f\L?.`[
%P'6"Nm4;jUk82mnT:o)_JL[h>bA8h]i,^"a??q%B1']lYn_iJikI@05mQW3HY^W0]S@s<kTiI/I#GlT7A?QR<!UfEA&O(5$"6UtN
%`Ik9g#Wrm255W8WkM=ecc;*=SZ,#L-G#<AOe_Am(V-]a1`0g;(\(iAoI'Dt"CZI$CUp4(a''ac[PhtW0UA+$I?r/hEY';,tlcZb-
%K_cMPGdDcq=F@gt`/g>^p!os%pn5dTm;__c`K\6OI@@.kp:nQdW6M57/W+t'_oo^#2i;YSe]YYu62.dsk^g7GgifgJ-6nhU+Xen4
%=1uK&h1ad-YMeNr`dW*?]Q7`XR7E9l+#I"kq;]KDQ(`1\\`jVf]_D,@^A)jJG,D]iDhQC'3@%C,]VFMi`7biYVWperQFVMu%*Zg*
%S`S=UhoR,#IM(&)hcfd3(%-46@E.PD-lAY.4;PO"OP6F)l84d0B"i]JgWXN$?f=Y$F3bU<$`NQ4X'/W:>-,!LPjdD^^(i4_d]_IE
%jkOS][rnSWmTWH$H?`D@L<c*"<a7XLlZUM>O'<Qu,_Om<dc&o<0?;ncf.Wj&::#;L![$FWoI.rU0;E)\iY=0`bk$m+0&A2B:@:".
%Gb+#g7tm^QC,NFnjid3DSOiXO>l1gKJ-+?NnCcG)l8CX/:,2.k^Y]<u\'GY2V#@E=#FuIflYRHqD71P!]:F<Jm.9sV\FJ\S^nH1!
%aC_&$8X"O*p"#.1hFi0sEhL,N'S&>p=ubep?7B^I%hAn\N-uKo$6&WZ>&UR6q6])Nf%(*+n5K>]0`<nRlJAT62-F:=%CmHAeYTX=
%5*e='#Zk'5B-0(H(XdZ"c*cAN[kX7BoXsWnYb*FWMs%X+Q.;&QYk)<&_o['C/.eX7H.2l:r]pSIWgNK];R_cJfhtH/Z+'Hn*e&OK
%>0(j8>]"mXDTMdA>bRbG-&[*E+EP92Z(cZ4Jb_:WGtRr$TR0f/\#0YYqs&@EI8F%jQe-8U1"E6f4hRQ3XNC2t^#.K<l95.Gi4RAT
%S?i6m1\WhOo#mX]\*.j0lW87t?=]-^<TqS\cZ7(p_L3'/a%s2$+#Ug=_X*-,-)B-E,A^q5Eq'`UoTd96YP%2F'Cq!OOMZJG4VNnN
%?S-H:<?'f\^%*Y0m-EcMK!e.sorJ&Qgp:34k/G/2=ASD1pQIEQM8I,i>e=hCDW0H-dsCGXnTfs)9d:>/>4ZBSUm)D!\uFhYo^`S(
%quIQuPJd?HWI+N#s73.;(td$XedG!kDq5+.lqMShDd9O,nQES<:X9CB;:=W=7aBER[aL0(m8Z!J]Zbf,]Y>+AYF[4GHWGO#gW+dd
%fR?8LnS[=bejA=ElqK-NU'U&Oh,NgqdN(9\FL?0K?TMLG,H?$`@C=kaE;E)oi\guRjIbPrqNmIbqCjF\-o*AQ'Y_/1?B0+P*>\Jj
%<"mrCl1N<oc`].1^3s\V5+d9>l%A9`C,?moNP.(R@V(0'*cP!JKmR#cc$nhUlINWK]c<X<XE*SHY.XcWo!_XTX(V*GnSW=B[RL(A
%MMEs!XDI"La8>\/LSaH"oBo5A9tks)qp;'^TluoWJ_.qH8@L3RpA[;DG7b>Y.d$N<*sR$'LDpBFr-#8Iloc8!I7,G-$L.DFj+k@G
%I0!^INdeo2@p^"tSb@R4@2\?AdL3g$?s(9)K^7&./tb;HJ,Z]T`TRQH:7]!2e#gooYOd(RSMSiUBWOPO4JKZqHOjPl7R"GKpL:e7
%[.+^]9:oa@iIZW35l^&o5>3;]?gmsqC?[)%^VhdZ+arhnIm'QNh[&qB@@>-<naWr"PlINip](0/naQd>r6:;@eEZ?4q6-@G?S;AP
%#7g[*a(::9qVpg%Su#:B:8?RQD>SlmVG,1=4I^L*d"YGLmfkNCRmuNS41$"eAU:N<ML](bG(AiE^e7Pk&fC(P(unhO9Eh<##"R'o
%NfbcMT-\R//?Y6nL%KYb'9(+FR(=DSaq6Q!g.Vf'E-r0U8]UCA[@-UL1JF$rQLl.gDgXVXQ=mi\7L(+/5r_cj<0hC&#bnE^cj[<J
%W0ae1dl/7"8."Na!4aQ)V)9:F:KaPB(!*W^gW7gN"LW*q"k6*IY&3bqa)s7q-]WiGPj\omPgm)Qe4TN;M1O]5WPJ(M&]3+]!',.T
%*=taEKUUr"Fe'4PMEM>+,s@_%3drRJ"SOB7b-<LJXH[?Y![)fEYGT+CF@`QRZ%uth!h.8>OQAP,1;/o`HOaEKGWo.^C!V?KnXaTi
%aMIY?!ji:CLTkmb4S:sr4k&PA5JWjbU9,qj=[BR.N`;?+(6R#WFF;O0!2;8,EN'+`?/>mD@]F!6>1U/OZl+tJ,^RoV?t%Jd>-nsl
%V)Jme[3T`*XakQ!Rd9d"H7?]a0^KoQ"[QNFOQ2FEfE!!^^nd]?".-AAXUE\pY/^[@7;-*3+J2%/+@9=(ajUhr(e"6XV2'0oFenF!
%TFMKS*8?H<NnTA##qH5>F_PT?!,;a,/,E&H7KDk;KC"he`-crL+6q4EM,jUJf@;!F1)_Km0[PdE=[MMDNZmn?"XV!^COHg!&P*?d
%8[*$'R,/2:(^TI([$ns%m14kL1/UVT!_J=k#8(b(VS9JLondgECW*)kBN&g,`n-28Hu4s#M.HkqP,&@I2Ln>40YX\thB74[31co7
%on^mED`!QOhBaN>;L0sfjII,cVPGYN&/G@e)H3gucCojn):\dPc/_4G#-L9BYXotRNZKV`a,6OU8YQu!5bqonB"P"@P[<_Is(9Ds
%8WOctHkHQ`)&j2#JQoX@Q9O.kgC)1NL5.7#*'nsHRW?@oVRNBN=SWQY[;8K'?!7LVe#.UCO@KCUOgr8d5`3G[PlWdW>;"t>P#'-]
%9"rkJM1@n1?`(%ALs@2@'Vpd]fJQW#-k`!`M&V"ndQNUbH^88#SOHMs\tgraO!g_RLsI'hN5C3JZ7We@<[DVC\5IsH\$QY9,Rt,W
%f-8HBOAG0mODRT!nf\/:Om1j7$^nj@jodKJ73ME8D(pNX#4rdtVF?Haq_5k+C:C!!CmZj[Os\e,&,7l8M!d#hqLPD,VJE4i/][p"
%UsE:P^e[O2$%PQDH`Sr-Rc!-U+_4Jb4bChl$l%29oL\)+!HU+dpoX[\2?>+t:!GpD%7*Q/n/<M4"h]RY8cSu;4\_f?O=*1"X/nQ=
%WEuF!"kcUKC8ci=+>lpJ=^UL3d;tuI8aC+&fki$n`98i.+O\6WPu,Wa'UYu5"3?+)O_E4+Rk37rU<P3:.3W)*TV.T>QGSrh69T`K
%mf"B$-cB+_dgE<;=I+IImuN#F_?N^;_6c'j0S%I*df9pkMgD2]R/O:A%hhLNP*38O#85GKChWrO4/D(WI&-hoFC@NV?U7DIQEjdY
%_:m@RP"NU!G"SGr!68Y<BTn`:X_9([&/!#/+H%]A'%3R%!-22i9mB[0g+EIZ=$rOoe)MDWOi1rB@0_HOj;dZ<8ZHXbeV?jEUs5%+
%d`Dd6,]jMa?4p;jA<Ae/=#e?U&sSWN<,?3`qUr)GE3kpg"c4[Zi$SZ9!g/86QK9t<q\'"O(r6Ar>V.oV6lmK*A\ip>5UqOj-)bDH
%WW_uh?X9]`J8N-1+_sZ@>Dd[Ldt7"VMBa8.^8$qrGpYop&p5ks*<dX$_RcODfE=GI#oP-`Oi3D`e#L<<%4%3HZA9+.K#WEM-'qk4
%#+#rA`h#jN4M;uNe"S0+4O?\p&?S5;))0I3%R!JTKF,UL[2LAi&-nCcngu#L^6TBq!+"PeN`Q2,1q]gn9'C8BA7VRYaS*WAHn!=[
%6mi7e4;q-s?ci_6/gXTKZP8*b+hPP?#$QSS5U?+3=ZTYX0b9pb@^lipP6sYMRrGU:2lR#gn14)5Ojdn'KFL0qJS3*9@`NR;`2g8H
%$X3-'"JSgrSe28R3Bs*e_@Q:s7=0?d!3V%COkcB`OG/iUQ(&:1+["X\;!HAQg(M%A'uVJ^LVaW=gF<4/9e&Vs6o)k3!N<s!86N3%
%^^qK[m?<QPq5?$9e=)5eUb8c_63o,nf_R'/X>N8'o^mmkX3E,LMAu^g@3u%h(`AG&;`Kjr='LDMYj;oe/D)`7EWE9*)<mZ-OI-fG
%E#Vk$$)T$,aME\2CIt$j>O`oJBJNC0L9ZN@#9^-0*jQZbliI4JYEgJi8GfLj)g1g.>-=pGH0Tb[3$r#EH%l)udVW=O`t:.)\4OMP
%&0I=;VQ"aQV.N-I'\^k[R):foC_o(r3qAPac$$ha/!.ZkM*RAFW\DSK](%Ye;c#!tY`[=SosGQj.40Wo]n-7!C-1Zp'a*'AoGup/
%EoXP1#X%banVhD/BO)OMeqNrS2%S?tD$U&qRZ>`B4U[/Wj.U,pQ/noei>">dVA&d;;Z!q(FKJ"0"u!tS/U]2g']i3M]bL;s8-7`L
%\5%-,P/\+?Q5_Oh5^qc/^p-6XbKp6,%&s+h+\NC.3KbU]^8e4L[7D.e_h;qOp#[gXDLb8TBbW,&1&Ol&oea#(8LTA=nIQ.3&Ro],
%aWm\sn29HHO!1+8r5s=hEA?,bOI4?kP0a23LYctU`B#fZ*+OXhXaKcmJ,U#sM[tbjD[5/Mhq`n--^^CmXUGK!CVrsbZlqA_A-oCK
%5U8Y0@6ng'k&ZPEf]E1t3dcMh_C3h9!')Z9'*=:6EeZiTRopEFTJl]]@VlGV;Ts29qN+nh5(Uo>)TUu%/969p#h0\`%ZA@0D+=WJ
%QQ63RJYGp^#2bV(PrK7f%A)EFYiZji#F3+tfS8@me;CCsOR"DFWH[&H]V^3";t-19>6?"AS->uT!2Tsl2M^p_cSiXp<i(Eoda?(&
%n]<SKg+gQaI!*_*b0XI/+M5JJ,>nt/M;SBPdclB$:o^ahjH/.%AL-41OG:2G0=)-T.`Z/WDaCF.9QT/@dmLq^e@SP'<:DUIYcd>G
%7j+l?XXU)00[PPi'Ff_d#DflkC(NCJ]IpK/JZ15Q,bNdUC52(EUoe(9"R.BX_,qdIlO$$s>$.PNd)Mqdf0Ok(&4?d1`J8F]),(ka
%A6]0N9G-qk$FpRR_80-`,D%rWT9#ZD;om'Wp>BqmLL]ih87E>[;TQ*=l@_:GAn=Tg'9[76ZaCBI#kB"W@Ib+>3+1K#W6\C^-n/BS
%S3^Hg7Ad/VCp5qQI3LS'\!H/[%T9O6$VuX;[LL\S.TqihiWP2EZ2hu#`'?jh==u[PE@B>-M1OUa5_I/C'#);lOsrY2as/!nQ^'Hq
%HYf)]2ebHANWLYG?U5rZ9,rU%8i`hi.%)BRU_?CGY(IB3>oS=NJs?NZ7=Z@N&Xe=)@tl6\8dYoY6LL&n@L&kqdN3B>m&d+Mm6aH@
%8EL!7YW*Fb!>9)I_Ni=`/W,Ot`+D<N1'FOP+Zht](*sJ*!?VMs"L>s5+Q$5C%RAuP#n'peN=>%a:LM3iX*rh2fc'F.e?YmbKn?SP
%JR$QaBTP9F(l0"HY+HK&#YL[<I"*^+Emg1]*29M@_=\r#ILN$+SjIo[50sNj\p>JD9BHj6`DIc,$ad3ZM4o<F/ST*#b!+m<[0,YI
%MJbtiqT(^cE=g]dfF?TShE^XjIF$K&&6F/[+:0eQj"g\Ci<``,TXNdc%;9<.#`1gG+QW@Q8gf5r3-9<%%M;ED*dh='6&4Wc58FLs
%cSc7ZQ7">A##^,l%LPK)Zo:[0&<)r+<;<"aAq[\N;,GOl>:r$T:4aYHB1k/nMK/20PX5VsVN3k45YFE$_P/21'".j1))'0f@LJD#
%\IK*N^k6*35_<UCkRn+D1SJ'f5q#/R6rAW]8l7[kfF,.`^'aB9iddP$'s=5V[;N41G)3aZE+-k9Npp]$\j:uA0dnH,H3EFtJY_AF
%,fr4A@h/d\^l_c.66a\/LH(+`>n4AR5WWL2:2_Ha7Y,Vtd<ZCXZT1R,\M9b:]S7ApW"8)Ff7QM]lH^,\r$$G'l%<H+NQY&UWW9R9
%Q-ntHElg',:cQ-jeUe]_4J2.p^(-NZE@@&8F?O[PPK&4G8.^?`O0(\XMK3N0aY;J"R>@(I2Q+KX,RbHGFXU>05t#'/PY$g";$.qH
%#4"t!KF\VFP0I%_JHnXUKZ(;S9pUhs0p]cn!>/"mW6%=!K+j(j8R_`+?3qb8/!8KTV'`LTaC/;MKd[FW'4)aXHI@%%]M):(*6dLh
%oXEJ96:2+@\5pZU,PMTR'$d[[U[Ytccp#/G^$5hP43ZDK6Mh&&NoCnB]hU>>J<2B0lV,#GS65ubaA'7G2IjQr25,=M5Q#^5mZ*,;
%TFKTjF=$3_Jrq4PD5DG94TS-]ONiJ/!(f]cEP<b$*ATtt;ETuYQQcklP_QV;DaU9DShL`\=VfKs]EQMpZ@YPB,FF-43;G&W@WA[q
%eji(2&%#'gN^.PkO[UVo&HcHEA?V*JmR'ioo2mi2ed%3iLl]'2<C[H')[2iTTf+A>%"eK\Lh"7?@4&Aris$p10_[S`N6)MpN];"M
%0S+7QJ.rknP<B1'kp'T@@PG=LaRTprCT/Kf+_O14:CIFB6&)0oOc+O_+'VGAJ0/Ni^5*4bb/q&U@Nfp#%8Pu!9d9aWngpS\CcrS[
%C.aUM>k!D]ET"Oi1Y\-K#kL'H"369bKo*C9P&_bG(I0U8D/jBG:&m2+E'`K#5$]9;N=o;En8X1J=pO`c<WAjs[DJ2><E(<[*Eccl
%7l\TgGm`cA+,c55h*W;qE\;81,]&`*O$VaGEM1sbK%%(4^lV"s>^Ej:@4Rp9kUO+O:)>mg@o8KUg'U/5_\p-OKLX]WUY>kX4P($s
%!8Rg]cina*&O\KL.L;FoWKN6[RTN&[aRpN4/6k]@+GtbZT`LIZr_j6EHkc_rF\oO;OL%b@:D@65@j'?%Kj,!_>jOdAomu3%OcL\#
%KM7/6OGCo6.'>]XS>(H.:`6.55.bd/-lho5W][mYd"hPpY,X6m#ce/#O;3O#jqbU03/(2%I1QH<;YH52MkE8pOKPEiFubK,@394n
%:d2>G!Xj%sSr,ldeGKI0-.&RL/%oR&BMg+bO'"CH6AjZ#H]CBPgD$k1of+VAblOcJ!Acgqaq5LOEc'@<-u!XB#,l7@rW8jF!_Bdf
%]OHsd&&j&i3`2,t'jT(CpsFY5,ZA>KU"Ipb!K1s*OalCa"nF0_)/6jClpS)YS/qo\kbQTY@isuL^Dor[%[Z!JmX[<*EBqI%&BGEm
%VB)'5haE%<Ji:WJ=XY?tGcqBY,TEC?"Bd##5S/]S8n)2UUl"49de/Fh5WK>a51"Q\AfS.T*,UV9*7?+2AE's:DH3CW:hf)Pa@<-q
%+)N+B,mBWLl<13O@D,6D(]bKo:3Z@RF=FmL5m_!ccUVk)5$&0@?S_n.@/if!+dk;C+CLtI.4nPIAOK8&n:W2FA%p:,,RRDE*,%=+
%EM=@!C4&8tp.5@^*`S('[pC7t!RO>N\u2/[T_.8o,<f#b('B^p6**_6>*W)>(b&%"N2@r&i@@*2!p,WN4)%p!NQ4H:@<:...#:9"
%Kp0<DUO.iFQ-HR2YAuIp;9UJ6A#cfN"S/@Sd5qn-PP[m0_"U5495&LU;)\O9X%j\bTZLd_W!.JuYpQG$TfdhSo)mQI"I-?F(m?KV
%=$ZnC)1o)Y^6/bBp@p3&`#R[b0Up\p0cV,uL-X4L4$`Wd%Oijek1Zo',NoJLLc0$N'^)0CiulF?WoD$l'%A8KOeZAU=[f#>hA<8+
%QEB]@?HU4e<F@l2fV:,VR<5FXXmJ%O^+NGF4hgo,1CZ98d_B@&o"g9qC8iJa4664CmpM;<OG:\X@S-tpiB=[lX7&o6IrKWaFGpK^
%N!.C')h]E8(>Ps`&m@VBZ;n:Ud:%Tj'FB$<6j%1nbk$ooF>9K9B5sFdcn,5$DL9G30o(!]IUC'^i(@OD)<en`5Rs4Xe3b,U*G$iY
%SgJ\g_L#@P-"M^G/u8pdlA"X\5X)+A";uP=V#fYFggGg.iLR4r9*bXp`^@*YENQ5:*=.<r((+phK)u2`KT\k2:&qpsJM[g6d%$+q
%N>XA8%*E@IAo?fE8CX>UN%;RIT@dCgcl@!B5&f/a3&'[N#bjd%r?.V.74FW4bXCKAr=\aWU,d`3K>Q0F\^70$gMk'V$8R=$9%.aq
%LHAUkK7]EqpeoXML1hF<E"%?XY&7_7!H"XXD(Hflem^iR9fNUipd?F_e8Ca$j3*?)<Tc'6d-'I&_u9gUW)/A)cV6<VRi#Sk/>8LP
%":PZN)A.stW:pRFCtm[^OnkhmRmqCXSdgFVCFM@hQT^J$K3'1CLd'PuE&n/q#$BaCOt6gbPq'U!&ZK^\Ng_`u5nF9JS:3l=?t/F5
%"&B(15'dc>ko["hEP]cV;DBQDU&3?NBY`SC""Kf,#t,o]k9>140FXKg*29.i%E__UNA5im<],0]MNVl_;^?>d+U%hhZT5E<3?k2G
%_#7Z/[Le6f(#H2'UeIaU$^Tgm3gV%m5ac2U'>\A%Ygkai5Y"%LKR=98dDV!(9FE#7@M(SH6<.Gf?aYpB+A_\+=\MP`HVB:8ang61
%M6k#3Nq1IH(2<276D#>>-VcHA&^7@RSEiWn%5JJKGJW$'n:5aWMI%5K9Rs:L$'*U?=4lFSK#HAA7m7QP>"AfPo>>`#<^cR1fpuQM
%KlA,6=n]9)5tlh8g^3=,Lg<JjW(g4/#GM5gE6g/"S&e('46pqeWs]/;24^K&jK^Z+;?/Eo4<X(#@$sJJa61@\Fia%;kSn\qYsLMe
%W=-U6H-XqIbs@nl\COP`<?;dg5-"p-\"XE98ZHJ#^f?g7&=Sh+^5A-TOfH8eN5oL9#,3YDs*-#d+H\qDPfN1!Y-JG4Wbhe!E?hOF
%6DBN<J].YJ"H@(r*ghhSCln^A]dOF;\^ZgGDua299sCZ"Z[hs9nUU0G0ZM(u`c113aK.!>r$@2aK,,caOqRFPjgC6/$>%go;th'#
%Yqj\D*1nV\K-7"e\*BY'b(iRpo]2;f[bG%8ZIQs"Ye?#-QVU+lh1kO#!>eS:,):EErfDBRgTZgM<@sYc)"QQt,a$;-fI=Cq=esG=
%Y(6V"0.@+#^rTTc>CpQXO$OnHA62`aPG2>@58#!2>T>&EQ$O9;7DR:$!"+3U.-B_'=Pa4>1SRHF0Bg6#jZY7b"`UbVDq^07o6g_h
%=0fJj>8/&]@I5;OK)6XG27R-&+GmlDhB%cAOlKn4XGI6"LG=SD7L#GcAKF+pD?d\HMA-9a7&(7WIqX9:e1ftQ&=O_1a`?NRQU3De
%DR6P]bX"XKR\A.Ea9&"M7M+)o,7qNkWh]q=iZb!57Z%dTSBiQS&3;?FDlAXUH<1,.;)ga/jjE6K.E_87"8>]pL]VJ2&tBF#3O]=\
%8<udq4.M2G3[V(2CPQIEh9R>S\5h&?-s(Ga0$,SH`H4ii#p@e\Us^R7(AVWX8_nH%TqFug&RHQ3!`a8MB#&D+$So>QS5+*dpsi*@
%^5m&8V!$AD__!O(@=W5.C'hp\bmoaQ[<27YJ@7S6W][pBT.Lg)n'Fto(m#?_:Dc+6d5ErGE]jaY*_S*LTs^F!Hp4ojBBXeCTLp;!
%O/r-@`eA:q5bYc\&^Nh!3@tcH'"UN!*%)FROmM.DX3#dkWZ'gj\l4eT/61!V`p]jUdmH5!@kUg7)nesN0h95O[6hd\Wlbu)'qSC,
%eT>7+,R&4OSlukd`3j%q7Lt/`?1-X7nU[L,9a&>5J!E\'P#H'lHa)u(qDeDT+R1S6!f&`Bh+*FP%W)rd8G_(@+?.Z9N6I/tkqhAf
%7crhulF'ib$h^H*E!%U[3PsAgSD4=NH]VNNVM0*->(`1un@89m,4f_A>caH+cK)4#,&T?McOXmZS?rOB63.q:T>"3s!'/JbH=T_f
%BM$%agf,!W*D,;o;'ZZJT7k;:l9J!'U7X^4(#b+g@u/*%ci`3d&ODaU$"'mej`&O]TVF>paJl$UpU$Xe;4[<gcd6Z7S$D:;R)DLS
%P3FFu7<bW;i&a&oPa%MPZh/8+#&<Qc,;6Y"`:gSdkbAfJj#1@Aa(@M#UCD!.KMkVd?p=9#HP#=1P7(a&@BdJSUO=2?YXR@k_tdu$
%gBs/fTGZ`EWDVhJG_)?m*2*F.5&!n<KS2USD]]+1JQlG3f8^A0=l3;c+nUJL!gf85-346n^<f=^*Uk--0][3eYbO<\eN>LI(.FN(
%Pn:oK&Vt4-XB4FY9=<gLF9-]1:usHPf8b$kCbO.L4BFBMn[]F,"K_AMAMP[t-0!<QOHnnuM'/>-5mJpPWY%)GC5V`1!`rs./JWSQ
%qiGh_&TS6G/E*g]DQe&Fq'VE'6!Dk!-Fk0cfh'N_i]u5'@nQ,"\<t`4Za_%O19-nh`I2f&AG]X?&\BMPZg9Y"=J-Pdk?pH)^lQE^
%8=\(eJ1C[[K(853kg%"VpdP]o$_?O^)TE,!X.GK?!4RBUKTddZT$9X**-]]\b-=2FKM#3aDkWq3":KXt-nqnN!]P_5MT7Z(C<Q'+
%WppsEKZh;a+$frTD07K>]*BGY!IU(;%kg9*TEEe.neb'UZOriWj7h@AWI+tckq2^^h=De;Q19X\"cA*o9W^ZVFOAa`Mbn[]Rb3t$
%mmX20'ql\rK#_2NP'-me-p"ULi@DSkd&\jG?A*?e8Psiu!bO+&F/$98@!CNt86$OYg*^5anfe-6BS5`hb-;`pE6f00#SC`'K)688
%MpTR.p*)VQ*,UtS#Zh1;I(P4!.PJ[5[-JnedJ"hIFn6("#,/^9f@5_)0LY7r..2g3@7OU[50BkYHC<R*_D:4ddqW'hnfn2t!kD5&
%*!sqj4p"p/&\l5Gi63h2fDp2M^2qhQ)lS5_I7M.SpDQWajaH5]aQW=EM#n2M#q,9S,Z<1HOc[H-c@?E1)]I>8/.q[nVK*queHHe@
%,"KN3DSt<rKR(FmDM1=S;T0`d^'i#e<?T8@K]bf`,b\-KibiO1bn7.&,[>K!804bBD:jtIL('XVDIrrGe&V<<Cp_HmPmXn1@7sfm
%NeGH4REQDo<K;`Bfo[Y5Y$.]s.U4\UlU%MkiMQ;QJ/UNVLMp.#\Ni5+4Gc=j,4[Z\c]]J;ck?V>)f9KA(:JB4OLS_#!ng<093@4g
%;ZW9g'lY:tmq?@N'3[?jE"uh)aiucEYri6`<IFtOn@XEbCM&NE+0sT.\UINsR3><fPHb7qBR[=+F&A49!7FC$s$E[.rDfB85i'8o
%9a)`PMpt]bEEeq5B!(!cS(j9aC8Y!Bd0(8Y'i-"Z"U#7:Zn($$n(KfgCt]m/U3DZnILitqoXl@e`^qf,k4u$FKZiAT]]#QWN\j_N
%a[/LMO>\&/C[%i;!r%@o?B@#8YHUmT)%MYo>!`aj:f\R88+cAHUPej`RI^DM51F\>msp]h;dmYAW^(h>-CX$NQch<oJjobrYP=%i
%X7-^+g\4Y_<CCtTO7RQ",_^/u<"&K2r>J*T^:+CT/qGF1ZPURJL<<-!\oh&Pg\jt&a1ZU?n5OLWLjK/]S9Cf);s,nugsEmf#mUKe
%G%Utr26nO\4c6j7Rr;A[0k=/n(66o7"Ss$R("gFsjCCL?(n=Jl4:hCGP(7+iRQe1,\":L`F-V[),sTKdKg8b/ZQ.c\`'jlc],O!k
%8(e,(768TOKKLHJMRI8$.+^g1fr"31o(\4YUk\Xc!j4;?6c.4PpL4c'\B(>LKt%d_kTYZ*mXWIu6+&7S9%CN3,f:#*h$i@BkdlSj
%p[FmMY&#da24eQDACIJl2":B]cQ#o^&8^HATS-TYD9m)5W#'"eCehsR&*<@+\-3Aa#ucTm!ZbrZ;WuqH:7q1d%79;eFF/(9#oj@R
%/$ZX(AFLUF.bCG5j`dH9#W^O`N<!N<gi2L\bj*,a!X0b/Fu`;+`4XCi(!-/8/q/(Lp-%3?cU]P-+eH*<C-q$rF5PNE0T+3Y(,8Gs
%ZQMXWpt\C]KoCXD>o+X2.H1G,eT>'`B04m?7U"(!43olq2ZnJ(!^(S(R+]Dmgkm("97jcVOS80'JJNm&<$#?!b3=l)Tf(Ea9IlH%
%TU^#J3d8Z^Dg)9=lALFAW%o9#8,27\A@$.3a,o4[$/>(WYsn8<l`*og1m"pfOk-8c,$=t;Q<?f@<oI5^Cq/f99+Q;6-a8[0KVC1^
%X@\8DFs9qRXs$[!cB^2XLVcNfUlWAT8M+AFPFo##>B"5^eC0mT,h1q0V5>%G"]l?!ac8YpIF2*:Tgf/inIYUJi``k<KmUr"><?SG
%ILlqn,]p:d/)V1]>g$gs%QTZY7j^q6,l4IZ"XHR3GXOV8]m.JfBL!c)"scJKOSHhLJAa65"XJY=]n"%X"XHAe+;#ClP2PVU7-Ce#
%!D.B#HRp;e\%N:U,joR]8E?.g`4[?;nY:Wq=%+Ck9LgB%s(4[Y)]'\2SQd(k8@85:d&c;I]+ZQ5cr@l+]3k4*FAN$g&2i(TB-3L9
%MDSd:2i_r6)(fqO90Y3!RM#[n.Ji2'dYqF6:o.^jP2rG@e6^2uKOn)A.KM.epH!1)ebNY/lPW^8n;%6TV`&?PFqT3_aBC7mn8f`7
%_Ip99LCD9I\l7'W<>dn^b<Uujc,BleoT5)Q!D2AeUXdgK7J,pY[+6HOi4Er60*XjTPNF$iKtJhk/ZmMVi[WE;m`)PsDho>R;/tT5
%9j?)0@NlFMS,H\+"0msbWmDe+LjP"2jrkpJJF5),p[C^B?[eLU$TX(Z;J0VnoWt7`0">fUa5J5JM@08`$r_F-^9UYXH/fBSQ'^W[
%"V;UbI2u>P"W?6s_$[b'4WL\;[j/X@n8ngB5pDXQPgKij?/T%M5a`f<Xnt`],s/$YMX_@u37Xrg@=8i.Tf5!6XIa'VdZLCK(fU8+
%?o5UfhaB%nJT0pa&/_Ea7cc\!UqL@Y^8$jn3o@?\!sMVl,@\\15pdUU^".UAVLHhHi/KNi]@lD`MgN(c,L0+`LZcdm?&l,[f0i9^
%gI2H=.$3KS`ucEljW^A_pqgMld+p"EmL/VP\.O9.:f\$1;&bnIc`ghpX'5fWljYRK*V$au&6cZTHS"GMYgJ_<@p`"N@'m&pks;g$
%5QqW1\e*2/j1)jjr`8c\4.\)#0p`/.[#1*(ng"gF#C)UI*b=3J+=6F`0U6g;J@KUNMA2k:/>5tD6@LoJ#bsCOJ\J7b2ihm,`bj)V
%8IsaAi42?-YsWH*V=2X%j)K/JSmj5hKnm2e-^u'!%"<ekWM;Q(<aC"7!H=fqc[q@5SoS0CMgX8#$5SZO6Th'm$`oi"l/G"6iRnJt
%\91c9&3"PY",5$OW&T[Udap_lcX>b1q^IEnZX*'j*&K_A0hd%VreRbPL(B,IEeMoMDS:!s3c/7A[?m8P\i#BbGuV6Sko*LVmQcNF
%<CcMN.ZV.=b\.BEUN.=W<1VPVAt^Bo5uY5G(O(D>gkETUS%tm@?aZ9kSLBNPQUH;AjebUB6V'og(R\5WZc\1KAdgeM@fgqe8j"])
%n+Oa1!&gjBlIfS3.'W:N&OVJJA.]Jg:\O`nM]Ud3cH[MHfl.n@YFV0T:ngETS`Dk8!_XuCXQn5T\OOJBHI,`p_0isY%4^!&<0s3$
%\K:1e6SD_:Fm0'G,.L8V<FF]bm@2lrVs[ZBW&q$X%+u'R7pUGTc->'Xp2G]QddpJbT0V2kZK<L"ef\=WI[;)\G2*F\6508eaWWTh
%m7]W+WUFNo5c+M<hRiD`Z<^OXI0'0Tfhof*+_&.:C6he0^]4DI@0ghq+LVU0J5[po.NA'L*T%]T`K$./oC>(9W`4,o+RYX84.bam
%+(L<C-p9T^[fbT/9(CY&Ss'VhX'$5P]L6*/Ve>'Q1SG"H:L1,Tkn*tH0r`*n@!X8.'_iP+beWihJYZ\"C@n3A#nhuF;R?Ql$P_ei
%HtbJ+$)i%X-Nj%QG((Ral6?tHnq_aP@n/.<#L0Jb72pckZlGU"GDIu]$0iUcHq/!O!pUYC7_1j=c'D&R@\B=^-NNg/YV0n(\o;sj
%f>7M1Eel2+W1X]Tm7(BL%T9^kVC,-bLiof+C^I!U1kk!70e!:'Ni-`?"AmDMhs3OXHB&h<O0?t*7&2kK9`h8;3,06g`'1=?i,ro"
%qZ,n]_=[*6P7]C[D4I16c3C`W*&"++8r=m<V<1Im5;q5uPUlBdHoAuck[C_PJqXLVYX..Nk9YdVg.*H8gcE61aAnOPD@aG>e\p=8
%^#S`@#`I,MB;,^b*Vnd9i+Adnd;KdQ"r'JNco.IOhf"Mg&fJi]lELndi<f]Wk9rBj]5oQoHuf$K0[2pi\FeFk0.mK,fS[VI?88SD
%,T<[k<p-qqYj]s<H&S<+T?.HB=fLS865<@Ocg#6GH/7t9Lb&>KcEp:V`ujL$Ejq2i>=W5=p$QNNDLsX-%i'KWX-3n2</$Q3_khTF
%>TAl"+'j/H'$JI0;?F'!(UjL_Wgf_^d##Z>L=MQn_SPK!#Z7aSm0UePV'LZW=#3F2Y!p3T/8FLF"o,-\'/c2h'o.C,-+_np>@F6-
%Qn[&gW%L!>H(:C9M)d_)D*4o7,#FtE_sLer_LZd7M6.cBLLV7ia3rYsf-66sj:oHd8.A`/=C$0\bJ"ff@HGW]bVaSX#j=@q<Wm^]
%:q:6sNCG+7JBd*A;#\'I)J=p&X5%Nbpp,9sPMA_B.:\44(b%F&c;Ph0(We:GX(tHU/\K*Nob>AjeYbtkOFkSs57m9Amlh[W=N,:^
%Q?1no^``Me2ip'(Sq1`U.;ADJ.O.=.bqUD;i,V=$[03>_]\7#,<"cuiQo$GFhS(m8,@#B@&+l/Z+6cG@d/Y6-Ls(,F<IJ*f(#q;6
%h:PhXONS\DL"2AR"*&i02X-$9-MZoG7(j9XJsH*.)T@.:*`rp!dVaZtL5<'[mEtE*WhG.S^V-N*lD6dGQ(laSeu#;Tnmq0Ah'OFc
%->C#:57imf]#/V,YPcC1ZNj!_V`Dpc;$\!$Ru./Wef%0=Tp*>.D$2PgI8hI7pK7^B6/7W_*2Dl*4N*M=TX%IE,O,m&`Gg3#_^o!U
%a\d*0pgI*YRI*Ic#@,*<W^Wr57$(8C*2YW?phl!lb$<Vr8ZjK+X9')HG,K][k"-ZR`'Re5N1+eq5b_C&^R9mj1_&bfA\[`&Bl=YD
%cdU;c55$s^)UF1>b3h;*:&seQgGQH3,7l]<7dkJm=r0Z=SaC%"?1_ab2toGho`VIZ)K,]:^HhbDQK?.77<k9*gIdL<H''t.cM1qE
%q^/ORT<'7V::AJ<T\,eFo0pP>n#(g!8tQTghH<%5lYa89H*cq.]:Ee'_Y6hE0*!ZJ5!U?4>7DQcUc%8@D6"O_k,rumMnY\A5+:$\
%Ae!8+m;0T*E+<gQ%FZQ-F!_]Q*[iesE^/=-EkgngHJRHLCtD%e4Dj/e!!JT"d(fg_r&5ueekC9<`14pPhR!GOJ93a/iCBaAAfX0d
%HTN5Z\7r+kIGHUI>;EQlOfnj%A]`-1:3SMMY'[MC)n__Z5K<$\4qgnfk[-Y;ipY!>:3/WRdm1:E=qp1_>V$YYFgGQh9^QSpE>`1%
%\1!*7fV,R]dt`m<5hLa,.09TpC`%2iH.Ar_Ob[5"@K`='*SMp8@6(&.?d-%H"Nu&or/D=O0XOZX&R3g(erDBnmc:1#&4auKYR1eW
%#'5bOo9RNS>#&c6_A)r6N,c9U9MM%)g<Y-@"n4DQb_BB^@2?Bui\j[epg`3riPuJf>2Yo3E[j9hf>>JMd7Y/V[7k_qiK"W.rIK:u
%GK+%sEt`J9<</DW_VZ^9hDD7^qf/?DCpBaX._Bm<[iF_i-gRRr8>`7h9o!(8#NMSGEcA8a'8!#+P2[Kk&H)6r1ghl,#ope[QGXDj
%`5=4So0A,W;?/flSuc6j&Qkc#d_I$6n4_S=e0IPi7["h@&5Ca!>E6o>'u&eF._1W&Ru=PJ)FPQG'Bs=l_kaksBoWW*,$4QiA/3Qa
%:^%QNa-iq5;ee+<1@^L^XF7R0Yie*In_>.!LVrQW/ViR6QC'9[QHL[Qd_)4=ApI_TArN4s@^O(&!nD?KUn/)h]#=*hrB>08X8Kit
%97(rrZ,+\mQi&>l'#!s,XaZ5,O`7A4is>5*6f!r*9/R_Y:K7Jfd9qi&[N<SO?s<D]lFp]]qIJkO-phh&jG\fGnH*M_V][8:%<'_5
%9R+O<KBIfI&aQpXfl!\AANs=GJ!eaUom@*?c0OoeECEL]IXqB'BM[9\(4(0XY;fk%8cpLhARi1?mQ7Du)NJR]h=/N+7l2X66.4cn
%GekYheRI'BeVmB!FJ/Z,073'IX.*u;L+OcmOulGrHh1S=2(t)9C/FcWkfR.9.-IlT8@f@-4-ql(r`VRb\@ls'l<g8GJ^5M=^`$<.
%%2&"FA:ZhJ3AhBg0;(`8/!61W4e;"H/3kC%qs(ZBr2_/8V[fb^HI9o5MbW*BiM]eWVnE9t#3\E?(^0sY:SZ!n=piu?:/&rrR[deW
%FItWp,-10%nMt=8/f'C\;ctUG5>@?Nk:QF?jZ>h4fldRQ.3T"iq]3.=eVB98/og-)+:p@SmB4po9Xj?EXSW3[#k$1?0ecc.kPi-J
%:R%cg?;.39<peiBmCg0nGko9o:1fTN3B)#k9&POqKI$r7RaNZQ[o9Y:EB?ifVdqTJ"tk'71k)lBO/)oSXsC/2r[TG$,13-JDC2nG
%&J!Y-"Os*T`BB@&^KJk8)8q0"N1C5X(AD5R?ju,C0f]h8>.94#,P@-6O0QJ,8^b^PO$$Z9]\d[q\?)E6]r:+FJ;Q;G;?_UCjsA&3
%X.H1Rj[q>p>>/I,mC"ld]h#DBdAOr=e9d1fDCR(X"2U\6Kk%D#M/:X[44;'IauupH(-*>)H<Is(LKEI<d<.@7j1H/b03d]:.G*qr
%\RjS+_Tulir`L>p4'7'E"C2uj?&qU_NIjjBQ3gYRqje^]SWI[5iGUU+`9cS^ctm#LQT9+JT2dE3^1J3'#&5,T@buk`k[f@/lX[D.
%cH,CQ$5I<jDJpsc>=tpiBDDCtO.Xh?pDmlm@DT4X5s1KPSpqs5<bchV874su2ojno/tjUWE2k3)J9OPa0OqHZhlpopAnTi"BbPCE
%p_"UHeJAe]cbn/\bg%U=d\K&1=Mp\Hm)Q+61)2+7_11"*JsA[ZHu.TY[;q:5GNmJT^-:opL)afh5<ZItc_C$K5R5<r0OgEfEq7rh
%D_TYhApOOAWKRY3"Geq]9+mcB-,(P>q,lJa&QK3IVck#f3AACtCMo?AY:BR=qglm%oR*4TYi<Q'q>4`CAEF`\rH7;?N>g[bna`W`
%>7e]^:dYCL*sNKX))@u)[]0u-)2tL4\R;H+Ws)ebaHf1iD;?hbAgYnE[AQB-XW%bQbAL7kKu:lilTj/*-%6T,1P(GZ!^9nV&D3t-
%hd=f9W"oKJT&TE_\"c]]?j%9:L<)ZP3^0;(Qsj!M8L`VK$Fkj=:oCjI+F&+j"hSg4H=kS<J7@k!NhEUa+:W;%Cma9=QVAE=*=.e]
%oP<"AVKu^7$Qf&c;Tn<FWdK:j'q)sVo@HpR545%OnQNfmFC2UHhniK!n0-A+ZO-`pV+SZV<*%ST)o+Doku[VAN$rFl.KDs_eP%?%
%T^'=T\Qq-f%p'!>GMEd2CFEn$gSZ9e^C1L^?!#H?o=@'eZuXFidmLc1m16@+5FhlB:S>)EQgG!UCkUM$\!jBQmT),pf,`7;8AP&*
%oHW0%ZX2p$h78pEVcD_\n7LbN.iP\CrMj;c?*db$RQhg[/_@8RAu'/6(qs@CYEO%=DN=niMV"b]G^\;eSYB=#Z!51Yq;rmE&p`tX
%V*h+K:C9_p`Ju-W5oiB!;@RUtS3<dBf\JjFWjjdXYsc8Zf2]:GootPO]H&='YN'o6.`nd?eI-?2Wmr-\rUqM(dJKhsq!M9pm@p\!
%=sP<1Boe/lMgJI@QiuSidIhZ>O[aqkWo76L]HR,>[4A=VM'>*(\91Tp19ar&8)Bl:1Ue.7-$?f$($J5P%Ta+'=q,Co]M/p#<VCiD
%+.%kSqsCSu"1aQI%UXOaHI7&I>U)<gW;)2][@%86^OYe1PM[J?T[Epl,u(i>rMb^k4oA`Y,'%J-$l2n5dWr1T9fhN)0E</<Vr"`*
%4!cMd47EQPSla^5J5#%0DFOUpNd(2rL/-8_?]gScHYn.?*?[o^f^%[,T$bkjV7NY`dT_3C/,s(;e:'Pn/rXlQeRL=@_FL&+)p@Tf
%#Dfn8$jUgZ"b<YCU1hqo=^c<OqiK5mo[3k_7N''6"2;f2T0+*F1T[hcBpb+>m%)8Olt@G$RRoGZr(sARf-gJpH0ppCanqk123mTd
%Sti(JBKJibQVkTfMSgq:j/g7u01*s^OP%a`i,%cX:tuC*VXXHS.T)CX?>s*_/@2&4Ro*PrJ$M%6&hVi#$Ne!1#J+d\fuMn:\,PrO
%IY$c0:'#krLS&sqkesuiOR(F3LT+8f:t+R=WeYMGH^Zr3[LT/8Ia$36CimttqW2n:YV9khB)0+MX"\AOql'S[XNq[c-1&Rd^+CL5
%c"%Qurq_;Qi*(oDHHRd[O*i`T`sf=U=@G^JB15.$7,c]n45'm+DMR6tgZ*MtF;JRo,KKcif'Rq:]K#s[dVJQGlS/0t7_55XO?DUI
%78YNs52@1q-L\Ru'>-Hmj,H[K:[]2$c?4LL>kn#2-Fb2FaUG5%-^i+@OA3\@0d'pT.se*37(UWBr[fuP2$K?Z<"-W"YX(XYHC%4V
%q&4CKb:<H.Oj$+)T:j!4Rn-b:Em)^"D_UEZ)EY'HO@12TMLn)<(5Z_0F"YPZKL1q0*l;Ni)Aae0SXA<X96fiS.dN1]L*Yg_!"2l)
%1[tRQi4q\,OCb1U.eg5%RKUnO8NDbB"=[X$?;P3kN"K70m]5'9N&Fq'K":<ePj]BqV47P-etD^aMG^(]B#$cJ7V98-;FBm7HX)0/
%MoQgKkTjU6*[\jC;=p=bW7=U!%kCU!C1QDk80'gl:JQO/>$<(IUNU;_:BR+qlf+mD\l9-&k+!^*1#3.QVU9!"X89E32E%b.$3^@L
%nL>;_0nis_(=BjD0,?:Vr&h4ia\I3rMid$^YmB#.(,<Q;M\tc,[>;'qJTnX1%[13%Q9U^B6sj=#$A&jF8MHlg1-Gdcmae!Y>,.H+
%7;A.OF4J-c4N-l=mM/p%c[X.9j6:-;g,mgVI1AhLl+c;j9ZE!\+t*!:.M72ga?o1%bf15(fuhpM*Z(5NR&S/PBHhF8[=gU5H+3%s
%[;*hl]W>9['b0q=Q4kQI/i\c8MU#1)%(a2-!p_]-Lb;cm&Jg*0:)1QnF(b5*EF!kN53"i2GDf:=%07*ge5?YJ6QkEr`H2B;e4#Hd
%GLS=A;>aW_7I.Ft*j.>cEdTnPEU:*pC8rHMC6du@ZPmr*cMG0!=a*N$;F2)_"6&:ea-=7$`Es.NfLGQn]oJd-^>cp1(/]p#M(h%0
%m@Uiu18O*SphHHsBH-DL&Oc;)TcbK[YM*KK8_'l#(s0(:8Q\`T:g-NAB>XLcQoY2QOXe.jb>@WA/kl9l$e'V)WV#k.cUhBDm.G*Z
%hN5i3'(?$<3("``XG1RiQc7=P</6P(ifWH?Xm5[U!c\T6`#$C0@\>1A5qYdd)C2Va4s-q!=lao\UND]Eq$9+IE.WN>ahI@m[!9$M
%Qp&?>Ti3%Je>'QXj;_+BM-Z*#:#\uJN<18381fONR?FY899k/^ioIU5s+R4=7rkbHC31c%3u^2]%E);uqKf(3<O^CX$`,Mrf6:,"
%@nV7'D>]Sq?fa`A/+8LT^Qd5LqZ3\"=YqE>iP6]E+eV(BaK#TfTB,Zc:t@!)kH2=.?`pf4d,[;:qnc!rZ*0qn2+IGg5;foF2f+i'
%)[_adFPXE%<rS!m/7iPGR0oA0+GDE76VAL/HYmJ+ASJ9YbOj+qrg+UIYmTLT`-s-ZRCA&g2N1^?;4s!`S]/^(%[*o,ZP7!PLM0Q^
%.:hMJO;2?QD#WPfY\Y)5''dA'@?lN&Ms,F1.GE]0j&T7e=b.ksY*KhYVNl,8-peZ*/[`l7+G:XR73]Wf)iW)eWfYXhZEsT_7CLqr
%.TrQf*TU3VJ2qpVnn?Mr%P?>]NTOeNYXkden65,d4s.A$Wl6N'Y,ZBh&EFA\8s3n+%qk0heD;aeUsTYY:6PZ1.[pII^u(8bl;@#9
%4X;(<^2GN07Tqo$8S#rMWd*49doD&M/EARL)\PQ*@0-IcDb(44qP["['aV97Yja9a5OpYq%ATIFD9V0o9a_Akhh`RJ;lU*`3PAP,
%^064W_LEY]U_AapI0ZcK^e@t]n/rUKPng8S\92+fDG&#>FO!Iq<MC\K_uZV6hf>*d"Fg.-YeCr*aarr*279)AB@sc\PM:LAl#pA!
%VsI>/XjN*OY(=t@@)YsRP*;n9D2ACa4V9#)NDBk91\$(q9DuAl;K*Agk=a]So-eL&F8Io8)i`@WpIlTLP0a;B]l\5F#H$Gl)AO*V
%:3@372WVqI0oapQ,V7Wu&aRWSaMu*e+8koYS,7u5]j.s0pN"f5nT'nE_/e*+XNOUm]3P;deZ/V-eOiYXIL'Hs(^P\Q.cmT;-c>g>
%:Psu!>$lWa.O)NZ!MU7cW;kc4SmhY5o%Y5(T:TQR2<A?X@Zl3umq+)@^AE5\aa*Zj&V`HWX!X1qiEh8,:hfq00"[u6jVsM%E;Uit
%A8[umi_&`P'E$R*7K-H<gn?8M\t.eq9p_ldo&(h^=3/gk`0dKd[YYe^`8e2l#=>lHigPe"=;Lg7Cb+$*^n#IJPaQc1+#Jgb#Z57]
%1_Vg+-u@'+Q#%W([Y<dX$^lM'/]8<-!&2YJ]eC!$9d1b(HZ.O,eq:*/+?kj1&[h;5N$Qsak,CmO7MEEFf1b(\f<=W`ae,-N@?HEJ
%_.XO&`#e;nK;MC7s4u`([Kg^?INc]Vq<-I(l$s=`8rb!-\G'qU2&],V!=h/`:76Rn/gMnD"c!>@\9Q#s"0F!1+?m+a(-4f;7\/N!
%/ZQ_^$Mg[tq1GKD*Vu&q.'M\GO6Lujmb>JdXm_"t:C^MWELY[(_*2iq`T0@X#5>[H3f1cb/Pjm_-B0Y@S_YjNl_^`"gIUDL*foF0
%WX8ojaE>RD8Qnq*\o(CeJB]90&m)n0"8Q@;1F0Z[?r:eW$I&1S@MnW4c83s$6-AdDdVXRD;X%'`EW=DiLpO*+.57,WF;W5=ZG=`S
%dA/5&A8-YI1hbgkZ!0$D*`T@XZ93Pio.XJeo*l,#?C.,#\;)CNTRKD-61rYYM2_&?csm_I:]uC^Z,,p'cjTiM"^dCD>QuK9_E%A9
%_f@H;Jj1U><M]n&f$hJ>O3/9@:LfMtMCa!/@!!eC.@ak6RI1M;Mm=LdXuLIJ,nNA"VKrMYVPG7@hMJa8KG4hAfL\R8DJPlAg;%aS
%+n>qp8t?,")kHsM+>6ZH(GO6naV5t-D,"\@2h22opM2aFOM,23bnV`c!_niZ-^D\p8+2Q/>tS)C7L`5"Sr_b4;/Qu\,=q=WXKohC
%3[_[@1"I4nGnW\=e2X]VO@mO;7\0^,1L><'^),-8q3IKRXfW_+\nmAfWlfUil>KsCSFNJ@7B@`+,H]-tB?U.E]08fi\H\H2.t3iC
%JkueWQG+ZH(l.D)TJ?Y/ON/5B.TN*mm%OanlA?NUR5=$=kX2H-,]sbCCJ:Y@S8G"WM.K;D&;qH`o[D_Hq%30(J3BAfd^Z*_R#n2]
%<(.NEm:=+j0J;OQ%oLb3'8F%mJ-'a')&+Af-#KU$%TcPd;f]k.7_i)edhRG1</as](l5&8_fYODAV:GjQ8jsO5S:D1Xug:8[KES&
%Q".9pZg69.gMO(^Ut-7c<kn`9/-n*cS%9>o/#]<iY#3===(Qj@YVsX@7W43NO:lg)k@&*3MSfGaBi/jnLA>0s?""a?[:,Wm-.Oh_
%EO(4G)bfR"Og*"P^VtekKIg.++iCL`O=DDC/cmfAAq>/J3g_9a/='Zk>Vu`&K$5/gPW7E!d)<Tb6*L1@c\Wt)mqol0eM*rudZJW=
%<CId)O_Cku</4nZ`,ZhJ2@T7ACM$YfNtuh+<9!hC/Al!cGmE9JXN:O'AknI1?;-E[EYi'CA;KR;T6$a4TPo_m(h.QY%jRp5]h0k=
%rPF0nWW7fg1kHDqb@2`'.\dD(\qa[R,1nGa"`LWJ?^?JZaO1!8*[U&5/M;P`[2.\#0TJstX.`DEX2Thh@9!:;2I<&.'r4dH?![Cc
%gS0s1Nd&5[7QXoH%gC>Ql8a9OBF_cE-1s$FZi%K**pJ#E>4:&%o&%Vo>[f:f5HkjJpM4dI"`&,R;/>]C.Gek"&$EkHca"2`eJI3e
%?AG^q\GY)4_tf?G_nR=9`IV>ieQ1&lc)F]L_K&(i>B+AT7OL'uVUoiVM-;Osgn-))f*E*C#oGkuQoQKgJr2j0U8;t@M35nbT)O]#
%JIQXE?ZXV._iX291BWLY8#ChDQ.=Zr&D1)n7>?cl_bscD@_9O=Vb-I\)SGb-5a\PT)lK>;j!;@A345'&(;;3m+smaL$%O(Kn"NGJ
%'#V[)AW6KWn*k*Ks*YmiR?.\K82rr/W)SOUDKpda(hu.2U#d)aQ'/1>q)7)q'^gHVU4-CBrmVRG9FBr/MI!WQ^mI,71!!;!6tPIZ
%QkXUe95!oh1Ia``"bWEg;UBbC'<g`Dj6+5k?IK_Jrf$*"qBOE)j/8_,b+CP<dJjR,Mu$dNp7hKTlp^r2fo,LS9jctP^8TBMKpHK[
%K9AJD):((drAl>oZr,?2Tm-X)UQ@N*`sC(JO3OBAj,JKA33Xr47DFI*4apH9mY^HZ,N7#_'m:D)C;!1CrlIiFiF^WD/sq^AD(r-'
%@<IbS?6&*2:B;Ka!I(lK3Rdm&AQ2EL3J"E'i?GYn0?5l>#'+.>o<f$%oc.fh<aKF*grE#1&V\B<kT-RakKY8;#K6?++gI?t7_:+k
%<&P(O#Ujs6Pr^32iqK0VY9]'\"_+rL.V\;Pj-E.NW"_V"ET869!Y24O)c&g6+-YA0Khn9q_9o7\(N;7>#o0piBNiS/JYrX_V3Nt'
%[]%`N'Lfa]2Efi].=p$IeWLh&YW-)UP-T[f*Ra=<'\]3Y/ic,e?mVIEg$E/JMq1^cn'a**Hj_!Wb?DkUlg&0)q?!*j&0t'k<7As#
%OXgQ'_XZkMr*4Ai?"^d;DO8%@)\^AS@;W`n9E<;tq0r6jrN(_Ho/eLpV#ISI$Za=skL.[A9<Z[>OT;^i#*gLG44_\M9[fE4dCD0(
%6;.h*-Tr/CDbJN2P44R==CZbOj^urq'S(Yh&#=><nSf-<7^M-A/BF9e*2gKmc,8uVEb:ig/f%Scl*dDFLA8@>PAPWUbuAcucf=4%
%[;UQ+)G+@$>AoF+La*iR9@m`2E]&c8X/hDIZM^CIe/S"eKgpA$oihpI(&P-rQ9sKliRZE1CB1-!;SNcd#-p6_R\@OmO&$!-MIef^
%:BaRI(eg9`2?U%fSp.GUPTD7P?Gt$Y[JsRj3Xb1RT8&,6Qr'=!US,SM?ODbdikgpNTVeDbc?`k">)4Yc-t>i_L?b02^n7!%db.Ci
%j/.Eeij0)/J4*Zf$*Z#P$+BnLLFt"[G109X+>(e(;-sP-j!cJ\%&9<Q#A>\rQ)T<Zit`7upaDc5LcC>:LTd'`/od]i2+mnjkQk0f
%QPYE#rb`%n$"iG"@D=oXHZY7])C_:,)Ci&A\oR""lGQ2P\"1/j&E(,g$3,>3A]UpSG\f)E!WD7_'`1mQcgg,Aj$%oo*!F<\4"Shn
%]A-nuf)-,^:?R>.^0+Zd,fjcC9"eN_IbgCkS(j=.kd[\fK1<><KQP]t<QOup.72m=m,kfadLGuM.'0@U4A/7Y?@@)E#Gc(CmZrXM
%+nDmBn8oL8=D^M<L'Yo>&M69\/WV0:[6/W.Brc_ENZKibGl:,(bJKW6>\"8ZZKV^Hs#Lih,"\bc'%H?q\BHrVi)etkcDASR!6$0Y
%+1m^7@(WC\8&lM&RkOolcV`/'g=llg+HDO0_bi;T\m",K'bUa?Hq/>99H(ao73/!1'M5"<;dp.c,m<>37S,H@=3R,5Y'P'9KA_RT
%,V+]/^o7bP*(4pV+efi+VCK33/t2r]%Q_J^!.oSkUP7>iS4]jn\]4b47'RZ&-c$g"e;<UJ[KP/Cfjne.(l`ih>'7aG3,f?^d&u7S
%FHtraiL&7cae<S*fc5Q+Sd//uD(?NQ3eX&BQ:!`LpeJ(SK0g*YFs2]>/fTi"&qM8[L1mdYVU2&afYcEDg5q"iI@^k@!7mCh28c6g
%1b#8C4-%&4S3EM2B"D:AB&34U4BjqbGL,OP6c@Sl^FF6&IkrDLdE9]^SZKBV+dHBJS#VmRR,9i<"6j8\XZ.9AC.ZE-Y8X9nJW6XX
%5*4!(E[1!9gWaiPm*0k4ht(sA;nP5p?\>YkP4H1Z.SlO-F;m.h+g`Ns'H&Usn"rkJcq26H(%9rRaaH&[n&eEi0,pe@0;U7J5EJ@d
%h1;K1h(6%9hQ6VJDJ.]7nbTVR*t6_M62pn*a#LGQ-5ao=Re(WJ)@qb]i(g5!K8/b"=Ym[o76aqM>I8YaWs?e7WQ:nRpd[<5B2uk-
%bu3:)Wi!rVSf#)V')fU[ERu6SWfYW-D$@*b7#UG*W%H@XNV>%C2u6,pP[[3m(i>#u#?m-3*ij1Y+uPi@8KhADfMrJnaZehm+ul%7
%OsPS('r/I4YjmWB_[`ocjC)"PKd!NL;e(B"<,WVn6llk@n.ElR5dB;#;FdW[e1<jWE7.-1Wc[%l>4C-5n6C/3V?!'Rn<Xe_94OYV
%TKB'FLPC2d%/Mdg)Z(n"*P"aec4]V[?@b:2P*nEDq)^Gp9<$kU@a:e+UiRp9C)sm67<ka'FB_2__kt&93Mp67Q;P<Rd1<Y_dj*O1
%r(&nnMKM<+SJB3<rfd*N_VGq;MGDWJr&1%D6-YP[JL(r"2U,gY!Qn?sj%b5d>@r#L--dq/++>ofn:p)!kQ!G9Mgq1RS(Fl>'4W3a
%XmQ6W9oH9o,befro0f!-9sDMso*9EUP/D%/O%(ING6^u9aP>QE@lbi\\!@Rk4tfqhd>d.p>^g2]T5DsrT+T*@m^U=[g>n"0_jOPn
%19Lq-9_H&)g*G\@5ZpW&M0<EdJhT3*obG>3g6cDt\K@`R?['fE8<Xhj[!g>)/?$S5-&kao+YoBQ3'R;YUT:lqI&;=!kr=9(39mFZ
%1H5i`9:GD7<HR$F[).-MBn^r;4=7i58Z6T4$?IK&?WPCkcY./]n0_pPY2M.c2\T$/+TT2`,3U"E2jDf%G>.1.'BHTq$3XRmk^'IF
%ZJAE-'?jMr6jsnQ2)Q]am>.$o*c1T(;J@`T%?_k.^gGcSiK3+lcqL`f.dD$0WP/YX%.+MB`T#Zo7l8j:Ge*7>B(3ebaSE]AJieGI
%PZsf?)cWlHhDV5fJi(0?(t*5#_hUqF-g'h3==2M'Fdkj?>;9.^4-W.PlI%*"aZE"d)^0'#VVT`MonA]T7sIdD`g/hr/B4Q!<@j+`
%;Jj=GLr%TQ>D#A?@H%emBQ_E2*M\usYMHrfd\-5l2ulJNl,ZF>CId2\g2;qA!.k:sU6RrWkN+"m84SIk^qKOHN@=TNe'VB)Uf.H8
%P`"?3jkgbO*NC<m\1Wbqb-O.j#[j3(3oqq^Lio,qY1n]_VZQrYBaohGRrqP9Nn_8oJ=8-[O6*+27-"rhB=G;[:SD)WNf'8>Td*''
%iqR:GW$['4LjbudV".c=?#h>.ScC7d:19p!(uc#Xl>%f3<]G"%"I\2F*-NrB(!@J>2\5X-[WY,hf>jP77Eu()`^=)A20X3^E[+;R
%6D,p:[kO'f&?Odpll,QIF&nq0Ag-^*52;V>8GY?=U_0XJ&-dOqIfk"=<lK]2B&!ZO6l*_61OsuCX;3!64B0?`/HPnt>L[B+&)f=k
%[d.DPGsNdk(EDW\cD_*6E:`'8Fp7[b.,L"e^BWFtPFpQW<5rjMF$FBaP>YR]fn>eN`s"PKd10rNl+T2A>7FR=q&6J\HI,:>+k``U
%3"`2N1CkcP59!@ICL:otTi="l]GTX`4ep,c=#EdTc.hg9#;#/t\;W4qIT]i==#[LlO#SC"Me:GEA.c,mc?P@+87h07!FLNFJ.EmU
%Wbm$;N+SH]FW3o'oHe7S6[4H&HG\U_"\F,qgBoiHhZjI;AZ%*M`DbfT.N:?G]SK9j9indVl#@!,[ToO.qj5)Fl&!`^i8T2ESJ#/6
%W@PM>d(2tS[(*XIY#@[I(;MnKpjB[R6<1I[:tpMU0FOZ)D%\,S\bKF,LIFdHcM-@\d'CRrbqHHYMdf&aD6X)VXMJJAlD\eW%SB>)
%5cN.1jFN(+jt7^:+P/j)%!+R$]]5l^5MpT.<N(U-#*o7HLa:?b,"b./2^=,nl%?9"p3ASq5mn(`&JIhcJLY'LWNfKqrA(NqLsRq,
%CO14E/Kus98b+G8NAW;f+<HRdJXVhC>9%l?&qk$F1]fBt$Lm>Z7%PSo7X2HY&un/hWB[N89p']"R`eg=BV,fM>]iI3l$R6I9'BIW
%J!+-Re3nn>WODYojW)geEW<BIAeLAJP;j_"s)UtS@XBNk%&]>RH<g)-@X,HNe*L"k%^`3q;3E!&9&Cl8qb]:M3'U&_^04cA3AeL;
%Ud9pemo)H8HH_.DieI?'P9eQ3]8@-Dek4V&T2>jA$7%A^Hj4n'7mLD6`"'_GrDUR3amZh8#oC"me7+#MPfVDtetO!]03C0NA_B&+
%HYma;cEWJ\lr_dY/(G4"XIV$p%9jJ\,mdrdpfCG*i'$`KQtbha\N>cOf@ZeN!i<b/q#HUN>9E@Q(93-]EfGrLMr9>=?EB<!$g[G9
%g&8q6i"2<<Ck%mq>p*t(piIW%\HbEPlEPam.4Z1K]itXh_UMS(`mauV-]t4M4^oG<#k5=X=@\[GOK.ZjVN)@VoE]3(2q,Zl.';p<
%`dpZl]1Z1VXIi31[.CL]_R=VT`UB],71VW:mCH_P=<4*uX+=CYFqL^U0Ti<a3t]=?PFC^MqWmPeIkGcBAZ^;WY`m1N42BKi>rU6M
%CuIsdnFJp7rk6?p-UgKZYU$\Q;`o*6j.L/6ig)C5Xe/Z?nP-c$Uis!91KkT^H^:b7@)N/>p9]\fmYl$69NP9<'TL_TaB&[f2d:;1
%g/[oZ<O\.0.nL=H-M.KK"qF;Z>EbV%f@:rAA[Ta&&V\NY'oI9_Br2.(;[If>aAIlZR!_n#-;>9J$4_AOX.Vmc!,eCGk`^j_bmrRS
%9$f\B&LN[DMm*1CC$g.Pm;CpmOSr.V>5!Lo@@GK.F>e_SWHTdIa0O=P'3$92jJ3%&5:CN>+id>8XEs`EQ$VlF>F)U'YWp\OP.=JP
%krQ%QaHMc'eN06RRtX(r=dn[I[>l!QEu'9`"RRDZJ_*C4Th8bJC9FdkH$>P(8VeQrkc+^gQK.RKAlj[B:&.H0&-hJ6Nf%6,VcHT'
%-Qm(17s2J6/pLH4H`ZkFD`E@smC"pk\1m$WY>Lu]Z"_oiEf;H+`?bD<G"gp;Z[tW;[6^Yr<q28]-@#S-Bef>?JOW"%krS8)4M"7T
%&uo?"<_P1+Y::LhGV8k:@5.>!ne"P7I)j79!<-*&/jdCh*RR.f19;Arg=%dIJ]ZQDT-d40c;`YfOcshsJ=OjB?6od6q]Lk%VU"&c
%n53pkrbCq@$=sSF*9T9@^u"ag,-PPt_].Gq/VLR6)aHEbB#)R-QiV8uHB'h[84on8&=Uo\i#02CAIl&6WM<!@<=paQ)-e"nY&6&Q
%9Fp0d>-U<%&*ufZ09m\UE.S'\[7W/rXMA[F[Aq39m3]0+aE4658QU^XTic,ghP!toO%jdM9ju$)!kMH3Z('+Xf_8Dt+\_^\q%@[-
%%'(D2J:dD7<X\*R1Y_Q]FQ?)8j=XZDBMn9BadGO'5\F($/K9qP4a4;nAe.=XZ+q8kO3j4>L.FT_OF+'o<<O]b,20UEjQoa&2-I:S
%$'r5Gi,k^%"QWp?PM'DT3;Q(LEdHN_`\KqY0B(Didi^5^1[WGBbMK=`V*U_Qg.G^=#EoI5>[qE9*c=31<K$Kl@(h6$?lC?/<>bd,
%*-<1_*iZY/ASraVAC96mho9,^@h0t[H!&ZN(s7E)R@>8/*W_`pmAaY.Uq^fS5:=EB?E`PUBW9+DS"GY-^]762^(K`=W%UIkCW#"i
%_n6:MM35T@FBV"M\5E[T]Xm%NO/?)&_;4oO,seL'Q"[ij?ZGod%K\qF%^DLn<s3HiUU=T+B6@'\;&qn)Z_[+&Z0s+[EmB5[s#W^j
%qR"'\F"$-)&$an9dU#@9m\4mW#)rh+5iZRB$s7`2i@5J?%8=j+'R[]IBMEJ>k.p_!Dk(R)TmE'igB73,gb[C]6J-lUMKTeuC,KBH
%fsmZrMS^-uh=B$1W0F'W`U6-(&3GuLC?+FF`e[Za^FX5`4jYCKO5c'S5"!Fe2X@Ca7GLDkY2[V?GBeXkON(d.a!XDM$&\2#)-.pe
%)<QgZY+/rZ+&6^b\VT*O/4,TEP,+_%,mMZB6i-uGLgb>,cd]t\`S/4_J#d%n+,3uJQusCk.]3an?4:"Tn?90/0.FGg+^`&D`6k`#
%o+T(HC-e$$%l%A<B,X\UG3=BT0;i"*Hm&fY-]\6c:P@Jf'O0PrE(&u/&*l5bF!>ujkd#TsOM/GKYZ7L`6U)8H#Hp!I7sLt?/Z7)J
%Gl\tX9bBjFq^Fu[k7$$T6qb3Y0c^CDO[NG/Vq=^4bIZ-p:i+E$N$9"lUd7WKh"6VZos$e=9@UT`%i1o"FE6*[pd+RHfjYkd(gjX^
%"YminXtH9Re!,7;P5=sH=[L2"/FZqoO=+!NR,#Md+8.NDn`XF5%.Z$qeYN"De2h0+]&LH[jneMf:o-:5Ra:V+:UScR"Kq=`SC0<&
%mE4@:5j#!R!n]C+j,6LZh/(h65!s$R7<D*XXXL,;8VFa\>&od&MRuAq(bGluIPe"Jri?*\)D``O"-Q4Olnp^@..*$0R9"?Oo>;EF
%*\4[d_NK"FC+T"r9WpBRNOa#;<_&oqeCHI$XKj_#.#M51DAIsb-+9%U7XXVKB\T#NPS3@6=<p5-Lub'6lS>d+8PV<A?SZKaA5[04
%qi#oE_'\ELC#d&-r3W"(2Sn!Nn$0L0#h>4hq%7Knh:g8A6C!'^#^SCdSlK_b[dut$;X69"PjS0^IMl:@'F[l4;e.$c0sQJO+qub^
%^'g*1%a7SF>A2<%3i[_Vp6K=@0=Ls@HuAu#-HMM:QpmK2=BWM"$H[!.`L9fl,oFa95JoN]^!hND/#WculB^EtQ,WSKYh*IPP[ciP
%NYMp%SdK1IEP)Nt2su.`;+$Q5Gl>(i<)HI`ne>"8Ng'P/TU&lq->\[/lA-QZD+=4Tfq@&\:N]XMZm&T5Hq.K,JU'%?W1?u$>AI0Y
%Qi-7e[sC*?<'[eIn;Np!!'IA;Sh>,N>IY1/Srn-j;D%/NT-b@aXt/aBlfSkAP!]3qSt2$HaC!k7<ar+Km:J)s^>e;N*S81dl71Uk
%iJTNucLn9u3$bPlOk1Xs8%aV8;cO:JMHYdf(6G%dd4#"85%ot4`[(4j7om<W=oF=[*4->5cK]=Ih\D2J=Q1?Y!4!L+cr>rMo%Z&+
%dKIQC\ska/@J7?P<hN/$_:XL"mS?N;8MP2O_DP.m,G\A5I@(C:er1E#BfJY[Z^=aGQHs*X,>-lS7@.H9^kIMUi:+IYXnG^N>Dr>H
%L.u.q$nCSKg.F+^!iDEgiX$$F#mJHK[-WX$lCH+3*ldJ1bfXKjj*KoL))@<t<r@KbBIuLp<OYp_,,61\!0FYK>,-d?koBfk,g(-E
%e;SN1W[9q:E.u]l$iqLp9js".GW8!DAm.#W.h'i7TGUk%E`,Ug,<FN-FQ+$>+"g6UGN'$&T+9AD%F#`T+Q;9]3A.m4Ub\$\me\`%
%H@u#e]u1@m*2;20h^0p2Uk7%kF<Cl7bpXW6Gn@5.eTf470]X3h2%iLG26<d?@Faqg%3A^C"=pHk3hm'tf5$4e:a)oQLFIuSE"/8s
%/(H%@o"YpLr)9',%nk%lZgMkhS0J6u!GLiEIeEB[6:0-5/!NR1_#kRmD`8ni1]S>HK]"V+U^?g(N(`k]C)!2;lNK:7@U6mUlrajQ
%B[=G/^nE@olg$Q!=;kp5f0H44#H`*E[MMphNt43VB5j,;O=!4b,b"kT!5Khl/[SBrs.._6Vc"sc/O_eeZSLH0K0KT7NZ>;f/.E^`
%^9::#MJjJN4P9^:6qu.U1;V^g:M`))_34Lg0Yia8aDl4jQJ69@=!5tdYlWj_RjsG7Y$0D!q/_Zs\A5b2c]Ehl%%8q/F'btZ3BOPB
%&0l^9KM\Jf13>8>X/K7H_6__4QjtjrTf35D"L(&$e/_9o(=EiV(25eo`23TiD3Q:JH%^af:?pH?^E&/Q6np>6E4"L"Kf]h:1e`O`
%*lb9u>:2$<[e4;G(@*OE$KSKS<S06`OJ<=*/?N#&]*I^hSlf[Wd[l2KE-2u=L29N,&e;&L*pdI"dpATe\/FP55p9p6a?D]Ir-c-!
%o$CZSPBH5eC.(e%0Z90^+ntGuV2mSijsb^Ak<$bBQbr\C1bpIW:]4mF3b+++DoMtd^ia#>c05eI0dFVT_qp(Dg;DLB!''ikOo]^/
%MoXl@d2e$uf^OTo8qN;bBLMJdVm0'i1OVo3=<MU.7DtFsA_e't3$"A39#ul`F1dr1GQH8t[r?>o,E]M,q@7`t\;1sUo8)5"%jmF-
%n#^u//A2'/H6%?nQ\ekhSLP@p4-2r.*i=\W+V_S9^E<pB'Jk_Ah.VZMW[3=mSZcj%i=GT*)tJ*=*hi;_Q2S?*CnfW7hJUW$o#W/#
%<N!t,<hLtUQR8D5^X>CX(!G,'R71^+9[V@4?&TZO+bXsKj(r6ckn@'*gJX0OYCar\Ya%BeDkhhIQ/;7sRks`.cV\#6IYj2LVch2B
%20!RmX(rI2_Q0VlC$k3\>^)BRJGco9/)44i&`Rnj68&_k`]\MGQkG"(;RGSZR\o%[)^/[TX,nla-qQ@\9\%,>I?]6'XuF5Ma;NG3
%4'2>X&e_jK3qk:3TIh=>G/<sZMGr:3]Fu,?H2O/rq65&nE".tZU]bN@IC(r>n*ALTr[1-e?a'@O/[1tNiJ]@2P5s40`Gl-3n3=Fr
%0]6djE'QA0id4?LaA/)_FRL7u5o5KDV3ar*SZZLP5*u4L]&HAq9uGTA*F>T]Zib_=h;RrmOM:-h.nCB$OGmg]XO@k(\L/dHXOY6$
%2ds&AE)6$W#HK_N3.GJ[^5hT)1Z842H(@lPB&<D6qK=@'RI<AM0K`Euf6-6SK(N[:HF(8t>mB2fQg[u*pWN$k3rNYJJ%P'^fcT)<
%,(F.8H/4hDls=TXg:J6u3c3bLDj3W(r.k:dPR^O\\#%_S$n]FX1rOs"iq%$;\5`2`m;H]rSc*Gpd2dYE!qaLS]:D\(]_TbL\m]o0
%OsVI^D[1mKpjBZBl#tlY<o;j&FSde!T@`O"&[D@EeE;a?_as%DbGkRY#K!o=ir5-UP0S;SQ"jOFV6f1::'Y^`jE/`6L.T-k[-N]7
%%pZ<9>Ap^W?>o=Y]'D(WT(d5Ii.')FY46P"!p$9SBV1dUP'0]8lGs,iE4!oQ.d*Pu"/CSN>mXa;@!m*Bk8aFJ7h@X+[@8_tWl5!F
%KTe(,SQ-BbJUj<*EOQ?6NBT@Vj;YYi(7e+]43A=K'!IKQ#En(.`c%T&/1b'"!5@PIZKjL(kOLfu2,"]qb:Ql6:-%542r1igX4*PB
%VANlQi,k>JP^6^dq.:dt+EudN]eJHP*%e<IaOra/3>p$3OG<NgB#,spRYF_Q9OrLX];C)[XQ>Ts@`V2X&`kQOk6%gU$7s7Y*@GU@
%1IXOU>RjBV,;&hIHLpG=2;Pbo#j4EF+g:YAC!0l?m;Qo_&*'I3!^U3)$rs.!jCt:G;bqTr/a>6Ia'Q>K#6P=0<bBBJLoippe&R[s
%Tds_fC-9B?D(Oj?+ojLm8X@#Cp""/4S:%2UjQRF6<.WG"X`C%;RQ&^5N?,Efqf*@"r"aLGE+/13lRD9l&f0aoM-Q\0QRGG^9X#W-
%PeCCiaU-<\C,2;VNJEZn9TeHZ9Y,`3a[!i03)F(7q16*>1]so/8R4S.d#FS0@:#nd9$LF3HmBp*Z^>sck^#(bbDJ4s%BPY.QrK6;
%S!2$pqnK#8-'Ljd_2qV\aV!j^1fadr3Jft?,F-Pj`qG5>[>_EFq_@q&P[?rX].*8*EF($Eq`4F4<Su$_+.DeJBm<oIhQAVP<hm->
%f)*GRbprL#XaIUT^0,g?XjD!Qni(@`]:IpZ(@nc[]\/;$c)Q!:n'*,+2jlmW?qIGcHg4QcR,?\We]5=,BgN]V?[C[sO1Rt]Z#6$1
%Ci)hNK%K7_aIsZZlakjCn74XKcHc`U+;;M\mV]V=qm9ZgpcRC*(pD9OG60M0#DOZ^79O"]o".am9@;6maQ)(cUV"tM[)iD"?Z,%@
%B!JpQY$GjF'^%olnN76JMV7EqH<P2&]Gl9'cVs3mIsJiE[)Z07g>7Gd@'VD6qq_Z$!p!kV.kldC!#IQ#\j=DcKjM^=6(B>71'JJ^
%Q95-$3U'cIcI;s/H++DS:U<1WU9og3b<\7M$\&G3EZQ%Wg2ZJel<oQ:'r,'u#]<]L64PlEW*Q@6dO:]rhKR!O]FHhKkIF!7:^-&f
%c<S5D[)q@_\bQOtFq1EQJnnIg3t;pH0Pi/NNI[.W5.CO9DhMTZLG\+DZL=+PKJ*Vo>sqi=SWCbhr53KnP23ZJbstFUbV0nA5W)Bh
%R-&AR(ANt*:e3FUoG%O9JD5ptH*dVgUtZn)T!;(5N:g_Q>6NhQfq\k09KIS^8\Idh+=6japoU\GRY=1jpoDk(X3(CHFnia-q_jH/
%D,<WRl/AF6Er^V/Qs3tB(_r%N]URD:A9QEtegX0VBnFAb:5<jk_Th7,AE*bhW"rO%QnN^-Wb._fK4;0)KQ?"*n&k9AkZu,in2ue1
%aH8.(K4B?c_2%+&V7RK7$]IljdnrPH9\lij-='])!r:;r(CVQ@o20!9?K_R($1o>3VL<Xq,]K7$@n\nk8>dAf<,R!<9UZ-ZQFpFi
%HZdotDXbjMe6t7h6nRk@Rg,kd,B!!QT_E>^&"#oX:;3f-O'p!)'7%N_2<rr"CXfP'e?<Z;cX*B\RWGcW]Blcso-k!/JiAHikpTp<
%GMf#;B[aq"d;#Zj:"-"jk>[)n3hj*Y&a&=nPit[P1JcD:))l]I44ClKKT?q<kYQnun#m9jf'#q*i)h-i4I2?L^eG06gjHp*LT'4F
%<_%(h%ZXG2LNM.be>VJISt<(9X/TDa5>XF.8AH*fE0I*LGT"REY9R4L`/p_4A=>rb=O6Q?;tWmgn`RN38q2b5`7\dsp=9&^@R>8@
%Fa-QoP[Kkl1suB)d-B&WA`1>O-jTHE7]K/F0F#:j>WtlWR:HLYX7!"mLt@[&2P+6NGqCdW3=A7;.OMn1F!<V,J>2s<m$?3DV9k`c
%';o_G6$F_a/l'tkKBCVaXpE=Ho6N>?WHQ_Z@)Ko#!HAsY&hmLTZ:Vo"5b>GbJf$Ek^QVP<fGrg,)-Zso=]Z;GS`,QG>s32_-`fD,
%ih]5K6Rc%ZiXtBtd)IKD/F>4;XMCM,=LfSdSO\YAB+`)k.`FFUR3RcV%iSpR5+h\[kSA/^3ROu#0*5M)\<10j#<CV0Yf!8=9PUM4
%W\:([c3BMqcW\/7]FM805aYN0UF.=%7ZRRt$O0&K1;c)EIPpQSTMi`LP;s58KGaPF/84r#;d[@JZBf&XWRSbK+KeQ>d&%\bKAU.4
%67R(2[#"e+4pjlG]Lcn%<XOY"92NUWC6[:>hY\$YgtcT24^Y9/"t"8AiX@']N?r%n9[S:u\5f%I`3e5DcM&g^S;GgMelMJ?lg,YV
%-FnHM-CQ1p1&qg"n"moYZD`\s`NPa?d8@$\Ap>%*9qpP7o[Km`5_aRn_%-^if+@r!kiT<<XFsX"c''dM/eIXd`c-BP=WAJI3^'E#
%gG^XU2!MaM$Vr3tBi6PWo0^"B4Cc%Ua6+us\TRednF<e%lO1%GUaK:qNUX:^[!f+A]$:!DnMO2oJ$7sD"k,1(E(bS+\@!Z&'QFm>
%N0)b(Y71_MR:"R#Is5Z1+-CKWaAF-Q5@hP<GG\7?NNZEbX95r4ah//"@Ma`(l"96m3gr=c.N9S0'GQs)P8mQ8@<rbQkp:$_M9!PD
%ifd)F_cDogbsdD%&<UWb/Q\d4'Xhu&"m$T2YRd7aVN?Mp8r"5DG`("VqQWGhE39Z2E")uOC0gf_$$QuMKRk:Lp(k=Pl9VduSOX0_
%>$l379B'!4PE0>:R2U@YcQ:%.ElZmp;QK[.P$6!cjle%apPO,H':#SY$>O2<f)92hePt#FbuS8s2Mq6<b3.A*rq4F.r=;+kUA`u[
%e&;';SKop.(XRHV[)YltOD8SD_U4BC%R<.cUQ7na-ZD=[@K0*I`YebjWp2+gQA<8Ae+DDL35nmnqeGKN]P.Fa1%@1g[l*!/-Z*qk
%:N.5/mSEL&JNBdq1CNVX==n3-VU0D`Q^T<^.REIlTp]d6XX8I45qC4FpG?TP!g01+^(,h"7?bGWQp@_mbe"DrBZV1FX=UV;clQVq
%9?86o]*;&#1igB$QXWWXW;E7iO=j0:L/Kr]H=BG)[kgV>S+ib5C7D_EH8rl/GrlSJ[i#F2`LDj`OM>"8pXQOc\X?o670HEAIX8<;
%k:4oUPY(Nh,'XVr9[0[I\m`"KM:Kq?r"MI_I-Q"p'mdRe0_#Q.?Kfnb"/..3rXo6+pn6*/`CQQ;g\HWeGhIiaU,$(sBJue^8i*!/
%p:0I(_4*<V)3\3F7L\#=Rk_'5$D7!L#lcdE+D0u>?#?,NY@;r&k,&mP"=-:r.-S#ESr93&+'Mgje[>ucYLd.r4NsEogt2)tX3VKZ
%H(OHUd%)1Iche0tThSUJ9VN#s&biS_*+gqrB*FNclmHZaS0I.r>s>Rj@!F<uKgJ#0HI+8ck2\NR;5<lJno=';b<$$eU)GC58`D0j
%VLY$0aY^,.EAu<i-d!Pc_:,l;I]V]G^c-N)_=ajqs&\j`XY[inU"+l]5>&keSB/:Mf]nXhLm3;35WS&HRHcn8Dnc'Um)B=V+:L5S
%5&,d.Hc<KpgQ!=r`<LU`+GLsRSrcej4ChusWR;:bgaSJNp#29%5pChpZ>'qa[MF;b292JL^Z";MrcjFi(I=Hmcic\bE>4TS-2#@l
%[PV#qlG*,XdO1.[0Dt'Tj@t!?(0KAT/XKhcJ+7P%n7%4sF#fAs(Y^$;qV"J8;me.Yrc:u<#W,A3oH^:HZq\*2+MJ;hImg8[gW8f*
%Q.HPi.t"!1UKf)N(pu#((;L+C/[?4"7`MYd+`OAS]%QS.OpTI7R4Z`Hm3ONG8edEjD(6WL*sPk,7$puUVFCD*3Egk]K`\O'8R528
%RHDqlQQh9-EiS_"3[gclCm)??@JZGX;2$uHqGjr'(=:rp:f&\j.22rZrRO,nN^@9`%eKFEO@rY&5"[^bFar%MJfKXP<#\9=K('o8
%M>5`OXt@"=[29Lr#glN?Os8V3oFq3mBMHDT8+M,jDF:n,*CnK:T<DoShu-M5LZgodMY@(MY+.%<%?lfTh2goA0oK0J\IZcD^'Os/
%#\O=/>TS'P,9Xr3]!Pp5\6a2D%HamIUo'%T^.OTTcR5i\YAtG[U0YLF4I7=F:,1%NqF!J0XbmnK&f`2!Q_h3P1j;G=\,k\()'5Q>
%V<UEB62m]C1Uld2\6u\3dKUrjLJ53WV3%fVN(hkPdN1+(r1eIW2EQooAABeOLgC;`g"rc4VW<uhYuAp/7XupSUCZkXlI'8@Q@l]s
%ZtbrPj'*qfRBMu97XZ*%l>g!"R&9>J<_nG,0`N/5TKR2((RMT,D0hS[_nO&IdUXd)0P#@gBH_7>p+.aDi5#f,'Wke'.J-VmKa**>
%$Qf7urk.J4M;MY'O/:pPWa'()BGD?<!*(N5`S=1pQK95m^0?YUl]n;i2nZpa8JAb>\R0hcR8B?RF&P30ASA8HEdZ8OQ.UmH=K8G8
%V^N40HciR//`Pb8*ZeVf*GuFl=hn3*rOd=1/O-I_[NAU5bB*'@05KbGM/-c$&Sn:61GUV@J&U`,*%nV8^+TWO.I.V>a\QQ_O`9Jb
%F\T"k2G*n9%I@?r7^'X,8:u@i[;\8<&&m99EP$&P+7L2ENkf]A""(<B4mIAm.IfC@dpM+:)X0('Y\:n`Ut1^'!3jQKPM5ZaM^Kr*
%\Ph/$#Vo96l2=eP_fFUJ=#]OF0\g.eTj4K6;E=^DMW^m$ReM%fp<OHi9uh-$<sWTfQRl!Me$oHion)#=_As#+LSgb<qlP8!9Upf`
%Qsqp+U''n\*9n^g?EuA7Z3kj;5nru+'u=stq&p89B=ZQ)?::?6n?ht[&r%/V-Yrcl:\PZ8XnUTfC2aXe>=K!F>ZGmu8d6(u:fVe$
%bJM1?LXGRG/V7`DdeZW;r/^jQE[kDA3*2dWP&@ASK*W2oi:Cttn2*f[nbXFq]mYtfK*P])4^LcfmN\=9"E/4S+&3%U`[<M!4BIZs
%ji0LJLLmElld>IUeb4*kC&tOa#)XG[L_];:=TW0%%Vbc#BS5ACGC@8V-p#6e3dp+Wesdj.l\Q&C?ES,m2HoZIj^pRPRRQ.c>hQ[#
%?&AG&cE9t-f@[d"pSlb]mU[pH,<P&2`qm"8^>G\mp[Yd4rYs2AeUr,>11$L`f)p&]n\`FEd@@D>6]`[1]%:kJ.o3g(A)H(uH_fSR
%D5as0U*2QP<k_^eQr?_?AZ1AJR6%*DXG5_Sbi5CY'sl?JVOWc\4&Ns/-pDt%,-6lhVH>%[.5"0pd,3`Y7kbV[[E!W^cjbH9)ZdgI
%T,?e('_.tMLRUfA@6)4IQA>=1ld5Oa7KcB6K>5b)2!jNk/8Gkf)XPd#5L2`TKri_oK%kl]J)/^7hOZ)ip%j?Ni;)Q3QM2*1cRm_'
%qCq/M4Qiu^Yl@2@MJ@`rS=J9bS"-Pg8CIlLALY;9nPa/4Lc6RoO#W9/?.U@$)]?'PDWA3uQ$r\%MJ%jSc?8]QH!u>#HWi3m3a@'g
%%DTb>"bRC\%Z26oW_B.d@nF1uW;8rfmqJUr6*DbejWTYUdNZ(,T3G+iAmtJ4/#3Ru9mY[,W&0$\R`4A[^"QtC&Whlb\Ur@`'\P_S
%eNp(\nb#Pif(<g)#UH\?r?s[J>%_gJ`2(p8$Eo/\6ubZ8*\h[Yo;\Hdc6sIlo);`.D?#,?)Q*Ru%9&[q,X=K4F/?Co(8SBl]\8l!
%5n0PZ76sme.h#%SKd9l'YVoAR<4RQ6V30&$:o2^Q;'lC?ob)Tb.T'F>D2QI;E$3tWiOk`AAI.5s\39_1'jLo'"i=K6<f19HaF9ai
%;)ejr^>4jFjP%1PEtOQ!#B!5g?Wqj4rb7Q/T&6kfj,r=U.Jn5P,cTW5A%Ebb4g:ic(!^46@#t`FA6-7^/g.^XH8@^s`$iZH5EP#`
%]RMH?]3%kIm1X;]@;=:-U+f4Q^u$*>Hi5J4@im$DBLu+"l^&dDFl&SZZ7nnL5dYb/JB38>\K1/%.,k%rnF`i)]$rJT58E,5*(qAB
%at'?(7gIk9eNJRLUg:)7K2iB'8n4ZFgf9KfT0ZY+R9i5SLsph_h>_``rqDH!&$`n><n.uY9s%]<alhpR$Hm\fG#P%i6IQ5qjI!KR
%Mp4IT]9eFcFGqSinP.Q(\3m*g`(HKkMT$Ai!k9u3o8*'K;#ug;/=Kn6o`o_."I=qD"du?tpV;ZZ@,M<p>7$fPS2u$05`%">H1R]T
%m'QIp,fK80[,8rB_Rg[94RQia8uJ)8G0M2rJg*[uc*h:Ugkg]$UjcZ62r[dq93h!q?CW^,_,+.cI4C5YH,!fj#`YH8(<5+Ra/NC;
%naR@tq+I2alF]V:fkLW+pI=n$,:jSmU)=+L!tIkm&47*PH^c'gp9UX8o0@W5"KZ$j5tXrkqbmG]Nk%gsnR-2D$:okCQlq;k.bW<:
%S%pD\m,`"W&!fc5_CBRA>'!)_##T3AP7%>=[Af(n!\A>cqX`6bGH#@)EY]t,TlkJfJelQWjur!i1RoICZ?"bHcRR_mJR;<OH*idI
%9jI!HO(e1=BNhj+=I%HuC3N\2R:a.l,LRKU'L[rB<l?,E#+.=/DROUJR#Bdf:+E<8i$m'M#G8Ws9qYe,A[LAAAS/[XIS[?/ZP.Wo
%'o__:oN]CR<f$WT2JQ(i1)A2r!-O7!CSCe)3lldIUB,Mac4+d?9&c=pcYoGW=mGZlXfFfN-#%Z".j2Yin#5#8HntW9@25<u5]pnO
%qrs]LI9lgFBdEhSFR_Jap4nq$fA3<Z$-hK7Y6/\R[nlbp]T6]9/AVF*EN2beaYq&T=@*QHX:4>\ltSu+)XW^lnAU2to<a*u3p)e+
%fo"dXgI5t(R+8L-;X[*Vf,FV:WLg!a24rHJDpOVQ&+KOMqCOC_4r":MJ#<ZT%ZMbQFXR\,.3Du;`ig'1VniYor3Z59`sp.#3/"G-
%WY_^(G"1K.%"[2XmQ`,TnSgkbm6LE#`9O7.*obH*r>^<JQ`#_5P%JQ8oii$RL4s(RQC?P,km6]J:?Xd:<<cDo'k12m3)]e7lgCW@
%-p@L_Y`^`)A;HI&Ken:L\r-XbOCZD\nh=LW3S&,h601&c5Upp)&25aK/OS!L-b;=S;M:dE$37FOX03:BF+N/s&[*`4#EbP,)POfG
%YuRu!A=OmmN<qp>/MGE2+"AIZ:r(V[mLr_p&jrA)KI\J)P9`b!/0CZ&VaQQH;G3s8e0ZkAU@N.B[<*T[ZAIlsqE.H^DI-.kZ5tI<
%R\hId;KlE/)E+9C8UX0-Z`L"5lqfpKN^KDFMPYPhj;<?=!X=Xbp8VeYk?8)$YtUV1R`'$/H4'_kX:,Vr=AkEsj=&\$X:Pltpc_sj
%'LegFdYABWfp8V1s&s+(C#(_kcYl%a.XreNnohD]0mtkNol?q8$P>>9$GDH4HTJi5g+Z]iUr%d=mAgPio5IY^\^_mtVNk4BmR_rP
%l`*#brUc%Mf_SgeZlue0efsW2[;\W&'F9c0>,-[<'=[E5)P5s2'A:"WBbTe?mLWRV[u9+kEHg_),?N9tpE1VJ3&JH>H5)'i!aQKC
%ZX`(c\^GFTQ/-aY)F.a];qTc<d8MVY$fhI"^tI^pLb=@mL?_;]@p``5gKNA?l3W12MU@kDSQEEPEPIsJpUjQR0T!Sj=1g?4'8eX[
%%hf_3FTEtL_$ee=kC,W,s$?/eZPf?8I*U[j,gm@>"FkNe&t$@S-:AO"'eBu!6igT[Ri]k"*"Gm.f@#a]U=^pJ)sn:r`s=Z"e"dp3
%G#fN+rn,p--T`NpX7-GRY;WRPD-AXs;g(`gkDIEEgtf[HT`]iiRI$$nI5.i&SN+UQ4/_j8m)%A`oDZ5FL`]?^]P=5YPjeT`H)G4q
%%Z5SjR*fqhY*Z3:FbH`[a>cR$K8`P^;).%<Nj]=d:&(S<-(iUi,UW@"=\?'X?2A?SX;--]A:LG\,`%A+Gaum_8mZiu*DU<-a^eB\
%=E.k2F0bEL02ENNT/c[ZjJ<1`;dKQdTeSAL%MHrJE.hI?V`^W#_2iDH6trRm&-dXs36bPG$Ukg+Hq$(O/g*RA]!_F;MJM)1OX^ca
%,V$FJ[c%4c41g.92N6ECQTYTIFdjf&pJX_g%+p(g/Qh[Ld#W\N\?D%0B^1N!]M.DK=7S1?!a!N_do?o49MOUC;8.LJoMddU)R7Tj
%)tRRrc??PhUAF!##]UCsjm?TO0@K$aL.VBtoChm/[qF?kH[42_?NR;G1$[:WUUYn=6m-Y6H>-Dmmoi23_W([u55S3?hg1\3<fmXr
%l?2#2\!to5Dg*S@2$S[2ct"7VV]Gu.$(:%&Hq-$;&8gDXCQo0K71W,[_(*3o,Fm>H]Xg6i[g><tb5>j5[*/i^fR$)dA0b[[9JpCJ
%Ud:-IQqC8L)/i8*3n,nt$^[;fE$As=ikQjH-/($%pn0e/E-$f5"V'W^7Sf+eM,"`u%[<-O$)H&JHo'_LEp!sS&8Wl<"VfU>&uu6;
%QuN1MIX2D.<c=r2&\ZTi[Mtm:i\t*OE;jcAG]d`<2*899*@LcL;T^hjHI6`0c,"XL<'kOU8D'b:!c'@GT8.RHM?Ub6HgtGk::0,g
%J"dH4W=aNg,m@,fQ>LZh'Mhc*&-q=L0Z9R^UH,+R2pta2+$Epc(Jt]qZobg0aALcb1s':9nssKZVs[b+Mt-YhOQmRu%Ldfn+Ab8P
%kcde8Moj`]X1YPLeS,Q!aeDG$5k8!5A$41>(4qH7kSGEN?+\*#6VB",@P1#$+]HZbQe+,Y*0ME'^3Uj!?:EhHO^E.)fhG,:ld!3s
%rQcW>IbbH!!;/!Bd9.)bYmnqir[H;[UdKjQ;R6@n@Pi>hWS:&L)F('m+n/@<jlk$5,.c=74`np;e>F5i-acU8(?-%IQ`Z%B`,Nl*
%0`Md=(>^s;`E&j26bmPag*QthXCJqm3`)k_Z`,?s0gGCRI!o9IImPW'IdV.)!m@ZeHQ0aGKjsBrad,U<P2L.E,ANSiMEA+IY-%lk
%/o^QN^`*:7iSg%+kIhC,iIV7l.0gP<W[<js1Wj.g6A:7r*GQirJqee@[R\AK13hH_'j=Fr?BlpuLoU-YPhNOr*a0LC7JG`i5bq^A
%gcGcPc'f-TVq]^O9MYnb9t\APSVT.D[Q:eH;n,7'R'!-AQliSEXjpd\qU++m2TR4>?+-!]?W1I>4;7HMDUZLKJJF_oq`pfsncPLs
%'DP^_s*dt4:p^5DUMcdh'.3?DQ8DBZj*I_*k;<c_oX]mhf(pmSGt4R:k7Fac`uQ`Q^$H`h'VJ&=CC3q9j)hbB*N7*l5)nC"f2J<r
%8aWN9ZY=PkF[TM0`$c)_m8#?QY^#ldh\C[NUi%oePb?9BWlKo96gG:g2@;Ti<6K[p/P2dFXA.(O*/E87U!]/W,2Gn0TL>1!b9VI#
%3P3st0G&u'"_)->U;lT8gNVQCcYn$tGME)j?GRT,iN7n*lA*%K.drps2r;k"+6gHlotAE=`[cE)^:j.0hKXZ+NRup,CV7Yd%Q,>:
%7E6=1<D[7Y\X9dDW?Nuoh/0G;=NgBlq8K6^YqT>-q_Ls^f@S"8\%fHMQglss#O*G,j6t_M/$23$E6^>0Mb"C&,+QkQ&/G`Q$FXX(
%%qCSrPN+jWe$:VE;s%eb'onmKa[Ud\D\q6,*N\G)%nm4WH7kiXohk0HQm'oJBJ`u$[jYD"QD;]L>=j5`7D?WQb,eHa'.m_md^\%4
%R#MYT\t+l*"\G<?Fi3j-+g1b#o=thncsAAQ\sqr-h4&QEi9bX<A%XqmZP[cPUA]6k7Bc)s4d1o64+YqcNAHdZi$%8a&%aqop-I$]
%@-,X59]2h^FO/N8j>!l!p&(>5q_l/p;M<eOM.Xndkdj`CPHsh&Vbao!WkFpKk_'?RH]2A?LI4,6[f_a9RKE%(FYomJ2&mH$0;[d+
%/7PQ;PcKB,ir`@EFNmuDUr0P&W%QQlNU.bT"%@S!bE>F[>Y.WW<h5t^ojufAnoj5o!,07WbP#qV"L*nWlX-NErLD>(8Y6K/=uO6/
%9RbVM#b1?Bl(n:CRF%:M.eO<Z6Y'$Y3UOr*M"Qic^hJE-:L[R!FH<FBR#A*cc,GYjN:3FZo;=%glU,UTGoT7s\%b8UN*A2)2Zqsg
%ak\]l"1EQ4S[[FrgNpeukY>uZUJr?k?cP&f@Vn['DQT@23L62qQkhnZ_W.[1qM9o.7r"$&Yg\>2eX)Go]<sqP?*1ef2^trTi7+"&
%%Q*Q>R)Ck<o2[Hk:65,b\<lM1<&SKV5_KGk;QeER3q,;nJbInS5"d0?<@1mUHkqDWYbu+(TN!Y2K$%ZTb7INSlju>b2JH%H>c1/<
%122/\2<d-n=ATCE%*K%T1T9fpmT82@LU2fS4776a'ZP/5G^quZ;E4.8Z(r-(eTn0,f8]=DGU36dA@s8,6(FU(eGIZPa^LouI&-Xj
%kZ=_<`^l>=-$e-\b(Cid]t"_!.6GTe2hIgglM-/9#_<pdmNF(#bG8FLTXMAu#K#XeNqdJ6C9n%^13WMg7Y4%uBcL3B(0H=%/-rPE
%[(=@bc^:fSFHs?AT%c.f!(]<;/ShpaAmT`PU)%fk%MoVZ(,r$6!]-*qC%1=[RoBa8j=Y+X\m7]IrpjB9nk_f2rgjg>;b*EJ\c&;b
%Rn8GSMPt_DAX0?U##.<mFNDV#)W)^?*";rOB70NGF@m84+6k^!\kIIoY?@9#ZSI$DXNYj1mStP/V%1Ia*)sffK$.U!]8)Z%Dg(qa
%nrfk>_Xnau#ZURSJ/km2CYf/'=*6c,VbTMf%,ff?%9!rsZSOGiJPpUZS)1&QLtC.Zb?dGqiJG<fO1!jZ%bEML54!(TjSQg1Du[km
%rL:S!&-$_J5Q9\-rL^k'h1,8!+$Mk`_r(Er^\c(/s)3D^h>dHRr;I4Vq`"QM0>IC6J,eVSs7B+er3*m4fAHV+o:Nbpiu`aM0E:mp
%J,&u/J,-kYq>\@LO00T&h;A1Os5eb,gV<Ra!AN)G^]~>
%AI9_PrivateDataEnd
